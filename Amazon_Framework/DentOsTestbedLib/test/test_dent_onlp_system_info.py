# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/platform/onlpdump/onlpdump.yaml
#
# DONOT EDIT - generated by diligent bots

import asyncio

from dent_os_testbed.lib.onlpdump.onlp_system_info import OnlpSystemInfo

from .utils import TestDevice


def test_that_onlp_system_info_show(capfd):

    dv1 = TestDevice(platform="dentos")
    dv2 = TestDevice(platform="dentos")
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        OnlpSystemInfo.show(
            input_data=[
                {
                    # device 1
                    "test_dev": [{}],
                }
            ],
            device_obj={"test_dev": dv1},
        )
    )
    print(out)
    assert "command" in out[0]["test_dev"].keys()
    assert "result" in out[0]["test_dev"].keys()
    # check the rc
    assert out[0]["test_dev"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        OnlpSystemInfo.show(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            # command 1
                            "product_name": "qbkrvdys",
                            "serial_number": "eahcjfjs",
                            "mac": "mbytserq",
                            "mac_range": "feztpwin",
                            "manufacturer": "cmgpkahz",
                            "manufacturer_date": "woabcshr",
                            "vendor": "sbmqwdki",
                            "platform_name": "zdiwoaki",
                            "device_version": "uuwrtqma",
                            "label_revision": "qexngcow",
                            "country_code": "iyrwnxkl",
                            "diag_version": "qfrdxpri",
                            "service_tag": "vuyqsxhx",
                            "onie_version": "yxdmlgpj",
                        },
                        {
                            # command 2
                            "product_name": "ilcxgbhv",
                            "serial_number": "aydqrcwm",
                            "mac": "hbewtovx",
                            "mac_range": "epitvjmu",
                            "manufacturer": "yqkxzjyy",
                            "manufacturer_date": "cmaljoxq",
                            "vendor": "swhtntsw",
                            "platform_name": "wtrknabl",
                            "device_version": "kcarapuo",
                            "label_revision": "uobzcxxj",
                            "country_code": "hiwyfaro",
                            "diag_version": "forsoptr",
                            "service_tag": "bbnzpsfr",
                            "onie_version": "eyeqlwjd",
                        },
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        OnlpSystemInfo.show(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            "product_name": "qbkrvdys",
                            "serial_number": "eahcjfjs",
                            "mac": "mbytserq",
                            "mac_range": "feztpwin",
                            "manufacturer": "cmgpkahz",
                            "manufacturer_date": "woabcshr",
                            "vendor": "sbmqwdki",
                            "platform_name": "zdiwoaki",
                            "device_version": "uuwrtqma",
                            "label_revision": "qexngcow",
                            "country_code": "iyrwnxkl",
                            "diag_version": "qfrdxpri",
                            "service_tag": "vuyqsxhx",
                            "onie_version": "yxdmlgpj",
                        }
                    ],
                    # device 2
                    "test_dev2": [
                        {
                            "product_name": "ilcxgbhv",
                            "serial_number": "aydqrcwm",
                            "mac": "hbewtovx",
                            "mac_range": "epitvjmu",
                            "manufacturer": "yqkxzjyy",
                            "manufacturer_date": "cmaljoxq",
                            "vendor": "swhtntsw",
                            "platform_name": "wtrknabl",
                            "device_version": "kcarapuo",
                            "label_revision": "uobzcxxj",
                            "country_code": "hiwyfaro",
                            "diag_version": "forsoptr",
                            "service_tag": "bbnzpsfr",
                            "onie_version": "eyeqlwjd",
                        }
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    assert "command" in out[1]["test_dev2"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    assert "result" in out[1]["test_dev2"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0
    assert out[1]["test_dev2"]["rc"] == 0
