# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/network/tc/tc.yaml
#
# DONOT EDIT - generated by diligent bots

import pytest
from dent_os_testbed.lib.tc.linux.linux_tc_chain_impl import LinuxTcChainImpl
from dent_os_testbed.lib.test_lib_object import TestLibObject


class TcChain(TestLibObject):
    """
    - tc [ OPTIONS ] chain [ add | delete | get ] dev DEV [ parent qdisc-id | root ] filtertype
    [ filtertype specific parameters ]
    - tc [ OPTIONS ] chain [ add | delete | get ] block BLOCK_INDEX filtertype
    [ filtertype specific parameters ]
    OPTIONS := { [ -force ] -b[atch] [ filename ] | [ -n[etns] name ] | [ -nm | -nam[es] ] |
      [ { -cf | -c[onf] } [ filename ] ] [ -t[imestamp] ] | [ -t[short] | [ -o[neline] ] }

    """

    async def _run_command(api, *argv, **kwarg):
        devices = kwarg["input_data"]
        result = list()
        for device in devices:
            for device_name in device:
                device_result = {device_name: dict()}
                # device lookup
                if "device_obj" in kwarg:
                    device_obj = kwarg.get("device_obj", None)[device_name]
                else:
                    if device_name not in pytest.testbed.devices_dict:
                        device_result[device_name] = "No matching device " + device_name
                        result.append(device_result)
                        return result
                    device_obj = pytest.testbed.devices_dict[device_name]
                commands = ""
                if device_obj.os in ["dentos", "cumulus"]:
                    impl_obj = LinuxTcChainImpl()
                    for command in device[device_name]:
                        commands += impl_obj.format_command(command=api, params=command)
                        commands += "&& "
                    commands = commands[:-3]

                else:
                    device_result[device_name]["rc"] = -1
                    device_result[device_name]["result"] = "No matching device OS " + device_obj.os
                    result.append(device_result)
                    return result
                device_result[device_name]["command"] = commands
                try:
                    rc, output = await device_obj.run_cmd(
                        ("sudo " if device_obj.ssh_conn_params.pssh else "") + commands
                    )
                    device_result[device_name]["rc"] = rc
                    device_result[device_name]["result"] = output
                    if "parse_output" in kwarg:
                        parse_output = impl_obj.parse_output(
                            command=api, output=output, commands=commands
                        )
                        device_result[device_name]["parsed_output"] = parse_output
                except Exception as e:
                    device_result[device_name]["rc"] = -1
                    device_result[device_name]["result"] = str(e)
                result.append(device_result)
        return result

    async def add(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        TcChain.add(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'dev':'undefined',
                        'parent':'int',
                        'root':'bool',
                        'block':'int',
                        'filtertype':'string',
                        'flowid':'undefined',
                        'options':'string',
                }],
            }],
        )
        Description:
        tc [ OPTIONS ] chain [ add | delete | get ] dev DEV [ parent  qdisc-id  |  root  ]
        filtertype [ filtertype specific parameters ]
        tc [ OPTIONS ] chain [ add | delete | get ] block BLOCK_INDEX filtertype [ filter‐
        type specific parameters ]

        """
        return await TcChain._run_command("add", *argv, **kwarg)

    async def delete(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        TcChain.delete(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'dev':'undefined',
                        'parent':'int',
                        'root':'bool',
                        'block':'int',
                        'filtertype':'string',
                        'flowid':'undefined',
                        'options':'string',
                }],
            }],
        )
        Description:
        tc [ OPTIONS ] chain [ add | delete | get ] dev DEV [ parent  qdisc-id  |  root  ]
        filtertype [ filtertype specific parameters ]
        tc [ OPTIONS ] chain [ add | delete | get ] block BLOCK_INDEX filtertype [ filter‐
        type specific parameters ]

        """
        return await TcChain._run_command("delete", *argv, **kwarg)

    async def get(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        TcChain.get(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'dev':'undefined',
                        'parent':'int',
                        'root':'bool',
                        'block':'int',
                        'filtertype':'string',
                        'flowid':'undefined',
                        'options':'string',
                }],
            }],
        )
        Description:
        tc [ OPTIONS ] chain [ add | delete | get ] dev DEV [ parent  qdisc-id  |  root  ]
        filtertype [ filtertype specific parameters ]
        tc [ OPTIONS ] chain [ add | delete | get ] block BLOCK_INDEX filtertype [ filter‐
        type specific parameters ]

        """
        return await TcChain._run_command("get", *argv, **kwarg)

    async def show(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        TcChain.show(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'dev':'undefined',
                        'block':'int',
                        'options':'string',
                }],
            }],
        )
        Description:
        tc [ OPTIONS ] chain show dev DEV
        tc [ OPTIONS ] chain show block BLOCK_INDEX

        """
        return await TcChain._run_command("show", *argv, **kwarg)
