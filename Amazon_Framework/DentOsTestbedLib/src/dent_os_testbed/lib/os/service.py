# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/system/os/service.yaml
#
# DONOT EDIT - generated by diligent bots

import pytest
from dent_os_testbed.lib.os.linux.linux_service_impl import LinuxServiceImpl
from dent_os_testbed.lib.test_lib_object import TestLibObject


class Service(TestLibObject):
    """
    service related inforamtion
    """

    async def _run_command(api, *argv, **kwarg):
        devices = kwarg["input_data"]
        result = list()
        for device in devices:
            for device_name in device:
                device_result = {device_name: dict()}
                # device lookup
                if "device_obj" in kwarg:
                    device_obj = kwarg.get("device_obj", None)[device_name]
                else:
                    if device_name not in pytest.testbed.devices_dict:
                        device_result[device_name] = "No matching device " + device_name
                        result.append(device_result)
                        return result
                    device_obj = pytest.testbed.devices_dict[device_name]
                commands = ""
                if device_obj.os in ["dentos", "cumulus"]:
                    impl_obj = LinuxServiceImpl()
                    for command in device[device_name]:
                        commands += impl_obj.format_command(command=api, params=command)
                        commands += "&& "
                    commands = commands[:-3]

                else:
                    device_result[device_name]["rc"] = -1
                    device_result[device_name]["result"] = "No matching device OS " + device_obj.os
                    result.append(device_result)
                    return result
                device_result[device_name]["command"] = commands
                try:
                    rc, output = await device_obj.run_cmd(
                        ("sudo " if device_obj.ssh_conn_params.pssh else "") + commands
                    )
                    device_result[device_name]["rc"] = rc
                    device_result[device_name]["result"] = output
                    if "parse_output" in kwarg:
                        parse_output = impl_obj.parse_output(
                            command=api, output=output, commands=commands
                        )
                        device_result[device_name]["parsed_output"] = parse_output
                except Exception as e:
                    device_result[device_name]["rc"] = -1
                    device_result[device_name]["result"] = str(e)
                result.append(device_result)
        return result

    async def show(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Service.show(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'name':'string',
                        'status':'string',
                }],
            }],
        )
        Description:
        > systemctl list-units --type=service
        UNIT                               LOAD   ACTIVE SUB     DESCRIPTION
        cron.service                       loaded active running Regular background program processing daemon
        dbus.service                       loaded active running D-Bus System Message Bus
        dnsmasq.service                    loaded active running dnsmasq - A lightweight DHCP and caching DNS server
        faultd.service                     loaded active running LSB: Start Faultd Agent
        frr.service                        loaded active running FRRouting
        ....

        """
        return await Service._run_command("show", *argv, **kwarg)

    async def start(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Service.start(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'name':'string',
                }],
            }],
        )
        Description:
        > systemctl <operation> <name>

        """
        return await Service._run_command("start", *argv, **kwarg)

    async def restart(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Service.restart(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'name':'string',
                }],
            }],
        )
        Description:
        > systemctl <operation> <name>

        """
        return await Service._run_command("restart", *argv, **kwarg)

    async def stop(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Service.stop(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'name':'string',
                }],
            }],
        )
        Description:
        > systemctl <operation> <name>

        """
        return await Service._run_command("stop", *argv, **kwarg)

    async def enable(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Service.enable(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'name':'string',
                }],
            }],
        )
        Description:
        > systemctl <operation> <name>

        """
        return await Service._run_command("enable", *argv, **kwarg)

    async def disable(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Service.disable(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'name':'string',
                }],
            }],
        )
        Description:
        > systemctl <operation> <name>

        """
        return await Service._run_command("disable", *argv, **kwarg)
