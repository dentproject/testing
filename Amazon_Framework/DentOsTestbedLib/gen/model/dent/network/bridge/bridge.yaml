- module: bridge
  description: bridge - show / manipulate bridge addresses and devices
  classes:
   - name: bridge_link
     desc: |
      - bridge [ OPTIONS ] OBJECT { COMMAND | help }
      - bridge link [ show ] [ dev DEV ]
     apis: ['set', 'show' ]
     members:
      - name: dev
        type: string
        desc: |
         interface name of the bridge port
      - name: cost
        type: string
        desc: |
          the STP path cost of the specified port.
      - name: priority
        type: int
        desc: |
          the STP port priority. The priority value is an unsigned 8-bit quantity (number between 0 and 255).
          This metric is used in the designated port an droot port selection algorithms.
      - name: state
        type: int
        desc: |
         the operation state of the port. Except state 0 (disable STP or BPDU filter feature), this is primarily
         used by user space STP/RSTP implementation. One may enter port state name (case insensitive), or one of
           the numbers below. Negative inputs are ignored, and unrecognized names return an error.
         0 - port is in STP DISABLED state. Make this port completely inactive for STP. This is also called BPDU
             filter and could be used to disable STP on an untrusted port, like a leaf virtual devices.
         1 - port is in STP LISTENING state. Only valid if STP is enabled on the bridge. In this state the port
             listens for STP BPDUs and drops all other traffic frames.
         2 - port is in STP LEARNING state. Only valid if STP is enabled on the bridge. In this state the port will
             accept traffic only for the purpose of updating MAC address tables.
         3 - port is in STP FORWARDING state. Port is fully active.
         4 - port is in STP BLOCKING state. Only valid if STP is enabled on the bridge. This state is used during
             the STP election process. In this state, port will only process STP BPDUs.
      - name: guard
        type: bool
        desc: |
          guard on or guard off
          Controls whether STP BPDUs will be processed by the bridge port. By default, the flag is turned off allowed
          BPDU processing. Turning this flag on will disables the bridge port if a STP BPDU packet is received.
          If running Spanning Tree on bridge, hostile devices on the network may send BPDU on a port and cause network
          failure. Setting guard on will detect and stop this by disabling the port. The port will be restarted if link
          is brought down, or removed and reattached. For example if guard is enable on eth0:
          ip link set dev eth0 down; ip link set dev eth0 up
      - name: hairpin
        type: bool
        desc: |
          hairpin on or hairpin off
          Controls whether traffic may be send back out of the port on which it was received. This option is also called
          reflective relay mode, and is used to support basic VEPA (Virtual Ethernet Port Aggregator) capabilities.
          By default, this flag is turned off and the bridge will not forward traffic back out of the receiving port.
      - name: fastleave
        type: bool
        desc: |
          fastleave on or fastleave off
          This flag allows the bridge to immediately stop multicast traffic on a port that receives IGMP Leave message.
          It is only used with IGMP snooping is enabled on the bridge. By default the flag is off.
      - name: root_block
        type: bool
        desc: |
          root_block on or root_block off
          Controls whether a given port is allowed to become root port or not. Only used when STP is enabled on the bridge.
          By default the flag is off.
          This feature is also called root port guard. If BPDU is received from a leaf (edge) port, it should not be elected
          as root port. This could be used if using STP on a bridge and the downstream bridges are not fully trusted; this
          prevents a hostile guest from rerouting traffic.
      - name: learning
        type: bool
        desc: |
          learning on or learning off
          Controls whether a given port will learn MAC addresses from received traffic or not. If learning if off, the bridge
          will end up flooding any traffic for which it has no FDB entry. By default this flag is on.
      - name: learning_sync
        type: bool
        desc: |
          learning_sync on or learning_sync off
          Controls whether a given port will sync MAC addresses learned on device port to bridge FDB.
      - name: flood
        type: bool
        desc: |
          flood on or flood off
          Controls whether a given port will flood unicast traffic for which there is no FDB entry.
          By default this flag is on.
      - name: hwmode
        type: string
        desc: |
          hwmode - Some network interface cards support HW bridge functionality and they may be configured in
          different modes. Currently support modes are:
            vepa - Data sent between HW ports is sent on the wire to the external switch.
            veb - bridging happens in hardware.
      - name: mcast_flood
        type: bool
        desc: |
          mcast_flood on or mcast_flood off
          Controls whether a given port will flood multicast traffic for which there is no MDB entry.
          By default this flag is on.

      - name: mcast_to_unicast
        type: bool
        desc: |
          mcast_to_unicast on or mcast_to_unicast off
          Controls whether a given port will replicate packets using unicast instead of multicast.
          By default this flag is off.
          This is done by copying the packet per host and changing the multicast destination MAC to a unicast one accordingly.
          mcast_to_unicast works on top of the multicast snooping feature of the bridge. Which means unicast copies are
          only delivered to hosts which are interested in it and signalized this via IGMP/MLD reports previously.
          This feature is intended for interface types which have a more reliable and/or efficient way to deliver
          unicast packets than broadcast ones (e.g. WiFi).
          However, it should only be enabled on interfaces where no IGMPv2/MLDv1 report suppression takes place.
          IGMP/MLD report suppression issue is usually overcome by the network daemon (supplicant) enabling AP isolation
          and by that separating all STAs.
          Delivery of STA-to-STA IP multicast is made possible again by enabling and utilizing the bridge hairpin mode,
          which considers the incoming port as a potential outgoing port, too (see hairpin option). Hairpin mode is
          performed after multicast snooping, therefore leading to only deliver reports to STAs running a multicast router.
      - name: neigh_suppress
        type: bool
        desc: |
          neigh_suppress on or neigh_suppress off
          Controls whether neigh discovery (arp and nd) proxy and suppression is enabled on the port. By default this flag is off.
      - name: vlan_tunnel
        type: bool
        desc: |
          vlan_tunnel on or vlan_tunnel off
          Controls whether vlan to tunnel mapping is enabled on the port. By default this flag is off.
      - name: isolated
        type: bool
        desc: |
          isolated on or isolated off
          Controls whether a given port will be isolated, which means it will be able to communicate with
          non-isolated ports only. By default this flag is off.
      - name: backup_port
        type: string
        desc: |
          backup_port DEVICE
          If the port loses carrier all traffic will be redirected to the configured backup port
      - name: nobackup_port
        type: bool
        desc: |
          nobackup_port - Removes the currently configured backup port
      - name: self
        type: bool
        desc: |
          self - link setting is configured on specified physical device
      - name: master
        type: bool
        desc: |
          master - link setting is configured on the software bridge (default)
      - name: timestamp
        type: bool
        desc: |
          -t, -timestamp
          display current time when using monitor option.
      - name: options
        type: string
        desc: |
         OPTIONS := { -V[ersion] | -s[tatistics] | -n[etns] name | -b[atch] filename | -c[lor] |
          -p[retty] | -j[son] | -o[neline] }
   - name: bridge_fdb
     desc: |
      - bridge [ OPTIONS ] OBJECT { COMMAND | help }
      OBJECT := { link | fdb | mdb | vlan | monitor }
      OPTIONS := { -V[ersion] | -s[tatistics] | -n[etns] name | -b[atch] filename | -c[lor] |
        -p[retty] | -j[son] | -o[neline] }
      - bridge fdb { add | append | del | replace } LLADDR dev DEV { local | static | dynamic }
      [ self ] [ master ] [ router ] [ use ] [ extern_learn ] [ sticky ] [ dst IPADDR ] [ vni VNI ] [ port PORT ] [ via DEVICE ]
      - bridge fdb [ show ] [ dev DEV ] [ br BRDEV ] [ brport DEV ] [ vlan VID ] [ state STATE ]
     desc:  fdb objects contain known Ethernet addresses on a link.
     apis: ['add', 'append', 'delete', 'replace', 'show']
     members:
      - name: dev
        type: string
        desc: |
         interface name of the bridge port
      - name: lladdr
        type: mac_t
        desc: Link layer address
      - name: type
        type: string
        desc: local| static| dynamic
      - name: self
        type: bool
        desc: self
      - name: master
        type: bool
        desc: master
      - name: router
        type: bool
        desc: router
      - name: use
        type: bool
        desc: use
      - name: extern_learn
        type: bool
        desc: extern_learn
      - name: sticky
        type: bool
        desc: sticky
      - name: dst
        type: ip_addr_t
        desc: destination ip address
      - name: vni
        type: int
        desc: VNI
      - name: port
        type: int
        desc: Port
      - name: via
        type: string
        desc: via device
      - name: br
        type: string
        desc: Bridge Device
      - name: brport
        type: string
        desc: Bridge port device
      - name: vlan
        type: int
        desc: VID
      - name: state
        type: string
        desc: State
      - name: options
        type: string
        desc: |
         OPTIONS := { -V[ersion] | -s[tatistics] | -n[etns] name | -b[atch] filename | -c[lor] |
          -p[retty] | -j[son] | -o[neline] }
   - name: bridge_mdb
     desc: |
      - bridge [ OPTIONS ] OBJECT { COMMAND | help }
      OBJECT := { link | fdb | mdb | vlan | monitor }
      OPTIONS := { -V[ersion] | -s[tatistics] | -n[etns] name | -b[atch] filename | -c[lor] |
        -p[retty] | -j[son] | -o[neline] }
      - bridge mdb { add | del } dev DEV port PORT grp GROUP [ permanent | temp ] [ vid VID ]
      - bridge mdb show [ dev DEV ]
     desc:  mdb objects contain known IP multicast group addresses on a link.
     apis: ['add', 'delete', 'show' ]
     members:
      - name: dev
        type: string
        desc: |
         interface name of the bridge port
      - name: port
        type: int
        desc: Port
      - name: grp
        type: int
        desc: GROUP
      - name: permanent
        type: bool
        desc: Permanent
      - name: temp
        type: bool
        desc: Temp
      - name: vid
        type: int
        desc: VID
      - name: options
        type: string
        desc: |
         OPTIONS := { -V[ersion] | -s[tatistics] | -n[etns] name | -b[atch] filename | -c[lor] |
          -p[retty] | -j[son] | -o[neline] }
   - name: bridge_vlan
     desc: |
      - bridge [ OPTIONS ] OBJECT { COMMAND | help }
      OBJECT := { link | fdb | mdb | vlan | monitor }
      OPTIONS := { -V[ersion] | -s[tatistics] | -n[etns] name | -b[atch] filename | -c[lor] |
        -p[retty] | -j[son] | -o[neline] }
      - bridge vlan { add | del } dev DEV vid VID [ tunnel_info TUNNEL_ID ] [ pvid ] [ untagged ] [ self ] [ master ]
      - bridge vlan [ show | tunnelshow ] [ dev DEV ]
     desc:  vlan objects contain known VLAN IDs for a link.
     apis: ['add', 'delete', 'show', 'tunnelshow' ]
     members:
      - name: dev
        type: string
        desc: |
         interface name of the bridge port
      - name: vid
        type: int
        desc: vlan id
      - name: tunnel_info
        type: int
        desc: TUNNEL_ID
      - name: pvid
        type: bool
        desc: pvid
      - name: untagged
        type: bool
        desc: pvid
      - name: self
        type: bool
        desc: Self
      - name: master
        type: bool
        desc: Master
      - name: options
        type: string
        desc: |
         OPTIONS := { -V[ersion] | -s[tatistics] | -n[etns] name | -b[atch] filename | -c[lor] |
          -p[retty] | -j[son] | -o[neline] }
   - name: bridge_monitor
     desc: |
      - bridge [ OPTIONS ] OBJECT { COMMAND | help }
      OBJECT := { link | fdb | mdb | vlan | monitor }
      OPTIONS := { -V[ersion] | -s[tatistics] | -n[etns] name | -b[atch] filename | -c[lor] |
        -p[retty] | -j[son] | -o[neline] }
      - bridge monitor [ all | neigh | link | mdb ]
     desc: The bridge utility can monitor the state of devices and addresses continuously.
     apis: [ 'monitor' ]
     members:
      - name: object
        type: string_list
        desc: |
          OBJECT-LIST is the list of object types that we want to monitor. It may contain link,
          fdb, and mdb. If no file argument is given, bridge opens RTNETLINK, listens on it and
          dumps state changes in the format described in previous sections.
      - name: options
        type: string
        desc: |
         OPTIONS := { -V[ersion] | -s[tatistics] | -n[etns] name | -b[atch] filename | -c[lor] |
          -p[retty] | -j[son] | -o[neline] }
