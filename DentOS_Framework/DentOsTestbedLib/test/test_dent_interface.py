# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/network/interfaces/interface.yaml
#
# DONOT EDIT - generated by diligent bots

import asyncio

from dent_os_testbed.lib.interfaces.interface import Interface

from .utils import TestDevice


def test_that_interface_up(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.up(
            input_data=[
                {
                    # device 1
                    'test_dev': [{}],
                }
            ],
            device_obj={'test_dev': dv1},
        )
    )
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.up(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            # command 1
                            'iface': [
                                'wbqhtrrl',
                                'lfdmyilz',
                                'dreqcaye',
                                'imbdjtlt',
                                'icbndovd',
                                'okzkjcwj',
                                'bzsdckjv',
                                'zglossuh',
                                'fhsnuomc',
                                'tkqzzvab',
                            ],
                            'exclude_iface': [
                                'guxhnizp',
                                'pgdcegzf',
                                'pevjenky',
                                'zmqqzkpd',
                                'ofvhoxmo',
                                'iaqnqkoo',
                                'jwkogdis',
                                'jdzsadkm',
                                'mrlridvt',
                            ],
                            'force': False,
                            'options': 'rtxkxzsk',
                        },
                        {
                            # command 2
                            'iface': [
                                'rwayjfzy',
                                'vlvtkyju',
                                'rckuxswi',
                                'wtgglvkv',
                                'gzanclqw',
                                'bookvpan',
                            ],
                            'exclude_iface': ['tsxnblla'],
                            'force': True,
                            'options': 'suduigif',
                        },
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.up(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            'iface': [
                                'wbqhtrrl',
                                'lfdmyilz',
                                'dreqcaye',
                                'imbdjtlt',
                                'icbndovd',
                                'okzkjcwj',
                                'bzsdckjv',
                                'zglossuh',
                                'fhsnuomc',
                                'tkqzzvab',
                            ],
                            'exclude_iface': [
                                'guxhnizp',
                                'pgdcegzf',
                                'pevjenky',
                                'zmqqzkpd',
                                'ofvhoxmo',
                                'iaqnqkoo',
                                'jwkogdis',
                                'jdzsadkm',
                                'mrlridvt',
                            ],
                            'force': False,
                            'options': 'rtxkxzsk',
                        }
                    ],
                    # device 2
                    'test_dev2': [
                        {
                            'iface': [
                                'rwayjfzy',
                                'vlvtkyju',
                                'rckuxswi',
                                'wtgglvkv',
                                'gzanclqw',
                                'bookvpan',
                            ],
                            'exclude_iface': ['tsxnblla'],
                            'force': True,
                            'options': 'suduigif',
                        }
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    assert 'command' in out[1]['test_dev2'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    assert 'result' in out[1]['test_dev2'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0
    assert out[1]['test_dev2']['rc'] == 0


def test_that_interface_down(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.down(
            input_data=[
                {
                    # device 1
                    'test_dev': [{}],
                }
            ],
            device_obj={'test_dev': dv1},
        )
    )
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.down(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            # command 1
                            'iface': [
                                'jxxpaepu',
                                'csqxczbu',
                                'masyixfs',
                                'bzomhnkt',
                                'pnoqiahe',
                                'uvxxkhvm',
                                'ztuczwuw',
                            ],
                            'exclude_iface': [
                                'pakhmjvw',
                                'ocwjuaez',
                                'dhgviwga',
                                'hmahhzvl',
                                'jfvhxgip',
                                'sbfkabaz',
                                'ectsxhto',
                                'arewxryb',
                            ],
                            'force': False,
                            'options': 'lbprfqfk',
                        },
                        {
                            # command 2
                            'iface': [
                                'swaeuzxx',
                                'rpmpcggz',
                                'zrnsgajc',
                                'eqylgljm',
                                'zmkaqolc',
                                'rityrdza',
                                'tujbhfsv',
                                'hjazkxrq',
                                'wqnquqav',
                                'jzetewhp',
                            ],
                            'exclude_iface': [
                                'jawoyriu',
                                'rlqxrfxz',
                                'wvofoizu',
                                'jfbzruea',
                                'rxuudjuv',
                                'rpibzlja',
                                'btaidoha',
                                'bfuvndcr',
                                'yenjfuxc',
                                'meiuxeiy',
                            ],
                            'force': False,
                            'options': 'wfoftjek',
                        },
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.down(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            'iface': [
                                'jxxpaepu',
                                'csqxczbu',
                                'masyixfs',
                                'bzomhnkt',
                                'pnoqiahe',
                                'uvxxkhvm',
                                'ztuczwuw',
                            ],
                            'exclude_iface': [
                                'pakhmjvw',
                                'ocwjuaez',
                                'dhgviwga',
                                'hmahhzvl',
                                'jfvhxgip',
                                'sbfkabaz',
                                'ectsxhto',
                                'arewxryb',
                            ],
                            'force': False,
                            'options': 'lbprfqfk',
                        }
                    ],
                    # device 2
                    'test_dev2': [
                        {
                            'iface': [
                                'swaeuzxx',
                                'rpmpcggz',
                                'zrnsgajc',
                                'eqylgljm',
                                'zmkaqolc',
                                'rityrdza',
                                'tujbhfsv',
                                'hjazkxrq',
                                'wqnquqav',
                                'jzetewhp',
                            ],
                            'exclude_iface': [
                                'jawoyriu',
                                'rlqxrfxz',
                                'wvofoizu',
                                'jfbzruea',
                                'rxuudjuv',
                                'rpibzlja',
                                'btaidoha',
                                'bfuvndcr',
                                'yenjfuxc',
                                'meiuxeiy',
                            ],
                            'force': False,
                            'options': 'wfoftjek',
                        }
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    assert 'command' in out[1]['test_dev2'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    assert 'result' in out[1]['test_dev2'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0
    assert out[1]['test_dev2']['rc'] == 0


def test_that_interface_query(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.query(
            input_data=[
                {
                    # device 1
                    'test_dev': [{}],
                }
            ],
            device_obj={'test_dev': dv1},
        )
    )
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.query(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            # command 1
                            'iface': ['ychrxtql'],
                            'options': 'gvxwqyop',
                        },
                        {
                            # command 2
                            'iface': ['ewcitmua', 'exfmisad', 'oxynuxqk', 'twkonmgb', 'omqyxebe'],
                            'options': 'qjglyrac',
                        },
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.query(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            'iface': ['ychrxtql'],
                            'options': 'gvxwqyop',
                        }
                    ],
                    # device 2
                    'test_dev2': [
                        {
                            'iface': ['ewcitmua', 'exfmisad', 'oxynuxqk', 'twkonmgb', 'omqyxebe'],
                            'options': 'qjglyrac',
                        }
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    assert 'command' in out[1]['test_dev2'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    assert 'result' in out[1]['test_dev2'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0
    assert out[1]['test_dev2']['rc'] == 0


def test_that_interface_reload(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.reload(
            input_data=[
                {
                    # device 1
                    'test_dev': [{}],
                }
            ],
            device_obj={'test_dev': dv1},
        )
    )
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.reload(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            # command 1
                            'force': False,
                            'exclude_iface': ['inozijqm'],
                            'options': 'edpcusnc',
                        },
                        {
                            # command 2
                            'force': False,
                            'exclude_iface': ['rtvgpyli', 'mabfoojb'],
                            'options': 'ywkgzkpu',
                        },
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Interface.reload(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            'force': False,
                            'exclude_iface': ['inozijqm'],
                            'options': 'edpcusnc',
                        }
                    ],
                    # device 2
                    'test_dev2': [
                        {
                            'force': False,
                            'exclude_iface': ['rtvgpyli', 'mabfoojb'],
                            'options': 'ywkgzkpu',
                        }
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    assert 'command' in out[1]['test_dev2'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    assert 'result' in out[1]['test_dev2'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0
    assert out[1]['test_dev2']['rc'] == 0
