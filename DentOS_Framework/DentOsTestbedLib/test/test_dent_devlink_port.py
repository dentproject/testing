# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/network/devlink/devlink.yaml
#
# DONOT EDIT - generated by diligent bots

import asyncio
from .utils import TestDevice
from dent_os_testbed.lib.devlink.devlink_port import DevlinkPort


def test_that_devlink_port_set(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.set(input_data = [{
        # device 1
        'test_dev' : [{}],
    }], device_obj={'test_dev':dv1}))
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.set(input_data = [{
        # device 1
        'test_dev1' : [{
        # command 1
            'dev':'jfonwshm',
            'name':'nxriflun',
            'value':'zbxvysfk',
            'cmode':'nwvidlmi',

        },{
        # command 2
            'dev':'qvemwewh',
            'name':'iraczgpc',
            'value':'mdlmwisc',
            'cmode':'euflgsrp',

        }],
    }], device_obj={'test_dev1':dv1, 'test_dev2':dv2}))
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.set(input_data = [{
        # device 1
        'test_dev1' : [{
            'dev':'jfonwshm',
            'name':'nxriflun',
            'value':'zbxvysfk',
            'cmode':'nwvidlmi',

         }],
        # device 2
        'test_dev2' : [{
            'dev':'qvemwewh',
            'name':'iraczgpc',
            'value':'mdlmwisc',
            'cmode':'euflgsrp',

        }],
    }], device_obj={'test_dev1':dv1, 'test_dev2':dv2}))
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    assert 'command' in out[1]['test_dev2'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    assert 'result' in out[1]['test_dev2'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0
    assert out[1]['test_dev2']['rc'] == 0


def test_that_devlink_port_split(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.split(input_data = [{
        # device 1
        'test_dev' : [{}],
    }], device_obj={'test_dev':dv1}))
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0


def test_that_devlink_port_unsplit(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.unsplit(input_data = [{
        # device 1
        'test_dev' : [{}],
    }], device_obj={'test_dev':dv1}))
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0


def test_that_devlink_port_show(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.show(input_data = [{
        # device 1
        'test_dev' : [{}],
    }], device_obj={'test_dev':dv1}))
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.show(input_data = [{
        # device 1
        'test_dev1' : [{
        # command 1
            'dev':'zdeyrtrt',
            'name':'uaelyfuw',

        },{
        # command 2
            'dev':'yrqcphwy',
            'name':'vaqopkht',

        }],
    }], device_obj={'test_dev1':dv1, 'test_dev2':dv2}))
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.show(input_data = [{
        # device 1
        'test_dev1' : [{
            'dev':'zdeyrtrt',
            'name':'uaelyfuw',

         }],
        # device 2
        'test_dev2' : [{
            'dev':'yrqcphwy',
            'name':'vaqopkht',

        }],
    }], device_obj={'test_dev1':dv1, 'test_dev2':dv2}))
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    assert 'command' in out[1]['test_dev2'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    assert 'result' in out[1]['test_dev2'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0
    assert out[1]['test_dev2']['rc'] == 0


def test_that_devlink_port_health(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.health(input_data = [{
        # device 1
        'test_dev' : [{}],
    }], device_obj={'test_dev':dv1}))
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0


def test_that_devlink_port_add(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.add(input_data = [{
        # device 1
        'test_dev' : [{}],
    }], device_obj={'test_dev':dv1}))
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0


def test_that_devlink_port_delete(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.delete(input_data = [{
        # device 1
        'test_dev' : [{}],
    }], device_obj={'test_dev':dv1}))
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0


def test_that_devlink_port_function(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.function(input_data = [{
        # device 1
        'test_dev' : [{}],
    }], device_obj={'test_dev':dv1}))
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0


def test_that_devlink_port_param(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(DevlinkPort.param(input_data = [{
        # device 1
        'test_dev' : [{}],
    }], device_obj={'test_dev':dv1}))
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0
