# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/network/bridge/bridge.yaml
#
# DONOT EDIT - generated by diligent bots

import asyncio

from dent_os_testbed.lib.bridge.bridge_link import BridgeLink

from .utils import TestDevice


def test_that_bridge_link_set(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeLink.set(
            input_data=[
                {
                    # device 1
                    'test_dev': [{}],
                }
            ],
            device_obj={'test_dev': dv1},
        )
    )
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeLink.set(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            # command 1
                            'dev': 'efemtgth',
                            'cost': 'ickbxhll',
                            'priority': 5089,
                            'state': 6326,
                            'guard': True,
                            'hairpin': True,
                            'fastleave': False,
                            'root_block': False,
                            'learning': False,
                            'learning_sync': False,
                            'flood': False,
                            'hwmode': 'lglrfwby',
                            'mcast_flood': True,
                            'mcast_to_unicast': False,
                            'neigh_suppress': False,
                            'vlan_tunnel': False,
                            'vlan_tunnel': True,
                            'isolated': True,
                            'backup_port': 'khsmslrh',
                            'nobackup_port': True,
                            'self': True,
                            'master': False,
                            'options': 'roqsongp',
                        },
                        {
                            # command 2
                            'dev': 'vzzrdtjo',
                            'cost': 'tngfqrgf',
                            'priority': 2224,
                            'state': 7499,
                            'guard': True,
                            'hairpin': True,
                            'fastleave': False,
                            'root_block': False,
                            'learning': False,
                            'learning_sync': False,
                            'flood': False,
                            'hwmode': 'xmeictht',
                            'mcast_flood': True,
                            'mcast_to_unicast': False,
                            'neigh_suppress': True,
                            'vlan_tunnel': True,
                            'vlan_tunnel': True,
                            'isolated': True,
                            'backup_port': 'lxrriemb',
                            'nobackup_port': True,
                            'self': True,
                            'master': False,
                            'options': 'wxqvsqcj',
                        },
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeLink.set(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            'dev': 'efemtgth',
                            'cost': 'ickbxhll',
                            'priority': 5089,
                            'state': 6326,
                            'guard': True,
                            'hairpin': True,
                            'fastleave': False,
                            'root_block': False,
                            'learning': False,
                            'learning_sync': False,
                            'flood': False,
                            'hwmode': 'lglrfwby',
                            'mcast_flood': True,
                            'mcast_to_unicast': False,
                            'neigh_suppress': False,
                            'vlan_tunnel': False,
                            'vlan_tunnel': True,
                            'isolated': True,
                            'backup_port': 'khsmslrh',
                            'nobackup_port': True,
                            'self': True,
                            'master': False,
                            'options': 'roqsongp',
                        }
                    ],
                    # device 2
                    'test_dev2': [
                        {
                            'dev': 'vzzrdtjo',
                            'cost': 'tngfqrgf',
                            'priority': 2224,
                            'state': 7499,
                            'guard': True,
                            'hairpin': True,
                            'fastleave': False,
                            'root_block': False,
                            'learning': False,
                            'learning_sync': False,
                            'flood': False,
                            'hwmode': 'xmeictht',
                            'mcast_flood': True,
                            'mcast_to_unicast': False,
                            'neigh_suppress': True,
                            'vlan_tunnel': True,
                            'vlan_tunnel': True,
                            'isolated': True,
                            'backup_port': 'lxrriemb',
                            'nobackup_port': True,
                            'self': True,
                            'master': False,
                            'options': 'wxqvsqcj',
                        }
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    assert 'command' in out[1]['test_dev2'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    assert 'result' in out[1]['test_dev2'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0
    assert out[1]['test_dev2']['rc'] == 0


def test_that_bridge_link_show(capfd):

    dv1 = TestDevice(platform='dentos')
    dv2 = TestDevice(platform='dentos')
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeLink.show(
            input_data=[
                {
                    # device 1
                    'test_dev': [{}],
                }
            ],
            device_obj={'test_dev': dv1},
        )
    )
    print(out)
    assert 'command' in out[0]['test_dev'].keys()
    assert 'result' in out[0]['test_dev'].keys()
    # check the rc
    assert out[0]['test_dev']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeLink.show(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            # command 1
                            'dev': 'ozknkpet',
                            'options': 'qcvxcxsr',
                        },
                        {
                            # command 2
                            'dev': 'yerxznxu',
                            'options': 'gtrbbajq',
                        },
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeLink.show(
            input_data=[
                {
                    # device 1
                    'test_dev1': [
                        {
                            'dev': 'ozknkpet',
                            'options': 'qcvxcxsr',
                        }
                    ],
                    # device 2
                    'test_dev2': [
                        {
                            'dev': 'yerxznxu',
                            'options': 'gtrbbajq',
                        }
                    ],
                }
            ],
            device_obj={'test_dev1': dv1, 'test_dev2': dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert 'command' in out[0]['test_dev1'].keys()
    assert 'command' in out[1]['test_dev2'].keys()
    # check if the result was formed
    assert 'result' in out[0]['test_dev1'].keys()
    assert 'result' in out[1]['test_dev2'].keys()
    # check the rc
    assert out[0]['test_dev1']['rc'] == 0
    assert out[1]['test_dev2']['rc'] == 0
