discovery_py_header = """# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file %s
#
# DONOT EDIT - generated by diligent bots
"""
discovery_py_dict_schema_body="""    __schema_slots__ = {
%(members)s
    }"""
discovery_py_list_schema_body="""    __item_klass__ = %sSchemaDict"""
discovery_py_report_body="""    def __init__(self, jsonData):
        self.data = ReportSchemaDict(jsonData)

    def clone(self, jsonData):
        return ReportSchema(jsonData)

    def fromPath(path):
        with io.open(path, "rt") as fd:
            data = json.load(fd)
        return ReportSchema(data)
"""

discover_py_code_set_func="""
for i,%(cls_name)s in enumerate(%(src)s):
%(set_mbr)s
"""
# discover_py_code_set_attr="""    %(dst)s.%(mbr)s = %(cls_name)s.get('%(mbr)s', %(mbr_default)s)
# """
discover_py_code_set_attr="""    if '%(mbr)s' in %(cls_name)s: %(dst)s.%(mbr)s = %(cls_name)s.get('%(mbr)s')
"""

discover_py_code_template = """# need to get device instance to get the data from
#
for i, dut in enumerate(self.report.duts):
    if not dut.device_id: continue
    dev = self.ctx.devices_dict[dut.device_id]
    if dev.os == "ixnetwork" or not await dev.is_connected():
        print("Device not connected skipping %(cls_name)s discovery")
        continue
    print("Running %(cls_name)s Discovery on " + dev.host_name)
    out = await %(cname_cc)s.show(
        input_data=[{dev.host_name: [{'dut_discovery':True}]}],
        device_obj={dev.host_name: dev},
        parse_output=True
    )
    if out[0][dev.host_name]["rc"] != 0:
        print(out)
        print("Failed to get %(cls_name)s")
        continue
    if 'parsed_output' not in out[0][dev.host_name]:
        print("Failed to get parsed_output %(cls_name)s")
        print (out)
        continue
    self.set_%(cls_name)s(out[0][dev.host_name]["parsed_output"], %(parent)s)
    print("Finished %(cls_name)s Discovery on {} with {} entries".format(dev.host_name, len(%(parent)s)))
"""
