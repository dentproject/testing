- module: ip
  description: ip route module to access kernel route table
  classes:
   - name: linux_ip_route
     desc: |
      - ip [ ip-OPTIONS ] route { COMMAND | help }
      - ip route { show | flush } SELECTOR
      - ip route save SELECTOR
      - ip route restore
      - ip route get ROUTE_GET_FLAGS ADDRESS [ from ADDRESS iif STRING ] [ oif STRING ] [ mark MARK ]
        [ tos TOS ] [ vrf NAME ] [ ipproto PROTOCOL ] [ sport NUMBER ] [ dport NUMBER ]
      - ip route { add | del | change | append | replace } ROUTE
      SELECTOR := [ root PREFIX ] [ match PREFIX ] [ exact PREFIX ] [ table TABLE_ID ] [ vrf NAME ]
        [ proto RTPROTO ] [ type TYPE ] [ scope SCOPE ]
      ROUTE := NODE_SPEC [ INFO_SPEC ]
      NODE_SPEC := [ TYPE ] PREFIX [ tos TOS ] [ table TABLE_ID ] [ proto RTPROTO ] [ scope SCOPE ]
        [ metric METRIC ] [ ttl-propagate { enabled | disabled } ]
      INFO_SPEC := NH OPTIONS FLAGS [ nexthop NH ] ...
      NH := [ encap ENCAP ] [ via [ FAMILY ] ADDRESS ] [ dev STRING ] [ weight NUMBER ] NHFLAGS
      FAMILY := [ inet | inet6 | ipx | dnet | mpls | bridge | link ]
      OPTIONS := FLAGS [ mtu NUMBER ] [ advmss NUMBER ] [ as [ to ] ADDRESS ] rtt TIME ] [ rttvar TIME ]
        [ reordering NUMBER ] [ window NUMBER ] [ cwnd NUMBER ] [ ssthresh NUMBER ] [ realms REALM ]
        [ rto_min TIME ] [ initcwnd NUMBER ] [ initrwnd NUMBER ] [ features FEATURES ] [ quickack BOOL ]
        [ congctl NAME ] [ pref PREF ] [ expires TIME ] [ fastopen_no_cookie BOOL ]
      TYPE := [ unicast | local | broadcast | multicast | throw | unreachable | prohibit | blackhole | nat ]
      TABLE_ID := [ local| main | default | all | NUMBER ]
      SCOPE := [ host | link | global | NUMBER ]
      NHFLAGS := [ onlink | pervasive ]
      RTPROTO := [ kernel | boot | static | NUMBER ]
      FEATURES := [ ecn | ]
      PREF := [ low | medium | high ]
      ENCAP := [ ENCAP_MPLS | ENCAP_IP | ENCAP_BPF | ENCAP_SEG6 | ENCAP_SEG6LOCAL ]
      ENCAP_MPLS := mpls [ LABEL ] [ ttl TTL ]
      ENCAP_IP := ip id TUNNEL_ID dst REMOTE_IP [ tos TOS ] [ ttl TTL ]
      ENCAP_BPF := bpf [ in PROG ] [ out PROG ] [ xmit PROG ] [ headroom SIZE ]
      ENCAP_SEG6 := seg6 mode [ encap | inline | l2encap ] segs SEGMENTS [ hmac KEYID ]
      ENCAP_SEG6LOCAL := seg6local action SEG6_ACTION [ SEG6_ACTION_PARAM ]
      ROUTE_GET_FLAGS := [ fibmatch ]
     implements: "dent:ip:ip_route"
     platforms: ['dentos', 'cumulus']
     commands:
      - name: update
        apis: ['add', 'delete', 'change', 'append', 'replace']
        cmd: [ 'ip route' ]
        params: [ 'dst', 'tos', 'table', 'protocol', 'scope', 'metric', 'nexthop', 'via', 'dev', 'weight',  'nhflags', 'mtu', 'advmss', 'rtt', 'rttvar', 'reordering', 'window', 'cwnd', 'ssthresh', 'realms', 'rto_min', 'initcwnd', 'initrwnd', 'qickack', 'congctl', 'features', 'src', 'hoplimit', 'pref', 'expires' , 'options' ]
        desc: |
          Add/Delete/Change/Append/Replace route using the below command
          - ip route { add | del | change | append | replace } ROUTE
          ROUTE := NODE_SPEC [ INFO_SPEC ]
          NODE_SPEC := [ TYPE ] PREFIX [ tos TOS ] [ table TABLE_ID ] [ proto RTPROTO ] [ scope SCOPE ]
            [ metric METRIC ] [ ttl-propagate { enabled | disabled } ]
          INFO_SPEC := NH OPTIONS FLAGS [ nexthop NH ] ...
          NH := [ encap ENCAP ] [ via [ FAMILY ] ADDRESS ] [ dev STRING ] [ weight NUMBER ] NHFLAGS
          FAMILY := [ inet | inet6 | ipx | dnet | mpls | bridge | link ]
          OPTIONS := FLAGS [ mtu NUMBER ] [ advmss NUMBER ] [ as [ to ] ADDRESS ] rtt TIME ] [ rttvar TIME ]
            [ reordering NUMBER ] [ window NUMBER ] [ cwnd NUMBER ] [ ssthresh NUMBER ] [ realms REALM ]
            [ rto_min TIME ] [ initcwnd NUMBER ] [ initrwnd NUMBER ] [ features FEATURES ] [ quickack BOOL ]
            [ congctl NAME ] [ pref PREF ] [ expires TIME ] [ fastopen_no_cookie BOOL ]
          TYPE := [ unicast | local | broadcast | multicast | throw | unreachable | prohibit | blackhole | nat ]
          TABLE_ID := [ local| main | default | all | NUMBER ]
          SCOPE := [ host | link | global | NUMBER ]
          NHFLAGS := [ onlink | pervasive ]
          RTPROTO := [ kernel | boot | static | NUMBER ]
          FEATURES := [ ecn | ]
          PREF := [ low | medium | high ]
          ENCAP := [ ENCAP_MPLS | ENCAP_IP | ENCAP_BPF | ENCAP_SEG6 | ENCAP_SEG6LOCAL ]
          ENCAP_MPLS := mpls [ LABEL ] [ ttl TTL ]
          ENCAP_IP := ip id TUNNEL_ID dst REMOTE_IP [ tos TOS ] [ ttl TTL ]
          ENCAP_BPF := bpf [ in PROG ] [ out PROG ] [ xmit PROG ] [ headroom SIZE ]
          ENCAP_SEG6 := seg6 mode [ encap | inline | l2encap ] segs SEGMENTS [ hmac KEYID ]
          ENCAP_SEG6LOCAL := seg6local action SEG6_ACTION [ SEG6_ACTION_PARAM ]
      - name: get
        apis: ['get']
        cmd: [ 'ip route' ]
        params: [ 'dst', 'from', 'iif', 'oif', 'tos', 'mark', 'vrf', 'ipproto', 'sport', 'dport', 'options' ]
        desc: |
          Get the details of the route
          - ip route get ROUTE_GET_FLAGS ADDRESS [ from ADDRESS iif STRING ] [ oif STRING ] [ mark MARK ]
            [ tos TOS ] [ vrf NAME ] [ ipproto PROTOCOL ] [ sport NUMBER ] [ dport NUMBER ]
          ROUTE_GET_FLAGS := [ fibmatch ]
      - name: restore
        apis: ['restore']
        cmd: [ 'ip route' ]
        params: []
        desc: |
            Restore the route ip route restore
      - name: save
        apis: ['save']
        cmd: [ 'ip route' ]
        params: [ 'root', 'match', 'exact', 'table', 'protocol', 'type', 'scope', 'options']
        desc: |
          Save the route config
          ip route save SELECTOR
          SELECTOR := [ root PREFIX ] [ match PREFIX ] [ exact PREFIX ]
                  [ table TABLE_ID ] [ vrf NAME ] [ proto RTPROTO ]
                  [ type TYPE ] [ scope SCOPE ]
          TYPE := [ unicast | local | broadcast | multicast | throw | unreachable | prohibit | blackhole | nat ]
          TABLE_ID := [ local| main | default | all | NUMBER ]
          SCOPE := [ host | link | global | NUMBER ]
          RTPROTO := [ kernel | boot | static | NUMBER ]
      - name: show
        apis: ['show', 'flush']
        cmd: [ 'ip route' ]
        params: [ 'dst', 'root', 'match', 'exact', 'table', 'protocol', 'type', 'scope', 'options' ]
        desc: |
          Show/Flush the route
          ip route { list | flush } SELECTOR
          SELECTOR := [ root PREFIX ] [ match PREFIX ] [ exact PREFIX ]
                  [ table TABLE_ID ] [ vrf NAME ] [ proto RTPROTO ]
                  [ type TYPE ] [ scope SCOPE ]
          TYPE := [ unicast | local | broadcast | multicast | throw | unreachable | prohibit | blackhole | nat ]
          TABLE_ID := [ local| main | default | all | NUMBER ]
          SCOPE := [ host | link | global | NUMBER ]
          RTPROTO := [ kernel | boot | static | NUMBER ]
