# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/network/ip/route.yaml
#
# DONOT EDIT - generated by diligent bots

from dent_os_testbed.discovery.Module import Module
from dent_os_testbed.lib.ip.ip_route import IpRoute
class IpRouteMod(Module):
    """
    """
    def set_nexthop(self, src, dst):

        for i,nexthop in enumerate(src):
            if 'via' in nexthop: dst[i].via = nexthop.get('via')
            if 'dev' in nexthop: dst[i].dev = nexthop.get('dev')
            if 'weight' in nexthop: dst[i].weight = nexthop.get('weight')


    def set_ip_route(self, src, dst):

        for i,ip_route in enumerate(src):
            if 'type' in ip_route: dst[i].type = ip_route.get('type')
            if 'dst' in ip_route: dst[i].dst = ip_route.get('dst')
            if 'dev' in ip_route: dst[i].dev = ip_route.get('dev')
            if 'protocol' in ip_route: dst[i].protocol = ip_route.get('protocol')
            if 'scope' in ip_route: dst[i].scope = ip_route.get('scope')
            if 'prefsrc' in ip_route: dst[i].prefsrc = ip_route.get('prefsrc')
            if 'tos' in ip_route: dst[i].tos = ip_route.get('tos')
            if 'table' in ip_route: dst[i].table = ip_route.get('table')
            if 'metric' in ip_route: dst[i].metric = ip_route.get('metric')
            self.set_nexthop(ip_route.get('nexthops', []), dst[i].nexthops)
            if 'via' in ip_route: dst[i].via = ip_route.get('via')
            if 'weight' in ip_route: dst[i].weight = ip_route.get('weight')
            if 'nhflags' in ip_route: dst[i].nhflags = ip_route.get('nhflags')
            if 'mtu' in ip_route: dst[i].mtu = ip_route.get('mtu')
            if 'advmss' in ip_route: dst[i].advmss = ip_route.get('advmss')
            if 'rtt' in ip_route: dst[i].rtt = ip_route.get('rtt')
            if 'rttvar' in ip_route: dst[i].rttvar = ip_route.get('rttvar')
            if 'reordering' in ip_route: dst[i].reordering = ip_route.get('reordering')
            if 'window' in ip_route: dst[i].window = ip_route.get('window')
            if 'cwnd' in ip_route: dst[i].cwnd = ip_route.get('cwnd')
            if 'ssthresh' in ip_route: dst[i].ssthresh = ip_route.get('ssthresh')
            if 'realms' in ip_route: dst[i].realms = ip_route.get('realms')
            if 'initcwnd' in ip_route: dst[i].initcwnd = ip_route.get('initcwnd')
            if 'initrwnd' in ip_route: dst[i].initrwnd = ip_route.get('initrwnd')
            if 'gateway' in ip_route: dst[i].gateway = ip_route.get('gateway')
            if 'src' in ip_route: dst[i].src = ip_route.get('src')
            if 'options' in ip_route: dst[i].options = ip_route.get('options')


    async def discover(self):
        # need to get device instance to get the data from
        #
        for i, dut in enumerate(self.report.duts):
            if not dut.device_id: continue
            dev = self.ctx.devices_dict[dut.device_id]
            if dev.os == 'ixnetwork' or not await dev.is_connected():
                print('Device not connected skipping ip_route discovery')
                continue
            print('Running ip_route Discovery on ' + dev.host_name)
            out = await IpRoute.show(
                input_data=[{dev.host_name: [{'dut_discovery':True}]}],
                device_obj={dev.host_name: dev},
                parse_output=True
            )
            if out[0][dev.host_name]['rc'] != 0:
                print(out)
                print('Failed to get ip_route')
                continue
            if 'parsed_output' not in out[0][dev.host_name]:
                print('Failed to get parsed_output ip_route')
                print (out)
                continue
            self.set_ip_route(out[0][dev.host_name]['parsed_output'], self.report.duts[i].network.layer3.routes)
            print('Finished ip_route Discovery on {} with {} entries'.format(dev.host_name, len(self.report.duts[i].network.layer3.routes)))
