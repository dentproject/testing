# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/platform/poe/peoctl.yaml
#
# DONOT EDIT - generated by diligent bots

from dent_os_testbed.discovery.Module import Module
from dent_os_testbed.lib.poe.poectl import Poectl


class PoectlMod(Module):
    """
    """

    def set_poectl(self, src, dst):

        for i, poectl in enumerate(src):
            if 'port' in poectl: dst[i].port = poectl.get('port')
            if 'cmd_options' in poectl: dst[i].cmd_options = poectl.get('cmd_options')
            if 'status' in poectl: dst[i].status = poectl.get('status')
            if 'priority' in poectl: dst[i].priority = poectl.get('priority')
            if 'power' in poectl: dst[i].power = poectl.get('power')
            if 'pd_type' in poectl: dst[i].pd_type = poectl.get('pd_type')
            if 'current' in poectl: dst[i].current = poectl.get('current')
            if 'state' in poectl: dst[i].state = poectl.get('state')
            if 'voltage' in poectl: dst[i].voltage = poectl.get('voltage')
            if 'pd_class' in poectl: dst[i].pd_class = poectl.get('pd_class')
            if 'allocated_power' in poectl: dst[i].allocated_power = poectl.get('allocated_power')
            if 'error_str' in poectl: dst[i].error_str = poectl.get('error_str')

    async def discover(self):
        # need to get device instance to get the data from
        #
        for i, dut in enumerate(self.report.duts):
            if not dut.device_id: continue
            dev = self.ctx.devices_dict[dut.device_id]
            if dev.os == 'ixnetwork' or not await dev.is_connected():
                print('Device not connected skipping poectl discovery')
                continue
            print('Running poectl Discovery on ' + dev.host_name)
            out = await Poectl.show(
                input_data=[{dev.host_name: [{'dut_discovery': True}]}],
                device_obj={dev.host_name: dev},
                parse_output=True
            )
            if out[0][dev.host_name]['rc'] != 0:
                print(out)
                print('Failed to get poectl')
                continue
            if 'parsed_output' not in out[0][dev.host_name]:
                print('Failed to get parsed_output poectl')
                print(out)
                continue
            self.set_poectl(out[0][dev.host_name]['parsed_output'], self.report.duts[i].platform.poe.ports)
            print('Finished poectl Discovery on {} with {} entries'.format(dev.host_name, len(self.report.duts[i].platform.poe.ports)))
