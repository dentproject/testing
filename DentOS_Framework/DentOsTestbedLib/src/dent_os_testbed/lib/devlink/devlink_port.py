# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/network/devlink/devlink.yaml
#
# DONOT EDIT - generated by diligent bots

import pytest
from dent_os_testbed.lib.test_lib_object import TestLibObject
from dent_os_testbed.lib.devlink.linux.devlink_port_impl import DevlinkPortImpl


class DevlinkPort(TestLibObject):
    """
        devlink [ OPTIONS ] port  { COMMAND | help }
        OPTIONS := { -V[ersion] | -n[no-nice-names] }

        devlink port set DEV/PORT_INDEX [ type { eth | ib | auto } ]
        devlink port split DEV/PORT_INDEX count COUNT
        devlink port unsplit DEV/PORT_INDEX
        devlink port show [ DEV/PORT_INDEX ]
        devlink port health { show | recover | diagnose | dump | set }
        devlink port add { DEV | DEV/PORT_INDEX } [ flavour FLAVOUR ] [
                pfnum PFNUMBER ] [ sfnum SFNUMBER ] [ controller CNUM ]

        devlink port del DEV/PORT_INDEX
        devlink port function set DEV/PORT_INDEX [ hw_addr ADDR ] [ state
                { active | inactive } ]

        devlink port function rate { show | set | add | del | help }
        devlink dev param set DEV/PORT_INDEX name PARAMETER value VALUE
                cmode { runtime | driverinit | permanent }

        devlink dev param show [ DEV/PORT_INDEX name PARAMETER ]
        devlink port help

    """
    async def _run_command(api, *argv, **kwarg):
        devices = kwarg['input_data']
        result = list()
        for device in devices:
            for device_name in device:
                device_result = {
                    device_name: dict()
                }
                # device lookup
                if 'device_obj' in kwarg:
                    device_obj = kwarg.get('device_obj', None)[device_name]
                else:
                    if device_name not in pytest.testbed.devices_dict:
                        device_result[device_name] = 'No matching device ' + device_name
                        result.append(device_result)
                        return result
                    device_obj = pytest.testbed.devices_dict[device_name]
                commands = ''
                if device_obj.os in ['dentos']:
                    impl_obj = DevlinkPortImpl()
                    for command in device[device_name]:
                        commands += impl_obj.format_command(command=api, params=command)
                        commands += '&& '
                    commands = commands[:-3]

                else:
                    device_result[device_name]['rc'] = -1
                    device_result[device_name]['result'] = 'No matching device OS ' + device_obj.os
                    result.append(device_result)
                    return result
                device_result[device_name]['command'] = commands
                try:
                    rc, output = await device_obj.run_cmd(('sudo ' if device_obj.ssh_conn_params.pssh else '') + commands)
                    device_result[device_name]['rc'] = rc
                    device_result[device_name]['result'] = output
                    if 'parse_output' in kwarg:
                        parse_output = impl_obj.parse_output(command=api, output=output, commands=commands)
                        device_result[device_name]['parsed_output'] = parse_output
                except Exception as e:
                    device_result[device_name]['rc'] = -1
                    device_result[device_name]['result'] = str(e)
                result.append(device_result)
        return result

    async def set(*argv, **kwarg):
        """
        Platforms: ['dentos']
        Usage:
        DevlinkPort.set(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'dev':'string',
                        'name':'string',
                        'value':'string',
                        'cmode':'string',
                }],
            }],
        )
        Description:
        devlink port param set DEV/PORT_INDEX name PARAMETER value VALUE
                cmode { runtime | driverinit | permanent }

        """
        return await DevlinkPort._run_command('set', *argv, **kwarg)

    async def split(*argv, **kwarg):
        """
        Platforms: ['dentos']
        Usage:
        DevlinkPort.split(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1

                }],
            }],
        )
        Description:

        """
        return await DevlinkPort._run_command('split', *argv, **kwarg)

    async def unsplit(*argv, **kwarg):
        """
        Platforms: ['dentos']
        Usage:
        DevlinkPort.unsplit(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1

                }],
            }],
        )
        Description:

        """
        return await DevlinkPort._run_command('unsplit', *argv, **kwarg)

    async def show(*argv, **kwarg):
        """
        Platforms: ['dentos']
        Usage:
        DevlinkPort.show(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'dev':'string',
                        'name':'string',
                }],
            }],
        )
        Description:
        devlink port param show [ DEV/PORT_INDEX name PARAMETER ]
        """
        return await DevlinkPort._run_command('show', *argv, **kwarg)

    async def health(*argv, **kwarg):
        """
        Platforms: ['dentos']
        Usage:
        DevlinkPort.health(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1

                }],
            }],
        )
        Description:

        """
        return await DevlinkPort._run_command('health', *argv, **kwarg)

    async def add(*argv, **kwarg):
        """
        Platforms: ['dentos']
        Usage:
        DevlinkPort.add(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1

                }],
            }],
        )
        Description:

        """
        return await DevlinkPort._run_command('add', *argv, **kwarg)

    async def delete(*argv, **kwarg):
        """
        Platforms: ['dentos']
        Usage:
        DevlinkPort.delete(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1

                }],
            }],
        )
        Description:

        """
        return await DevlinkPort._run_command('delete', *argv, **kwarg)

    async def function(*argv, **kwarg):
        """
        Platforms: ['dentos']
        Usage:
        DevlinkPort.function(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1

                }],
            }],
        )
        Description:

        """
        return await DevlinkPort._run_command('function', *argv, **kwarg)

    async def param(*argv, **kwarg):
        """
        Platforms: ['dentos']
        Usage:
        DevlinkPort.param(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1

                }],
            }],
        )
        Description:

        """
        return await DevlinkPort._run_command('param', *argv, **kwarg)
