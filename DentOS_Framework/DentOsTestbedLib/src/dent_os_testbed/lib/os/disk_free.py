# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/system/os/disk.yaml
#
# DONOT EDIT - generated by diligent bots

import pytest
from dent_os_testbed.lib.test_lib_object import TestLibObject
from dent_os_testbed.lib.os.linux.linux_disk_free_impl import LinuxDiskFreeImpl


class DiskFree(TestLibObject):
    """
        Disk free
    """
    async def _run_command(api, *argv, **kwarg):
        devices = kwarg['input_data']
        result = list()
        for device in devices:
            for device_name in device:
                device_result = {
                    device_name : dict()
                }
                # device lookup
                if 'device_obj' in kwarg:
                    device_obj = kwarg.get('device_obj', None)[device_name]
                else:
                    if device_name not in pytest.testbed.devices_dict:
                        device_result[device_name] = 'No matching device '+ device_name
                        result.append(device_result)
                        return result
                    device_obj = pytest.testbed.devices_dict[device_name]
                commands = ''
                if device_obj.os in ['dentos', 'cumulus']:
                    impl_obj = LinuxDiskFreeImpl()
                    for command in device[device_name]:
                        commands += impl_obj.format_command(command=api, params=command)
                        commands += '&& '
                    commands = commands[:-3]

                else:
                    device_result[device_name]['rc'] = -1
                    device_result[device_name]['result'] = 'No matching device OS '+ device_obj.os
                    result.append(device_result)
                    return result
                device_result[device_name]['command'] = commands
                try:
                    rc, output = await device_obj.run_cmd(('sudo ' if device_obj.ssh_conn_params.pssh else '') + commands)
                    device_result[device_name]['rc'] = rc
                    device_result[device_name]['result'] = output
                    if 'parse_output' in kwarg:
                        parse_output = impl_obj.parse_output(command=api, output=output, commands=commands)
                        device_result[device_name]['parsed_output'] = parse_output
                except Exception as e:
                    device_result[device_name]['rc'] = -1
                    device_result[device_name]['result'] = str(e)
                result.append(device_result)
        return result

    async def show(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        DiskFree.show(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'mounted_on':'string',
                }],
            }],
        )
        Description:
        > df -h
        Filesystem      Size  Used Avail Use% Mounted on
        devtmpfs        1.0M     0  1.0M   0% /dev
        /dev/sda4        24G  1.2G   22G   6% /
        /dev/sda3       976M  306M  603M  34% /mnt/onl/images
        /dev/sda1       123M   29M   89M  25% /mnt/onl/boot
        /dev/sda2       120M  1.6M  110M   2% /mnt/onl/config
        tmpfs           3.9G     0  3.9G   0% /dev/shm
        tmpfs           3.9G  8.9M  3.9G   1% /run
        tmpfs           5.0M     0  5.0M   0% /run/lock
        tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup
        ....

        """
        return await DiskFree._run_command('show', *argv, **kwarg)
