# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/poe_tester/dni/poe_tester.yaml
#
# DONOT EDIT - generated by diligent bots

from dent_os_testbed.lib.test_lib_object import TestLibObject
class DniPoeTester(TestLibObject):
    """
        - PoeTester
            attach - [hostname, serial_dev, baudrate]
            detach -
            configure_port - [input_data]
            get_port_stats -

    """
    def format_attach(self, command, *argv, **kwarg):
        raise NotImplementedError

    def run_attach(self, device, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_attach(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_configure_port(self, command, *argv, **kwarg):
        raise NotImplementedError

    def run_configure_port(self, device, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_configure_port(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_get_port_stats(self, command, *argv, **kwarg):
        raise NotImplementedError

    def run_get_port_stats(self, device, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_get_port_stats(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_command(self, command, *argv, **kwarg):
        if command in ['attach', 'detach']:
            return self.format_attach(command, *argv, **kwarg)

        if command in ['configure_port']:
            return self.format_configure_port(command, *argv, **kwarg)

        if command in ['get_port_stats']:
            return self.format_get_port_stats(command, *argv, **kwarg)


        raise NameError("Cannot find command "+command)

    def run_command(self, device_obj, command, *argv, **kwarg):
        if command in ['attach', 'detach']:
            return self.run_attach(device_obj, command, *argv, **kwarg)

        if command in ['configure_port']:
            return self.run_configure_port(device_obj, command, *argv, **kwarg)

        if command in ['get_port_stats']:
            return self.run_get_port_stats(device_obj, command, *argv, **kwarg)


        print (len(command))
        raise NameError("Cannot find command "+command)

    def parse_output(self, command, output, *argv, **kwarg):
        if command in ['attach', 'detach']:
            return self.parse_attach(command, output, *argv, **kwarg)

        if command in ['configure_port']:
            return self.parse_configure_port(command, output, *argv, **kwarg)

        if command in ['get_port_stats']:
            return self.parse_get_port_stats(command, output, *argv, **kwarg)


        raise NameError("Cannot find command "+command)
