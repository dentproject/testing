# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/poe_tester/poe_tester.yaml
#
# DONOT EDIT - generated by diligent bots

import pytest
from dent_os_testbed.lib.test_lib_object import TestLibObject
from dent_os_testbed.lib.poe_tester.dni.dni_poe_tester_impl import DniPoeTesterImpl


class PoeTester(TestLibObject):
    """
        - PoeTester
            attach - [hostname, serial_dev, baudrate]
            detach -
            configure_port - [input_data]
            get_port_stats -

    """
    async def _run_command(api, *argv, **kwarg):
        devices = kwarg['input_data']
        result = list()
        for device in devices:
            for device_name in device:
                device_result = {
                    device_name : dict()
                }
                # device lookup
                if 'device_obj' in kwarg:
                    device_obj = kwarg.get('device_obj', None)[device_name]
                else:
                    if device_name not in pytest.testbed.devices_dict:
                        device_result[device_name] = 'No matching device ' + device_name
                        result.append(device_result)
                        return result
                    device_obj = pytest.testbed.devices_dict[device_name]
                commands = ''
                if device_obj.os in ['dni']:
                    impl_obj = DniPoeTesterImpl()
                    for command in device[device_name]:
                        commands += impl_obj.format_command(command=api, params=command)
                        commands += '&& '
                    commands = commands[:-3]

                else:
                    device_result[device_name]['rc'] = -1
                    device_result[device_name]['result'] = 'No matching device OS ' + device_obj.os
                    result.append(device_result)
                    return result
                device_result[device_name]['command'] = commands
                try:
                    rc, output = impl_obj.run_command(device_obj, command=api, params=device[device_name])
                    device_result[device_name]['rc'] = rc
                    device_result[device_name]['result'] = output
                    if 'parse_output' in kwarg:
                        parse_output = impl_obj.parse_output(command=api, output=output, commands=commands)
                        device_result[device_name]['parsed_output'] = parse_output
                except Exception as e:
                    device_result[device_name]['rc'] = -1
                    device_result[device_name]['result'] = str(e)
                result.append(device_result)
        return result

    async def attach(*argv, **kwarg):
        """
        Platforms: ['dni']
        Usage:
        PoeTester.attach(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'hostname':'string',
                        'serial_dev':'string',
                        'baudrate':'int',
                }],
            }],
        )
        Description:
        - PoeTester
          attach - hostname, serial_dev, baudrate
          detach -

        """
        return await PoeTester._run_command('attach', *argv, **kwarg)

    async def detach(*argv, **kwarg):
        """
        Platforms: ['dni']
        Usage:
        PoeTester.detach(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'hostname':'string',
                        'serial_dev':'string',
                        'baudrate':'int',
                }],
            }],
        )
        Description:
        - PoeTester
          attach - hostname, serial_dev, baudrate
          detach -

        """
        return await PoeTester._run_command('detach', *argv, **kwarg)

    async def configure_port(*argv, **kwarg):
        """
        Platforms: ['dni']
        Usage:
        PoeTester.configure_port(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'input_data':'string',
                }],
            }],
        )
        Description:
        - PoeTester
          configure_port -

        """
        return await PoeTester._run_command('configure_port', *argv, **kwarg)

    async def get_port_stats(*argv, **kwarg):
        """
        Platforms: ['dni']
        Usage:
        PoeTester.get_port_stats(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1

                }],
            }],
        )
        Description:
        - PoeTester
          get_port_stats
        """
        return await PoeTester._run_command('get_port_stats', *argv, **kwarg)
