# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/linux/network/mstpctl/mstpctl.yaml
#
# DONOT EDIT - generated by diligent bots

from dent_os_testbed.lib.test_lib_object import TestLibObject


class LinuxMstpctl(TestLibObject):
    """
        MSTPCTL is used for configuring STP parameters on bridges which have user-space
        STP enabled. Currently, STP is disabled by default on the bridge. To
        enable user-space STP, configure "brctl stp <bridge> on" or
        "ip link set <bridge> type bridge stp_state 1" while ensuring that
        /sbin/bridge-stp kernel helper script will return success (0) for
        this operation.
    """

    def format_set(self, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_set(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_show(self, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_show(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_remove(self, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_remove(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_add(self, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_add(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_command(self, command, *argv, **kwarg):
        if command in ['set']:
            return self.format_set(command, *argv, **kwarg)

        if command in ['show']:
            return self.format_show(command, *argv, **kwarg)

        if command in ['remove']:
            return self.format_remove(command, *argv, **kwarg)

        if command in ['add']:
            return self.format_add(command, *argv, **kwarg)

        raise NameError('Cannot find command' + command)

    def parse_output(self, command, output, *argv, **kwarg):
        if command in ['set']:
            return self.parse_set(command, output, *argv, **kwarg)

        if command in ['show']:
            return self.parse_show(command, output, *argv, **kwarg)

        if command in ['remove']:
            return self.parse_remove(command, output, *argv, **kwarg)

        if command in ['add']:
            return self.parse_add(command, output, *argv, **kwarg)

        raise NameError('Cannot find command' + command)
