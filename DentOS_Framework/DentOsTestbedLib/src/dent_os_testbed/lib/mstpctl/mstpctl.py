# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/network/mstpctl/mstpctl.yaml
#
# DONOT EDIT - generated by diligent bots

import pytest
from dent_os_testbed.lib.test_lib_object import TestLibObject
from dent_os_testbed.lib.mstpctl.linux.linux_mstpctl_impl import LinuxMstpctlImpl


class Mstpctl(TestLibObject):
    """
        mstpctl - bridge stp|rstp confiduration

    """

    async def _run_command(api, *argv, **kwarg):
        devices = kwarg['input_data']
        result = list()
        for device in devices:
            for device_name in device:
                device_result = {
                    device_name: dict()
                }
                # device lookup
                if 'device_obj' in kwarg:
                    device_obj = kwarg.get('device_obj', None)[device_name]
                else:
                    if device_name not in pytest.testbed.devices_dict:
                        device_result[device_name] = 'No matching device ' + device_name
                        result.append(device_result)
                        return result
                    device_obj = pytest.testbed.devices_dict[device_name]
                commands = ''
                if device_obj.os in ['dentos', 'cumulus']:
                    impl_obj = LinuxMstpctlImpl()
                    for command in device[device_name]:
                        commands += impl_obj.format_command(command=api, params=command)
                        commands += '&& '
                    commands = commands[:-3]

                else:
                    device_result[device_name]['rc'] = -1
                    device_result[device_name]['result'] = 'No matching device OS ' + device_obj.os
                    result.append(device_result)
                    return result
                device_result[device_name]['command'] = commands
                try:
                    rc, output = await device_obj.run_cmd(
                        ('sudo ' if device_obj.ssh_conn_params.pssh else '') + commands)
                    device_result[device_name]['rc'] = rc
                    device_result[device_name]['result'] = output
                    if 'parse_output' in kwarg:
                        parse_output = impl_obj.parse_output(command=api, output=output, commands=commands)
                        device_result[device_name]['parsed_output'] = parse_output
                except Exception as e:
                    device_result[device_name]['rc'] = -1
                    device_result[device_name]['result'] = str(e)
                result.append(device_result)
        return result

    async def set(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Mstpctl.set(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'options':'string',
                        'bridge':'string',
                        'revision':'string',
                        'name':'string',
                        'max_age':'int',
                        'fwd_delay':'int',
                        'max_hops':'int',
                        'hello_time':'int',
                        'tx_hold_count':'int',
                        'version':'string',
                        'enable':'bool | string',
                }],
            }],
        )
        Description:
        Available params are: mstconfid, vid2fid, fid2mstid, maxage,fdelay, maxhops, hello, ageing, version,
        txholdcount, forcevers, txholdcount, treeprio, portpathcost, portadminedge, portautoedge,portp2p, portrestrrole,
         treeportcost, tportnetwork,portbpdufilter, bpduguard,treeportprio, treeportcost, portnetwork, portbpdufilter

        """
        return await Mstpctl._run_command('set', *argv, **kwarg)

    async def add(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Mstpctl.add(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'options':'string',
                        'bridge':'string',
                }],
            }],
        )
        Description:
        Add bridges to the mstpd's list. Available params are: 'bridge'

        """
        return await Mstpctl._run_command('add', *argv, **kwarg)

    async def show(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Mstpctl.show(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'options':'string',
                        'bridge':'string',
                        'port':'string',
                }],
            }],
        )
        Description:
        Available params are: 'bridge', 'mstilist', 'mstconfid', 'vid2fid', 'fid2mstid', 'showport', 'portdetail',
         'tree', 'treeport'

        """
        return await Mstpctl._run_command('show', *argv, **kwarg)

    async def remove(*argv, **kwarg):
        """
        Platforms: ['dentos', 'cumulus']
        Usage:
        Mstpctl.remove(
            input_data = [{
                # device 1
                'dev1' : [{
                    # command 1
                        'options':'string',
                        'bridge':'string',
                }],
            }],
        )
        Description:
        Remove bridges from the mstpd's list. Available params are: 'bridge'

        """
        return await Mstpctl._run_command('remove', *argv, **kwarg)
