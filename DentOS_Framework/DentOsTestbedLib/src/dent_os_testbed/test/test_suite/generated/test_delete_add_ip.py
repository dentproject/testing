# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/test/network/ip/ip.yaml
#
# DONOT EDIT - generated by diligent bots

import pytest
import time
import re
from dent_os_testbed.utils.decorators import TestCaseSetup
from dent_os_testbed.lib.ip.ip_route import IpRoute 
from dent_os_testbed.test.lib.DeleteAndAdd import DeleteAndAddBase, DeleteAndAddMeta 
from dent_os_testbed.lib.ip.ip_address import IpAddress 
from dent_os_testbed.lib.ip.ip_link import IpLink 
pytestmark = pytest.mark.suite_basic_trigger
class IpRouteDeleteAndAddMeta(DeleteAndAddMeta):
    """
    """
    def cls_name(obj=None):
        return 'IpRoute'
    def delete_fn(obj=None):
        return IpRoute.delete
    def show_fn(obj=None):
        return IpRoute.show
    def add_fn(obj=None):
        return IpRoute.add
    def device_object_filter(obj=None):
        return obj.dev and re.compile('swp*').match(obj.dev)
    def device_objects(obj=None):
        return obj.network.layer3.routes
class IpRouteDeleteAndAdd(DeleteAndAddBase):
    """
    """
    meta=IpRouteDeleteAndAddMeta
class IpAddressDeleteAndAddMeta(DeleteAndAddMeta):
    """
    """
    def cls_name(obj=None):
        return 'IpAddress'
    def delete_fn(obj=None):
        return IpAddress.delete
    def show_fn(obj=None):
        return IpAddress.show
    def add_fn(obj=None):
        return IpAddress.add
    def device_object_filter(obj=None):
        return re.compile('swp*').match(obj.ifname)
    def device_objects(obj=None):
        return obj.network.layer3.addresses
class IpAddressDeleteAndAdd(DeleteAndAddBase):
    """
    """
    meta=IpAddressDeleteAndAddMeta
class IpLinkDeleteAndAddMeta(DeleteAndAddMeta):
    """
    """
    def cls_name(obj=None):
        return 'IpLink'
    def delete_fn(obj=None):
        return IpLink.delete
    def show_fn(obj=None):
        return IpLink.show
    def add_fn(obj=None):
        return IpLink.add
    def device_object_filter(obj=None):
        return re.compile('swp*').match(obj.ifname)
    def device_objects(obj=None):
        return obj.network.layer1.links
class IpLinkDeleteAndAdd(DeleteAndAddBase):
    """
    """
    meta=IpLinkDeleteAndAddMeta
@pytest.fixture(params=[IpRouteDeleteAndAdd,IpAddressDeleteAndAdd,IpLinkDeleteAndAdd,])
def delete_add_ip_class(request):
    return request.param
@pytest.mark.asyncio
async def test_delete_add_ip(testbed, delete_add_ip_class):
    await delete_add_ip_class().run_test(testbed)
