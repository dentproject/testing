###################################################################################
#	Marvell GPL License
#	
#	If you received this File from Marvell, you may opt to use, redistribute and/or
#	modify this File in accordance with the terms and conditions of the General
#	Public License Version 2, June 1991 (the "GPL License"), a copy of which is
#	available along with the File in the license.txt file or by writing to the Free
#	Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
#	on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
#	
#	THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
#	WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
#	DISCLAIMED.  The GPL License provides additional details about this warranty
#	disclaimer.
###################################################################################

from __future__ import absolute_import
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from future import standard_library
standard_library.install_aliases()
from builtins import object
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PythonWrapper')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PythonWrapper')
    _PythonWrapper = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PythonWrapper', [dirname(__file__)])
        except ImportError:
            from . import _PythonWrapper
            return _PythonWrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_PythonWrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PythonWrapper = swig_import_helper()
    del swig_import_helper
else:
    from . import _PythonWrapper
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

import builtins

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except builtins.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except builtins.Exception:
    class _object(object):
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PythonWrapper.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PythonWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PythonWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PythonWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PythonWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PythonWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PythonWrapper.SwigPyIterator_copy(self)

    def __next__(self):
        return _PythonWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _PythonWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _PythonWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PythonWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PythonWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PythonWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PythonWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PythonWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PythonWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PythonWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PythonWrapper.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class PacketVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacketVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PacketVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PythonWrapper.PacketVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __bool__(self):
        return _PythonWrapper.PacketVector___nonzero__(self)

    def __bool__(self):
        return _PythonWrapper.PacketVector___bool__(self)

    def __len__(self):
        return _PythonWrapper.PacketVector___len__(self)

    def __getslice__(self, i, j):
        return _PythonWrapper.PacketVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PythonWrapper.PacketVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PythonWrapper.PacketVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PythonWrapper.PacketVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PythonWrapper.PacketVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PythonWrapper.PacketVector___setitem__(self, *args)

    def pop(self):
        return _PythonWrapper.PacketVector_pop(self)

    def append(self, x):
        return _PythonWrapper.PacketVector_append(self, x)

    def empty(self):
        return _PythonWrapper.PacketVector_empty(self)

    def size(self):
        return _PythonWrapper.PacketVector_size(self)

    def swap(self, v):
        return _PythonWrapper.PacketVector_swap(self, v)

    def begin(self):
        return _PythonWrapper.PacketVector_begin(self)

    def end(self):
        return _PythonWrapper.PacketVector_end(self)

    def rbegin(self):
        return _PythonWrapper.PacketVector_rbegin(self)

    def rend(self):
        return _PythonWrapper.PacketVector_rend(self)

    def clear(self):
        return _PythonWrapper.PacketVector_clear(self)

    def get_allocator(self):
        return _PythonWrapper.PacketVector_get_allocator(self)

    def pop_back(self):
        return _PythonWrapper.PacketVector_pop_back(self)

    def erase(self, *args):
        return _PythonWrapper.PacketVector_erase(self, *args)

    def __init__(self, *args):
        this = _PythonWrapper.new_PacketVector(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def push_back(self, x):
        return _PythonWrapper.PacketVector_push_back(self, x)

    def front(self):
        return _PythonWrapper.PacketVector_front(self)

    def back(self):
        return _PythonWrapper.PacketVector_back(self)

    def assign(self, n, x):
        return _PythonWrapper.PacketVector_assign(self, n, x)

    def resize(self, *args):
        return _PythonWrapper.PacketVector_resize(self, *args)

    def insert(self, *args):
        return _PythonWrapper.PacketVector_insert(self, *args)

    def reserve(self, n):
        return _PythonWrapper.PacketVector_reserve(self, n)

    def capacity(self):
        return _PythonWrapper.PacketVector_capacity(self)
    __swig_destroy__ = _PythonWrapper.delete_PacketVector
    __del__ = lambda self: None
PacketVector_swigregister = _PythonWrapper.PacketVector_swigregister
PacketVector_swigregister(PacketVector)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PythonWrapper.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __bool__(self):
        return _PythonWrapper.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _PythonWrapper.VectorDouble___bool__(self)

    def __len__(self):
        return _PythonWrapper.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _PythonWrapper.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PythonWrapper.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PythonWrapper.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PythonWrapper.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PythonWrapper.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PythonWrapper.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _PythonWrapper.VectorDouble_pop(self)

    def append(self, x):
        return _PythonWrapper.VectorDouble_append(self, x)

    def empty(self):
        return _PythonWrapper.VectorDouble_empty(self)

    def size(self):
        return _PythonWrapper.VectorDouble_size(self)

    def swap(self, v):
        return _PythonWrapper.VectorDouble_swap(self, v)

    def begin(self):
        return _PythonWrapper.VectorDouble_begin(self)

    def end(self):
        return _PythonWrapper.VectorDouble_end(self)

    def rbegin(self):
        return _PythonWrapper.VectorDouble_rbegin(self)

    def rend(self):
        return _PythonWrapper.VectorDouble_rend(self)

    def clear(self):
        return _PythonWrapper.VectorDouble_clear(self)

    def get_allocator(self):
        return _PythonWrapper.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _PythonWrapper.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _PythonWrapper.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _PythonWrapper.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def push_back(self, x):
        return _PythonWrapper.VectorDouble_push_back(self, x)

    def front(self):
        return _PythonWrapper.VectorDouble_front(self)

    def back(self):
        return _PythonWrapper.VectorDouble_back(self)

    def assign(self, n, x):
        return _PythonWrapper.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _PythonWrapper.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _PythonWrapper.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _PythonWrapper.VectorDouble_reserve(self, n)

    def capacity(self):
        return _PythonWrapper.VectorDouble_capacity(self)

    def EqualTo(self, rhs):
        return _PythonWrapper.VectorDouble_EqualTo(self, rhs)
    __swig_destroy__ = _PythonWrapper.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _PythonWrapper.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PythonWrapper.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __bool__(self):
        return _PythonWrapper.VectorInt___nonzero__(self)

    def __bool__(self):
        return _PythonWrapper.VectorInt___bool__(self)

    def __len__(self):
        return _PythonWrapper.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _PythonWrapper.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PythonWrapper.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PythonWrapper.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PythonWrapper.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PythonWrapper.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PythonWrapper.VectorInt___setitem__(self, *args)

    def pop(self):
        return _PythonWrapper.VectorInt_pop(self)

    def append(self, x):
        return _PythonWrapper.VectorInt_append(self, x)

    def empty(self):
        return _PythonWrapper.VectorInt_empty(self)

    def size(self):
        return _PythonWrapper.VectorInt_size(self)

    def swap(self, v):
        return _PythonWrapper.VectorInt_swap(self, v)

    def begin(self):
        return _PythonWrapper.VectorInt_begin(self)

    def end(self):
        return _PythonWrapper.VectorInt_end(self)

    def rbegin(self):
        return _PythonWrapper.VectorInt_rbegin(self)

    def rend(self):
        return _PythonWrapper.VectorInt_rend(self)

    def clear(self):
        return _PythonWrapper.VectorInt_clear(self)

    def get_allocator(self):
        return _PythonWrapper.VectorInt_get_allocator(self)

    def pop_back(self):
        return _PythonWrapper.VectorInt_pop_back(self)

    def erase(self, *args):
        return _PythonWrapper.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _PythonWrapper.new_VectorInt(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def push_back(self, x):
        return _PythonWrapper.VectorInt_push_back(self, x)

    def front(self):
        return _PythonWrapper.VectorInt_front(self)

    def back(self):
        return _PythonWrapper.VectorInt_back(self)

    def assign(self, n, x):
        return _PythonWrapper.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _PythonWrapper.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _PythonWrapper.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _PythonWrapper.VectorInt_reserve(self, n)

    def capacity(self):
        return _PythonWrapper.VectorInt_capacity(self)
    __swig_destroy__ = _PythonWrapper.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _PythonWrapper.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class GalUtils_exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalUtils_exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GalUtils_exception, name)
    __repr__ = _swig_repr

    def __init__(self, what):
        this = _PythonWrapper.new_GalUtils_exception(what)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_GalUtils_exception
    __del__ = lambda self: None

    def what(self):
        return _PythonWrapper.GalUtils_exception_what(self)
GalUtils_exception_swigregister = _PythonWrapper.GalUtils_exception_swigregister
GalUtils_exception_swigregister(GalUtils_exception)

REGULAR_MODE = _PythonWrapper.REGULAR_MODE
RDE_MODE = _PythonWrapper.RDE_MODE
Telnet = _PythonWrapper.Telnet
SSH = _PythonWrapper.SSH
class System(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, System, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)
    __repr__ = _swig_repr
    if _newclass:
        Initialize = staticmethod(_PythonWrapper.System_Initialize)
    else:
        Initialize = _PythonWrapper.System_Initialize
    if _newclass:
        Uninitialize = staticmethod(_PythonWrapper.System_Uninitialize)
    else:
        Uninitialize = _PythonWrapper.System_Uninitialize
    if _newclass:
        AnalyzeResults = staticmethod(_PythonWrapper.System_AnalyzeResults)
    else:
        AnalyzeResults = _PythonWrapper.System_AnalyzeResults
    if _newclass:
        CheckException = staticmethod(_PythonWrapper.System_CheckException)
    else:
        CheckException = _PythonWrapper.System_CheckException
    if _newclass:
        RegisterCLIExceptionCallback = staticmethod(_PythonWrapper.System_RegisterCLIExceptionCallback)
    else:
        RegisterCLIExceptionCallback = _PythonWrapper.System_RegisterCLIExceptionCallback
    if _newclass:
        HandleDebugErrorMessage = staticmethod(_PythonWrapper.System_HandleDebugErrorMessage)
    else:
        HandleDebugErrorMessage = _PythonWrapper.System_HandleDebugErrorMessage
    if _newclass:
        ReadCenvSettingsFile = staticmethod(_PythonWrapper.System_ReadCenvSettingsFile)
    else:
        ReadCenvSettingsFile = _PythonWrapper.System_ReadCenvSettingsFile
    if _newclass:
        FillErrorCodes = staticmethod(_PythonWrapper.System_FillErrorCodes)
    else:
        FillErrorCodes = _PythonWrapper.System_FillErrorCodes
    if _newclass:
        FillSkippedOpcodes = staticmethod(_PythonWrapper.System_FillSkippedOpcodes)
    else:
        FillSkippedOpcodes = _PythonWrapper.System_FillSkippedOpcodes
    if _newclass:
        ReportPrint = staticmethod(_PythonWrapper.System_ReportPrint)
    else:
        ReportPrint = _PythonWrapper.System_ReportPrint
    if _newclass:
        GetFileSize = staticmethod(_PythonWrapper.System_GetFileSize)
    else:
        GetFileSize = _PythonWrapper.System_GetFileSize
    if _newclass:
        StartRecord = staticmethod(_PythonWrapper.System_StartRecord)
    else:
        StartRecord = _PythonWrapper.System_StartRecord
    if _newclass:
        StopRecord = staticmethod(_PythonWrapper.System_StopRecord)
    else:
        StopRecord = _PythonWrapper.System_StopRecord
    if _newclass:
        Connect = staticmethod(_PythonWrapper.System_Connect)
    else:
        Connect = _PythonWrapper.System_Connect
    if _newclass:
        Disconnect = staticmethod(_PythonWrapper.System_Disconnect)
    else:
        Disconnect = _PythonWrapper.System_Disconnect
    if _newclass:
        AutoTgConnection = staticmethod(_PythonWrapper.System_AutoTgConnection)
    else:
        AutoTgConnection = _PythonWrapper.System_AutoTgConnection
    __swig_setmethods__["ErrorCodes"] = _PythonWrapper.System_ErrorCodes_set
    __swig_getmethods__["ErrorCodes"] = _PythonWrapper.System_ErrorCodes_get
    if _newclass:
        ErrorCodes = _swig_property(_PythonWrapper.System_ErrorCodes_get, _PythonWrapper.System_ErrorCodes_set)
    __swig_setmethods__["m_debugMode"] = _PythonWrapper.System_m_debugMode_set
    __swig_getmethods__["m_debugMode"] = _PythonWrapper.System_m_debugMode_get
    if _newclass:
        m_debugMode = _swig_property(_PythonWrapper.System_m_debugMode_get, _PythonWrapper.System_m_debugMode_set)
    __swig_setmethods__["m_executeMode"] = _PythonWrapper.System_m_executeMode_set
    __swig_getmethods__["m_executeMode"] = _PythonWrapper.System_m_executeMode_get
    if _newclass:
        m_executeMode = _swig_property(_PythonWrapper.System_m_executeMode_get, _PythonWrapper.System_m_executeMode_set)
    __swig_setmethods__["m_createReportFlag"] = _PythonWrapper.System_m_createReportFlag_set
    __swig_getmethods__["m_createReportFlag"] = _PythonWrapper.System_m_createReportFlag_get
    if _newclass:
        m_createReportFlag = _swig_property(_PythonWrapper.System_m_createReportFlag_get, _PythonWrapper.System_m_createReportFlag_set)
    __swig_setmethods__["m_enableLoggerFlag"] = _PythonWrapper.System_m_enableLoggerFlag_set
    __swig_getmethods__["m_enableLoggerFlag"] = _PythonWrapper.System_m_enableLoggerFlag_get
    if _newclass:
        m_enableLoggerFlag = _swig_property(_PythonWrapper.System_m_enableLoggerFlag_get, _PythonWrapper.System_m_enableLoggerFlag_set)
    __swig_setmethods__["m_illegalCompareFlag"] = _PythonWrapper.System_m_illegalCompareFlag_set
    __swig_getmethods__["m_illegalCompareFlag"] = _PythonWrapper.System_m_illegalCompareFlag_get
    if _newclass:
        m_illegalCompareFlag = _swig_property(_PythonWrapper.System_m_illegalCompareFlag_get, _PythonWrapper.System_m_illegalCompareFlag_set)
    __swig_setmethods__["m_reportComparedResultsOnlyFlag"] = _PythonWrapper.System_m_reportComparedResultsOnlyFlag_set
    __swig_getmethods__["m_reportComparedResultsOnlyFlag"] = _PythonWrapper.System_m_reportComparedResultsOnlyFlag_get
    if _newclass:
        m_reportComparedResultsOnlyFlag = _swig_property(_PythonWrapper.System_m_reportComparedResultsOnlyFlag_get, _PythonWrapper.System_m_reportComparedResultsOnlyFlag_set)
    __swig_setmethods__["m_reportFailedResultsOnlyFlag"] = _PythonWrapper.System_m_reportFailedResultsOnlyFlag_set
    __swig_getmethods__["m_reportFailedResultsOnlyFlag"] = _PythonWrapper.System_m_reportFailedResultsOnlyFlag_get
    if _newclass:
        m_reportFailedResultsOnlyFlag = _swig_property(_PythonWrapper.System_m_reportFailedResultsOnlyFlag_get, _PythonWrapper.System_m_reportFailedResultsOnlyFlag_set)
    __swig_setmethods__["m_SkippedVec"] = _PythonWrapper.System_m_SkippedVec_set
    __swig_getmethods__["m_SkippedVec"] = _PythonWrapper.System_m_SkippedVec_get
    if _newclass:
        m_SkippedVec = _swig_property(_PythonWrapper.System_m_SkippedVec_get, _PythonWrapper.System_m_SkippedVec_set)

    def __init__(self):
        this = _PythonWrapper.new_System()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_System
    __del__ = lambda self: None
System_swigregister = _PythonWrapper.System_swigregister
System_swigregister(System)

def System_Initialize():
    return _PythonWrapper.System_Initialize()
System_Initialize = _PythonWrapper.System_Initialize

def System_Uninitialize():
    return _PythonWrapper.System_Uninitialize()
System_Uninitialize = _PythonWrapper.System_Uninitialize

def System_AnalyzeResults(res, file=None, line=0):
    return _PythonWrapper.System_AnalyzeResults(res, file, line)
System_AnalyzeResults = _PythonWrapper.System_AnalyzeResults

def System_CheckException():
    return _PythonWrapper.System_CheckException()
System_CheckException = _PythonWrapper.System_CheckException

def System_RegisterCLIExceptionCallback(*args):
    return _PythonWrapper.System_RegisterCLIExceptionCallback(*args)
System_RegisterCLIExceptionCallback = _PythonWrapper.System_RegisterCLIExceptionCallback

def System_HandleDebugErrorMessage(errMsg):
    return _PythonWrapper.System_HandleDebugErrorMessage(errMsg)
System_HandleDebugErrorMessage = _PythonWrapper.System_HandleDebugErrorMessage

def System_ReadCenvSettingsFile():
    return _PythonWrapper.System_ReadCenvSettingsFile()
System_ReadCenvSettingsFile = _PythonWrapper.System_ReadCenvSettingsFile

def System_FillErrorCodes():
    return _PythonWrapper.System_FillErrorCodes()
System_FillErrorCodes = _PythonWrapper.System_FillErrorCodes

def System_FillSkippedOpcodes():
    return _PythonWrapper.System_FillSkippedOpcodes()
System_FillSkippedOpcodes = _PythonWrapper.System_FillSkippedOpcodes

def System_ReportPrint(msg):
    return _PythonWrapper.System_ReportPrint(msg)
System_ReportPrint = _PythonWrapper.System_ReportPrint

def System_GetFileSize(filename):
    return _PythonWrapper.System_GetFileSize(filename)
System_GetFileSize = _PythonWrapper.System_GetFileSize

def System_StartRecord(path):
    return _PythonWrapper.System_StartRecord(path)
System_StartRecord = _PythonWrapper.System_StartRecord

def System_StopRecord():
    return _PythonWrapper.System_StopRecord()
System_StopRecord = _PythonWrapper.System_StopRecord

def System_Connect(*args):
    return _PythonWrapper.System_Connect(*args)
System_Connect = _PythonWrapper.System_Connect

def System_Disconnect(*args):
    return _PythonWrapper.System_Disconnect(*args)
System_Disconnect = _PythonWrapper.System_Disconnect

def System_AutoTgConnection(filePath):
    return _PythonWrapper.System_AutoTgConnection(filePath)
System_AutoTgConnection = _PythonWrapper.System_AutoTgConnection
cvar = _PythonWrapper.cvar

dmAny = _PythonWrapper.dmAny
dmDa1 = _PythonWrapper.dmDa1
dmNotDa1 = _PythonWrapper.dmNotDa1
dmDa2 = _PythonWrapper.dmDa2
dmNotDa2 = _PythonWrapper.dmNotDa2
dmUndefined = _PythonWrapper.dmUndefined
smAny = _PythonWrapper.smAny
smSa1 = _PythonWrapper.smSa1
smNotSa1 = _PythonWrapper.smNotSa1
smSa2 = _PythonWrapper.smSa2
smNotSa2 = _PythonWrapper.smNotSa2
smUndefined = _PythonWrapper.smUndefined
pmAny = _PythonWrapper.pmAny
pmPattern1 = _PythonWrapper.pmPattern1
pmNotPattern1 = _PythonWrapper.pmNotPattern1
pmPattern2 = _PythonWrapper.pmPattern2
pmNotPattern2 = _PythonWrapper.pmNotPattern2
pmPatt1AndPatt2 = _PythonWrapper.pmPatt1AndPatt2
pmUndefined = _PythonWrapper.pmUndefined
emAny = _PythonWrapper.emAny
emGoodPacket = _PythonWrapper.emGoodPacket
emBadCrc = _PythonWrapper.emBadCrc
emBadPacket = _PythonWrapper.emBadPacket
emUndefined = _PythonWrapper.emUndefined
class SingleTriggerProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleTriggerProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleTriggerProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_SingleTriggerProperties()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["state"] = _PythonWrapper.SingleTriggerProperties_state_set
    __swig_getmethods__["state"] = _PythonWrapper.SingleTriggerProperties_state_get
    if _newclass:
        state = _swig_property(_PythonWrapper.SingleTriggerProperties_state_get, _PythonWrapper.SingleTriggerProperties_state_set)
    __swig_setmethods__["daMode"] = _PythonWrapper.SingleTriggerProperties_daMode_set
    __swig_getmethods__["daMode"] = _PythonWrapper.SingleTriggerProperties_daMode_get
    if _newclass:
        daMode = _swig_property(_PythonWrapper.SingleTriggerProperties_daMode_get, _PythonWrapper.SingleTriggerProperties_daMode_set)
    __swig_setmethods__["saMode"] = _PythonWrapper.SingleTriggerProperties_saMode_set
    __swig_getmethods__["saMode"] = _PythonWrapper.SingleTriggerProperties_saMode_get
    if _newclass:
        saMode = _swig_property(_PythonWrapper.SingleTriggerProperties_saMode_get, _PythonWrapper.SingleTriggerProperties_saMode_set)
    __swig_setmethods__["patternMode"] = _PythonWrapper.SingleTriggerProperties_patternMode_set
    __swig_getmethods__["patternMode"] = _PythonWrapper.SingleTriggerProperties_patternMode_get
    if _newclass:
        patternMode = _swig_property(_PythonWrapper.SingleTriggerProperties_patternMode_get, _PythonWrapper.SingleTriggerProperties_patternMode_set)
    __swig_setmethods__["errorMode"] = _PythonWrapper.SingleTriggerProperties_errorMode_set
    __swig_getmethods__["errorMode"] = _PythonWrapper.SingleTriggerProperties_errorMode_get
    if _newclass:
        errorMode = _swig_property(_PythonWrapper.SingleTriggerProperties_errorMode_get, _PythonWrapper.SingleTriggerProperties_errorMode_set)
    __swig_setmethods__["includePacketSize"] = _PythonWrapper.SingleTriggerProperties_includePacketSize_set
    __swig_getmethods__["includePacketSize"] = _PythonWrapper.SingleTriggerProperties_includePacketSize_get
    if _newclass:
        includePacketSize = _swig_property(_PythonWrapper.SingleTriggerProperties_includePacketSize_get, _PythonWrapper.SingleTriggerProperties_includePacketSize_set)
    __swig_setmethods__["minPacketSize"] = _PythonWrapper.SingleTriggerProperties_minPacketSize_set
    __swig_getmethods__["minPacketSize"] = _PythonWrapper.SingleTriggerProperties_minPacketSize_get
    if _newclass:
        minPacketSize = _swig_property(_PythonWrapper.SingleTriggerProperties_minPacketSize_get, _PythonWrapper.SingleTriggerProperties_minPacketSize_set)
    __swig_setmethods__["maxPacketSize"] = _PythonWrapper.SingleTriggerProperties_maxPacketSize_set
    __swig_getmethods__["maxPacketSize"] = _PythonWrapper.SingleTriggerProperties_maxPacketSize_get
    if _newclass:
        maxPacketSize = _swig_property(_PythonWrapper.SingleTriggerProperties_maxPacketSize_get, _PythonWrapper.SingleTriggerProperties_maxPacketSize_set)

    def Clear(self):
        return _PythonWrapper.SingleTriggerProperties_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_SingleTriggerProperties
    __del__ = lambda self: None
SingleTriggerProperties_swigregister = _PythonWrapper.SingleTriggerProperties_swigregister
SingleTriggerProperties_swigregister(SingleTriggerProperties)

class CommonTriggersProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommonTriggersProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommonTriggersProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_CommonTriggersProperties()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["da1"] = _PythonWrapper.CommonTriggersProperties_da1_set
    __swig_getmethods__["da1"] = _PythonWrapper.CommonTriggersProperties_da1_get
    if _newclass:
        da1 = _swig_property(_PythonWrapper.CommonTriggersProperties_da1_get, _PythonWrapper.CommonTriggersProperties_da1_set)
    __swig_setmethods__["da1Mask"] = _PythonWrapper.CommonTriggersProperties_da1Mask_set
    __swig_getmethods__["da1Mask"] = _PythonWrapper.CommonTriggersProperties_da1Mask_get
    if _newclass:
        da1Mask = _swig_property(_PythonWrapper.CommonTriggersProperties_da1Mask_get, _PythonWrapper.CommonTriggersProperties_da1Mask_set)
    __swig_setmethods__["da2"] = _PythonWrapper.CommonTriggersProperties_da2_set
    __swig_getmethods__["da2"] = _PythonWrapper.CommonTriggersProperties_da2_get
    if _newclass:
        da2 = _swig_property(_PythonWrapper.CommonTriggersProperties_da2_get, _PythonWrapper.CommonTriggersProperties_da2_set)
    __swig_setmethods__["da2Mask"] = _PythonWrapper.CommonTriggersProperties_da2Mask_set
    __swig_getmethods__["da2Mask"] = _PythonWrapper.CommonTriggersProperties_da2Mask_get
    if _newclass:
        da2Mask = _swig_property(_PythonWrapper.CommonTriggersProperties_da2Mask_get, _PythonWrapper.CommonTriggersProperties_da2Mask_set)
    __swig_setmethods__["sa1"] = _PythonWrapper.CommonTriggersProperties_sa1_set
    __swig_getmethods__["sa1"] = _PythonWrapper.CommonTriggersProperties_sa1_get
    if _newclass:
        sa1 = _swig_property(_PythonWrapper.CommonTriggersProperties_sa1_get, _PythonWrapper.CommonTriggersProperties_sa1_set)
    __swig_setmethods__["sa1Mask"] = _PythonWrapper.CommonTriggersProperties_sa1Mask_set
    __swig_getmethods__["sa1Mask"] = _PythonWrapper.CommonTriggersProperties_sa1Mask_get
    if _newclass:
        sa1Mask = _swig_property(_PythonWrapper.CommonTriggersProperties_sa1Mask_get, _PythonWrapper.CommonTriggersProperties_sa1Mask_set)
    __swig_setmethods__["sa2"] = _PythonWrapper.CommonTriggersProperties_sa2_set
    __swig_getmethods__["sa2"] = _PythonWrapper.CommonTriggersProperties_sa2_get
    if _newclass:
        sa2 = _swig_property(_PythonWrapper.CommonTriggersProperties_sa2_get, _PythonWrapper.CommonTriggersProperties_sa2_set)
    __swig_setmethods__["sa2Mask"] = _PythonWrapper.CommonTriggersProperties_sa2Mask_set
    __swig_getmethods__["sa2Mask"] = _PythonWrapper.CommonTriggersProperties_sa2Mask_get
    if _newclass:
        sa2Mask = _swig_property(_PythonWrapper.CommonTriggersProperties_sa2Mask_get, _PythonWrapper.CommonTriggersProperties_sa2Mask_set)
    __swig_setmethods__["patt1Offset"] = _PythonWrapper.CommonTriggersProperties_patt1Offset_set
    __swig_getmethods__["patt1Offset"] = _PythonWrapper.CommonTriggersProperties_patt1Offset_get
    if _newclass:
        patt1Offset = _swig_property(_PythonWrapper.CommonTriggersProperties_patt1Offset_get, _PythonWrapper.CommonTriggersProperties_patt1Offset_set)
    __swig_setmethods__["patt1Pattern"] = _PythonWrapper.CommonTriggersProperties_patt1Pattern_set
    __swig_getmethods__["patt1Pattern"] = _PythonWrapper.CommonTriggersProperties_patt1Pattern_get
    if _newclass:
        patt1Pattern = _swig_property(_PythonWrapper.CommonTriggersProperties_patt1Pattern_get, _PythonWrapper.CommonTriggersProperties_patt1Pattern_set)
    __swig_setmethods__["patt1Mask"] = _PythonWrapper.CommonTriggersProperties_patt1Mask_set
    __swig_getmethods__["patt1Mask"] = _PythonWrapper.CommonTriggersProperties_patt1Mask_get
    if _newclass:
        patt1Mask = _swig_property(_PythonWrapper.CommonTriggersProperties_patt1Mask_get, _PythonWrapper.CommonTriggersProperties_patt1Mask_set)
    __swig_setmethods__["patt2Offset"] = _PythonWrapper.CommonTriggersProperties_patt2Offset_set
    __swig_getmethods__["patt2Offset"] = _PythonWrapper.CommonTriggersProperties_patt2Offset_get
    if _newclass:
        patt2Offset = _swig_property(_PythonWrapper.CommonTriggersProperties_patt2Offset_get, _PythonWrapper.CommonTriggersProperties_patt2Offset_set)
    __swig_setmethods__["patt2Pattern"] = _PythonWrapper.CommonTriggersProperties_patt2Pattern_set
    __swig_getmethods__["patt2Pattern"] = _PythonWrapper.CommonTriggersProperties_patt2Pattern_get
    if _newclass:
        patt2Pattern = _swig_property(_PythonWrapper.CommonTriggersProperties_patt2Pattern_get, _PythonWrapper.CommonTriggersProperties_patt2Pattern_set)
    __swig_setmethods__["patt2Mask"] = _PythonWrapper.CommonTriggersProperties_patt2Mask_set
    __swig_getmethods__["patt2Mask"] = _PythonWrapper.CommonTriggersProperties_patt2Mask_get
    if _newclass:
        patt2Mask = _swig_property(_PythonWrapper.CommonTriggersProperties_patt2Mask_get, _PythonWrapper.CommonTriggersProperties_patt2Mask_set)

    def Clear(self):
        return _PythonWrapper.CommonTriggersProperties_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_CommonTriggersProperties
    __del__ = lambda self: None
CommonTriggersProperties_swigregister = _PythonWrapper.CommonTriggersProperties_swigregister
CommonTriggersProperties_swigregister(CommonTriggersProperties)

tmPacketStream = _PythonWrapper.tmPacketStream
tmAdvancedScheduler = _PythonWrapper.tmAdvancedScheduler
tmUndefined = _PythonWrapper.tmUndefined
msMaster = _PythonWrapper.msMaster
msSlave = _PythonWrapper.msSlave
msUndefined = _PythonWrapper.msUndefined
class AutoNegProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoNegProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoNegProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_AutoNegProperties()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["state"] = _PythonWrapper.AutoNegProperties_state_set
    __swig_getmethods__["state"] = _PythonWrapper.AutoNegProperties_state_get
    if _newclass:
        state = _swig_property(_PythonWrapper.AutoNegProperties_state_get, _PythonWrapper.AutoNegProperties_state_set)
    __swig_setmethods__["adver10h"] = _PythonWrapper.AutoNegProperties_adver10h_set
    __swig_getmethods__["adver10h"] = _PythonWrapper.AutoNegProperties_adver10h_get
    if _newclass:
        adver10h = _swig_property(_PythonWrapper.AutoNegProperties_adver10h_get, _PythonWrapper.AutoNegProperties_adver10h_set)
    __swig_setmethods__["adver10f"] = _PythonWrapper.AutoNegProperties_adver10f_set
    __swig_getmethods__["adver10f"] = _PythonWrapper.AutoNegProperties_adver10f_get
    if _newclass:
        adver10f = _swig_property(_PythonWrapper.AutoNegProperties_adver10f_get, _PythonWrapper.AutoNegProperties_adver10f_set)
    __swig_setmethods__["adver100h"] = _PythonWrapper.AutoNegProperties_adver100h_set
    __swig_getmethods__["adver100h"] = _PythonWrapper.AutoNegProperties_adver100h_get
    if _newclass:
        adver100h = _swig_property(_PythonWrapper.AutoNegProperties_adver100h_get, _PythonWrapper.AutoNegProperties_adver100h_set)
    __swig_setmethods__["adver100f"] = _PythonWrapper.AutoNegProperties_adver100f_set
    __swig_getmethods__["adver100f"] = _PythonWrapper.AutoNegProperties_adver100f_get
    if _newclass:
        adver100f = _swig_property(_PythonWrapper.AutoNegProperties_adver100f_get, _PythonWrapper.AutoNegProperties_adver100f_set)
    __swig_setmethods__["adverGigaFull"] = _PythonWrapper.AutoNegProperties_adverGigaFull_set
    __swig_getmethods__["adverGigaFull"] = _PythonWrapper.AutoNegProperties_adverGigaFull_get
    if _newclass:
        adverGigaFull = _swig_property(_PythonWrapper.AutoNegProperties_adverGigaFull_get, _PythonWrapper.AutoNegProperties_adverGigaFull_set)
    __swig_setmethods__["negotiateMasterSlave"] = _PythonWrapper.AutoNegProperties_negotiateMasterSlave_set
    __swig_getmethods__["negotiateMasterSlave"] = _PythonWrapper.AutoNegProperties_negotiateMasterSlave_get
    if _newclass:
        negotiateMasterSlave = _swig_property(_PythonWrapper.AutoNegProperties_negotiateMasterSlave_get, _PythonWrapper.AutoNegProperties_negotiateMasterSlave_set)
    __swig_setmethods__["masterSlaveMode"] = _PythonWrapper.AutoNegProperties_masterSlaveMode_set
    __swig_getmethods__["masterSlaveMode"] = _PythonWrapper.AutoNegProperties_masterSlaveMode_get
    if _newclass:
        masterSlaveMode = _swig_property(_PythonWrapper.AutoNegProperties_masterSlaveMode_get, _PythonWrapper.AutoNegProperties_masterSlaveMode_set)
    __swig_setmethods__["speed"] = _PythonWrapper.AutoNegProperties_speed_set
    __swig_getmethods__["speed"] = _PythonWrapper.AutoNegProperties_speed_get
    if _newclass:
        speed = _swig_property(_PythonWrapper.AutoNegProperties_speed_get, _PythonWrapper.AutoNegProperties_speed_set)
    __swig_setmethods__["duplex"] = _PythonWrapper.AutoNegProperties_duplex_set
    __swig_getmethods__["duplex"] = _PythonWrapper.AutoNegProperties_duplex_get
    if _newclass:
        duplex = _swig_property(_PythonWrapper.AutoNegProperties_duplex_get, _PythonWrapper.AutoNegProperties_duplex_set)

    def Clear(self):
        return _PythonWrapper.AutoNegProperties_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_AutoNegProperties
    __del__ = lambda self: None
AutoNegProperties_swigregister = _PythonWrapper.AutoNegProperties_swigregister
AutoNegProperties_swigregister(AutoNegProperties)

class FlowControlProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowControlProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlowControlProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_FlowControlProperties()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["negotiationState"] = _PythonWrapper.FlowControlProperties_negotiationState_set
    __swig_getmethods__["negotiationState"] = _PythonWrapper.FlowControlProperties_negotiationState_get
    if _newclass:
        negotiationState = _swig_property(_PythonWrapper.FlowControlProperties_negotiationState_get, _PythonWrapper.FlowControlProperties_negotiationState_set)
    __swig_setmethods__["flowControlMode"] = _PythonWrapper.FlowControlProperties_flowControlMode_set
    __swig_getmethods__["flowControlMode"] = _PythonWrapper.FlowControlProperties_flowControlMode_get
    if _newclass:
        flowControlMode = _swig_property(_PythonWrapper.FlowControlProperties_flowControlMode_get, _PythonWrapper.FlowControlProperties_flowControlMode_set)
    __swig_setmethods__["forceReceive"] = _PythonWrapper.FlowControlProperties_forceReceive_set
    __swig_getmethods__["forceReceive"] = _PythonWrapper.FlowControlProperties_forceReceive_get
    if _newclass:
        forceReceive = _swig_property(_PythonWrapper.FlowControlProperties_forceReceive_get, _PythonWrapper.FlowControlProperties_forceReceive_set)
    __swig_setmethods__["flowControlAddress"] = _PythonWrapper.FlowControlProperties_flowControlAddress_set
    __swig_getmethods__["flowControlAddress"] = _PythonWrapper.FlowControlProperties_flowControlAddress_get
    if _newclass:
        flowControlAddress = _swig_property(_PythonWrapper.FlowControlProperties_flowControlAddress_get, _PythonWrapper.FlowControlProperties_flowControlAddress_set)

    def Clear(self):
        return _PythonWrapper.FlowControlProperties_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_FlowControlProperties
    __del__ = lambda self: None
FlowControlProperties_swigregister = _PythonWrapper.FlowControlProperties_swigregister
FlowControlProperties_swigregister(FlowControlProperties)

class TransmitModeProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransmitModeProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransmitModeProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TransmitModeProperties()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["mode"] = _PythonWrapper.TransmitModeProperties_mode_set
    __swig_getmethods__["mode"] = _PythonWrapper.TransmitModeProperties_mode_get
    if _newclass:
        mode = _swig_property(_PythonWrapper.TransmitModeProperties_mode_get, _PythonWrapper.TransmitModeProperties_mode_set)
    __swig_setmethods__["ignoreLink"] = _PythonWrapper.TransmitModeProperties_ignoreLink_set
    __swig_getmethods__["ignoreLink"] = _PythonWrapper.TransmitModeProperties_ignoreLink_get
    if _newclass:
        ignoreLink = _swig_property(_PythonWrapper.TransmitModeProperties_ignoreLink_get, _PythonWrapper.TransmitModeProperties_ignoreLink_set)

    def Clear(self):
        return _PythonWrapper.TransmitModeProperties_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_TransmitModeProperties
    __del__ = lambda self: None
TransmitModeProperties_swigregister = _PythonWrapper.TransmitModeProperties_swigregister
TransmitModeProperties_swigregister(TransmitModeProperties)

rmContCapture = _PythonWrapper.rmContCapture
rmTriggerCapture = _PythonWrapper.rmTriggerCapture
rmUndefined = _PythonWrapper.rmUndefined
cmCaptureAll = _PythonWrapper.cmCaptureAll
cmCaptureFilter = _PythonWrapper.cmCaptureFilter
cmUndefined = _PythonWrapper.cmUndefined
btAllPackets = _PythonWrapper.btAllPackets
btNoPackets = _PythonWrapper.btNoPackets
btUseCaptureFilter = _PythonWrapper.btUseCaptureFilter
btUndefined = _PythonWrapper.btUndefined
atAllPackets = _PythonWrapper.atAllPackets
atUseCaptureFilter = _PythonWrapper.atUseCaptureFilter
atUseTriggerFilter = _PythonWrapper.atUseTriggerFilter
atUndefined = _PythonWrapper.atUndefined
wpmCustom = _PythonWrapper.wpmCustom
wpmDscp = _PythonWrapper.wpmDscp
wpmIpv6 = _PythonWrapper.wpmIpv6
wpmMpls = _PythonWrapper.wpmMpls
wpmSplit = _PythonWrapper.wpmSplit
wpmUndefined = _PythonWrapper.wpmUndefined
scmTreshold = _PythonWrapper.scmTreshold
scmSwitchedPath = _PythonWrapper.scmSwitchedPath
scmUndefined = _PythonWrapper.scmUndefined
spPacketArrivalTime = _PythonWrapper.spPacketArrivalTime
spEventsTime = _PythonWrapper.spEventsTime
spUndefined = _PythonWrapper.spUndefined
class TriggerCaptureMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerCaptureMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerCaptureMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["beforeTrigger"] = _PythonWrapper.TriggerCaptureMode_beforeTrigger_set
    __swig_getmethods__["beforeTrigger"] = _PythonWrapper.TriggerCaptureMode_beforeTrigger_get
    if _newclass:
        beforeTrigger = _swig_property(_PythonWrapper.TriggerCaptureMode_beforeTrigger_get, _PythonWrapper.TriggerCaptureMode_beforeTrigger_set)
    __swig_setmethods__["afterTrigger"] = _PythonWrapper.TriggerCaptureMode_afterTrigger_set
    __swig_getmethods__["afterTrigger"] = _PythonWrapper.TriggerCaptureMode_afterTrigger_get
    if _newclass:
        afterTrigger = _swig_property(_PythonWrapper.TriggerCaptureMode_afterTrigger_get, _PythonWrapper.TriggerCaptureMode_afterTrigger_set)
    __swig_setmethods__["triggerPosition"] = _PythonWrapper.TriggerCaptureMode_triggerPosition_set
    __swig_getmethods__["triggerPosition"] = _PythonWrapper.TriggerCaptureMode_triggerPosition_get
    if _newclass:
        triggerPosition = _swig_property(_PythonWrapper.TriggerCaptureMode_triggerPosition_get, _PythonWrapper.TriggerCaptureMode_triggerPosition_set)

    def __init__(self):
        this = _PythonWrapper.new_TriggerCaptureMode()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_TriggerCaptureMode
    __del__ = lambda self: None
TriggerCaptureMode_swigregister = _PythonWrapper.TriggerCaptureMode_swigregister
TriggerCaptureMode_swigregister(TriggerCaptureMode)

class CaptureReceiveMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaptureReceiveMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaptureReceiveMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _PythonWrapper.CaptureReceiveMode_state_set
    __swig_getmethods__["state"] = _PythonWrapper.CaptureReceiveMode_state_get
    if _newclass:
        state = _swig_property(_PythonWrapper.CaptureReceiveMode_state_get, _PythonWrapper.CaptureReceiveMode_state_set)
    __swig_setmethods__["sliceSize"] = _PythonWrapper.CaptureReceiveMode_sliceSize_set
    __swig_getmethods__["sliceSize"] = _PythonWrapper.CaptureReceiveMode_sliceSize_get
    if _newclass:
        sliceSize = _swig_property(_PythonWrapper.CaptureReceiveMode_sliceSize_get, _PythonWrapper.CaptureReceiveMode_sliceSize_set)
    __swig_setmethods__["captureMode"] = _PythonWrapper.CaptureReceiveMode_captureMode_set
    __swig_getmethods__["captureMode"] = _PythonWrapper.CaptureReceiveMode_captureMode_get
    if _newclass:
        captureMode = _swig_property(_PythonWrapper.CaptureReceiveMode_captureMode_get, _PythonWrapper.CaptureReceiveMode_captureMode_set)
    __swig_setmethods__["contCaptureMode"] = _PythonWrapper.CaptureReceiveMode_contCaptureMode_set
    __swig_getmethods__["contCaptureMode"] = _PythonWrapper.CaptureReceiveMode_contCaptureMode_get
    if _newclass:
        contCaptureMode = _swig_property(_PythonWrapper.CaptureReceiveMode_contCaptureMode_get, _PythonWrapper.CaptureReceiveMode_contCaptureMode_set)
    __swig_setmethods__["triggerCaptureMode"] = _PythonWrapper.CaptureReceiveMode_triggerCaptureMode_set
    __swig_getmethods__["triggerCaptureMode"] = _PythonWrapper.CaptureReceiveMode_triggerCaptureMode_get
    if _newclass:
        triggerCaptureMode = _swig_property(_PythonWrapper.CaptureReceiveMode_triggerCaptureMode_get, _PythonWrapper.CaptureReceiveMode_triggerCaptureMode_set)
    __swig_setmethods__["setDefaults"] = _PythonWrapper.CaptureReceiveMode_setDefaults_set
    __swig_getmethods__["setDefaults"] = _PythonWrapper.CaptureReceiveMode_setDefaults_get
    if _newclass:
        setDefaults = _swig_property(_PythonWrapper.CaptureReceiveMode_setDefaults_get, _PythonWrapper.CaptureReceiveMode_setDefaults_set)

    def __init__(self):
        this = _PythonWrapper.new_CaptureReceiveMode()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clear(self):
        return _PythonWrapper.CaptureReceiveMode_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_CaptureReceiveMode
    __del__ = lambda self: None
CaptureReceiveMode_swigregister = _PythonWrapper.CaptureReceiveMode_swigregister
CaptureReceiveMode_swigregister(CaptureReceiveMode)

class DataIntegrityReceiveMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataIntegrityReceiveMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataIntegrityReceiveMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _PythonWrapper.DataIntegrityReceiveMode_state_set
    __swig_getmethods__["state"] = _PythonWrapper.DataIntegrityReceiveMode_state_get
    if _newclass:
        state = _swig_property(_PythonWrapper.DataIntegrityReceiveMode_state_get, _PythonWrapper.DataIntegrityReceiveMode_state_set)
    __swig_setmethods__["setDefaults"] = _PythonWrapper.DataIntegrityReceiveMode_setDefaults_set
    __swig_getmethods__["setDefaults"] = _PythonWrapper.DataIntegrityReceiveMode_setDefaults_get
    if _newclass:
        setDefaults = _swig_property(_PythonWrapper.DataIntegrityReceiveMode_setDefaults_get, _PythonWrapper.DataIntegrityReceiveMode_setDefaults_set)
    __swig_setmethods__["signatureOffset"] = _PythonWrapper.DataIntegrityReceiveMode_signatureOffset_set
    __swig_getmethods__["signatureOffset"] = _PythonWrapper.DataIntegrityReceiveMode_signatureOffset_get
    if _newclass:
        signatureOffset = _swig_property(_PythonWrapper.DataIntegrityReceiveMode_signatureOffset_get, _PythonWrapper.DataIntegrityReceiveMode_signatureOffset_set)
    __swig_setmethods__["signatureValue"] = _PythonWrapper.DataIntegrityReceiveMode_signatureValue_set
    __swig_getmethods__["signatureValue"] = _PythonWrapper.DataIntegrityReceiveMode_signatureValue_get
    if _newclass:
        signatureValue = _swig_property(_PythonWrapper.DataIntegrityReceiveMode_signatureValue_get, _PythonWrapper.DataIntegrityReceiveMode_signatureValue_set)
    __swig_setmethods__["accountForTimestamps"] = _PythonWrapper.DataIntegrityReceiveMode_accountForTimestamps_set
    __swig_getmethods__["accountForTimestamps"] = _PythonWrapper.DataIntegrityReceiveMode_accountForTimestamps_get
    if _newclass:
        accountForTimestamps = _swig_property(_PythonWrapper.DataIntegrityReceiveMode_accountForTimestamps_get, _PythonWrapper.DataIntegrityReceiveMode_accountForTimestamps_set)

    def __init__(self):
        this = _PythonWrapper.new_DataIntegrityReceiveMode()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clear(self):
        return _PythonWrapper.DataIntegrityReceiveMode_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_DataIntegrityReceiveMode
    __del__ = lambda self: None
DataIntegrityReceiveMode_swigregister = _PythonWrapper.DataIntegrityReceiveMode_swigregister
DataIntegrityReceiveMode_swigregister(DataIntegrityReceiveMode)

class AutomaticInstrumentReceiveMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutomaticInstrumentReceiveMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutomaticInstrumentReceiveMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _PythonWrapper.AutomaticInstrumentReceiveMode_state_set
    __swig_getmethods__["state"] = _PythonWrapper.AutomaticInstrumentReceiveMode_state_get
    if _newclass:
        state = _swig_property(_PythonWrapper.AutomaticInstrumentReceiveMode_state_get, _PythonWrapper.AutomaticInstrumentReceiveMode_state_set)
    __swig_setmethods__["prbsState"] = _PythonWrapper.AutomaticInstrumentReceiveMode_prbsState_set
    __swig_getmethods__["prbsState"] = _PythonWrapper.AutomaticInstrumentReceiveMode_prbsState_get
    if _newclass:
        prbsState = _swig_property(_PythonWrapper.AutomaticInstrumentReceiveMode_prbsState_get, _PythonWrapper.AutomaticInstrumentReceiveMode_prbsState_set)
    __swig_setmethods__["startScanAt"] = _PythonWrapper.AutomaticInstrumentReceiveMode_startScanAt_set
    __swig_getmethods__["startScanAt"] = _PythonWrapper.AutomaticInstrumentReceiveMode_startScanAt_get
    if _newclass:
        startScanAt = _swig_property(_PythonWrapper.AutomaticInstrumentReceiveMode_startScanAt_get, _PythonWrapper.AutomaticInstrumentReceiveMode_startScanAt_set)
    __swig_setmethods__["signatureValue"] = _PythonWrapper.AutomaticInstrumentReceiveMode_signatureValue_set
    __swig_getmethods__["signatureValue"] = _PythonWrapper.AutomaticInstrumentReceiveMode_signatureValue_get
    if _newclass:
        signatureValue = _swig_property(_PythonWrapper.AutomaticInstrumentReceiveMode_signatureValue_get, _PythonWrapper.AutomaticInstrumentReceiveMode_signatureValue_set)
    __swig_setmethods__["maskState"] = _PythonWrapper.AutomaticInstrumentReceiveMode_maskState_set
    __swig_getmethods__["maskState"] = _PythonWrapper.AutomaticInstrumentReceiveMode_maskState_get
    if _newclass:
        maskState = _swig_property(_PythonWrapper.AutomaticInstrumentReceiveMode_maskState_get, _PythonWrapper.AutomaticInstrumentReceiveMode_maskState_set)
    __swig_setmethods__["maskValue"] = _PythonWrapper.AutomaticInstrumentReceiveMode_maskValue_set
    __swig_getmethods__["maskValue"] = _PythonWrapper.AutomaticInstrumentReceiveMode_maskValue_get
    if _newclass:
        maskValue = _swig_property(_PythonWrapper.AutomaticInstrumentReceiveMode_maskValue_get, _PythonWrapper.AutomaticInstrumentReceiveMode_maskValue_set)
    __swig_setmethods__["setDefaults"] = _PythonWrapper.AutomaticInstrumentReceiveMode_setDefaults_set
    __swig_getmethods__["setDefaults"] = _PythonWrapper.AutomaticInstrumentReceiveMode_setDefaults_get
    if _newclass:
        setDefaults = _swig_property(_PythonWrapper.AutomaticInstrumentReceiveMode_setDefaults_get, _PythonWrapper.AutomaticInstrumentReceiveMode_setDefaults_set)

    def __init__(self):
        this = _PythonWrapper.new_AutomaticInstrumentReceiveMode()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clear(self):
        return _PythonWrapper.AutomaticInstrumentReceiveMode_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_AutomaticInstrumentReceiveMode
    __del__ = lambda self: None
AutomaticInstrumentReceiveMode_swigregister = _PythonWrapper.AutomaticInstrumentReceiveMode_swigregister
AutomaticInstrumentReceiveMode_swigregister(AutomaticInstrumentReceiveMode)

class Modes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Modes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packetGroups"] = _PythonWrapper.Modes_packetGroups_set
    __swig_getmethods__["packetGroups"] = _PythonWrapper.Modes_packetGroups_get
    if _newclass:
        packetGroups = _swig_property(_PythonWrapper.Modes_packetGroups_get, _PythonWrapper.Modes_packetGroups_set)
    __swig_setmethods__["widePacketGroups"] = _PythonWrapper.Modes_widePacketGroups_set
    __swig_getmethods__["widePacketGroups"] = _PythonWrapper.Modes_widePacketGroups_get
    if _newclass:
        widePacketGroups = _swig_property(_PythonWrapper.Modes_widePacketGroups_get, _PythonWrapper.Modes_widePacketGroups_set)
    __swig_setmethods__["sequenceChecking"] = _PythonWrapper.Modes_sequenceChecking_set
    __swig_getmethods__["sequenceChecking"] = _PythonWrapper.Modes_sequenceChecking_get
    if _newclass:
        sequenceChecking = _swig_property(_PythonWrapper.Modes_sequenceChecking_get, _PythonWrapper.Modes_sequenceChecking_set)

    def __init__(self):
        this = _PythonWrapper.new_Modes()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_Modes
    __del__ = lambda self: None
Modes_swigregister = _PythonWrapper.Modes_swigregister
Modes_swigregister(Modes)

class PacketGroupsSequenceReceiveMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacketGroupsSequenceReceiveMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PacketGroupsSequenceReceiveMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["modes"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_modes_set
    __swig_getmethods__["modes"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_modes_get
    if _newclass:
        modes = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_modes_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_modes_set)
    __swig_setmethods__["setDefaults"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_setDefaults_set
    __swig_getmethods__["setDefaults"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_setDefaults_get
    if _newclass:
        setDefaults = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_setDefaults_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_setDefaults_set)
    __swig_setmethods__["signatureState"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_signatureState_set
    __swig_getmethods__["signatureState"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_signatureState_get
    if _newclass:
        signatureState = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_signatureState_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_signatureState_set)
    __swig_setmethods__["signatureOffset"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_signatureOffset_set
    __swig_getmethods__["signatureOffset"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_signatureOffset_get
    if _newclass:
        signatureOffset = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_signatureOffset_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_signatureOffset_set)
    __swig_setmethods__["signatureValue"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_signatureValue_set
    __swig_getmethods__["signatureValue"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_signatureValue_get
    if _newclass:
        signatureValue = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_signatureValue_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_signatureValue_set)
    __swig_setmethods__["pgidMode"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMode_set
    __swig_getmethods__["pgidMode"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMode_get
    if _newclass:
        pgidMode = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMode_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMode_set)
    __swig_setmethods__["pgidOffset"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidOffset_set
    __swig_getmethods__["pgidOffset"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidOffset_get
    if _newclass:
        pgidOffset = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_pgidOffset_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidOffset_set)
    __swig_setmethods__["pgidMaskState"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMaskState_set
    __swig_getmethods__["pgidMaskState"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMaskState_get
    if _newclass:
        pgidMaskState = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMaskState_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMaskState_set)
    __swig_setmethods__["pgidMask"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMask_set
    __swig_getmethods__["pgidMask"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMask_get
    if _newclass:
        pgidMask = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMask_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_pgidMask_set)
    __swig_setmethods__["wideBinMode"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_wideBinMode_set
    __swig_getmethods__["wideBinMode"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_wideBinMode_get
    if _newclass:
        wideBinMode = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_wideBinMode_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_wideBinMode_set)
    __swig_setmethods__["timeBinsState"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_timeBinsState_set
    __swig_getmethods__["timeBinsState"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_timeBinsState_get
    if _newclass:
        timeBinsState = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_timeBinsState_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_timeBinsState_set)
    __swig_setmethods__["timeBinsNum"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_timeBinsNum_set
    __swig_getmethods__["timeBinsNum"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_timeBinsNum_get
    if _newclass:
        timeBinsNum = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_timeBinsNum_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_timeBinsNum_set)
    __swig_setmethods__["latencyBinsState"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_latencyBinsState_set
    __swig_getmethods__["latencyBinsState"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_latencyBinsState_get
    if _newclass:
        latencyBinsState = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_latencyBinsState_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_latencyBinsState_set)
    __swig_setmethods__["latencyBinsList"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_latencyBinsList_set
    __swig_getmethods__["latencyBinsList"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_latencyBinsList_get
    if _newclass:
        latencyBinsList = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_latencyBinsList_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_latencyBinsList_set)
    __swig_setmethods__["sequenceNumberOffset"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceNumberOffset_set
    __swig_getmethods__["sequenceNumberOffset"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceNumberOffset_get
    if _newclass:
        sequenceNumberOffset = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceNumberOffset_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceNumberOffset_set)
    __swig_setmethods__["sequenceCheckingMode"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceCheckingMode_set
    __swig_getmethods__["sequenceCheckingMode"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceCheckingMode_get
    if _newclass:
        sequenceCheckingMode = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceCheckingMode_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceCheckingMode_set)
    __swig_setmethods__["sequenceErrorTreshold"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceErrorTreshold_set
    __swig_getmethods__["sequenceErrorTreshold"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceErrorTreshold_get
    if _newclass:
        sequenceErrorTreshold = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceErrorTreshold_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceErrorTreshold_set)
    __swig_setmethods__["sequenceSwitchedPathMode"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceSwitchedPathMode_set
    __swig_getmethods__["sequenceSwitchedPathMode"] = _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceSwitchedPathMode_get
    if _newclass:
        sequenceSwitchedPathMode = _swig_property(_PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceSwitchedPathMode_get, _PythonWrapper.PacketGroupsSequenceReceiveMode_sequenceSwitchedPathMode_set)

    def __init__(self):
        this = _PythonWrapper.new_PacketGroupsSequenceReceiveMode()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clear(self):
        return _PythonWrapper.PacketGroupsSequenceReceiveMode_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_PacketGroupsSequenceReceiveMode
    __del__ = lambda self: None
PacketGroupsSequenceReceiveMode_swigregister = _PythonWrapper.PacketGroupsSequenceReceiveMode_swigregister
PacketGroupsSequenceReceiveMode_swigregister(PacketGroupsSequenceReceiveMode)

stmContPacket = _PythonWrapper.stmContPacket
stmContBurst = _PythonWrapper.stmContBurst
stmStopAfterStream = _PythonWrapper.stmStopAfterStream
stmAdvanceToNextStream = _PythonWrapper.stmAdvanceToNextStream
stmReturnToId = _PythonWrapper.stmReturnToId
stmReturnToIdForCount = _PythonWrapper.stmReturnToIdForCount
stmUndefined = _PythonWrapper.stmUndefined
srmUtilization = _PythonWrapper.srmUtilization
srmPPS = _PythonWrapper.srmPPS
srmBitRate = _PythonWrapper.srmBitRate
srmIPG = _PythonWrapper.srmIPG
srmUndefined = _PythonWrapper.srmUndefined
tuNanoSeconds = _PythonWrapper.tuNanoSeconds
tuMicroSeconds = _PythonWrapper.tuMicroSeconds
tuMilliSeconds = _PythonWrapper.tuMilliSeconds
tuSeconds = _PythonWrapper.tuSeconds
tuBytes = _PythonWrapper.tuBytes
tuUndefined = _PythonWrapper.tuUndefined
fsFixed = _PythonWrapper.fsFixed
fsRandom = _PythonWrapper.fsRandom
fsIncrement = _PythonWrapper.fsIncrement
fsAuto = _PythonWrapper.fsAuto
rmUniform = _PythonWrapper.rmUniform
rmWeigthPairs = _PythonWrapper.rmWeigthPairs
rmPreDefined = _PythonWrapper.rmPreDefined
rmQuadGaussian = _PythonWrapper.rmQuadGaussian
pmCisco = _PythonWrapper.pmCisco
pmImix = _PythonWrapper.pmImix
pmTolly = _PythonWrapper.pmTolly
pmRprTri = _PythonWrapper.pmRprTri
pmRprQuad = _PythonWrapper.pmRprQuad
mfmIncr = _PythonWrapper.mfmIncr
mfmContIncr = _PythonWrapper.mfmContIncr
mfmDecr = _PythonWrapper.mfmDecr
mfmContDecr = _PythonWrapper.mfmContDecr
mfmRandom = _PythonWrapper.mfmRandom
mfmFixed = _PythonWrapper.mfmFixed
mfmArp = _PythonWrapper.mfmArp
mfmUndefined = _PythonWrapper.mfmUndefined
vfmIncr = _PythonWrapper.vfmIncr
vfmContIncr = _PythonWrapper.vfmContIncr
vfmDecr = _PythonWrapper.vfmDecr
vfmContDecr = _PythonWrapper.vfmContDecr
vfmRandom = _PythonWrapper.vfmRandom
vfmFixed = _PythonWrapper.vfmFixed
vfmUndefined = _PythonWrapper.vfmUndefined
fmFixed = _PythonWrapper.fmFixed
fmIncr = _PythonWrapper.fmIncr
fmDecr = _PythonWrapper.fmDecr
fmContIncr = _PythonWrapper.fmContIncr
fmContDecr = _PythonWrapper.fmContDecr
fmUndefined = _PythonWrapper.fmUndefined
v4IncrHost = _PythonWrapper.v4IncrHost
v4IncrNet = _PythonWrapper.v4IncrNet
v4ContIncrHost = _PythonWrapper.v4ContIncrHost
v4ContIncrNet = _PythonWrapper.v4ContIncrNet
v4DecrHost = _PythonWrapper.v4DecrHost
v4DecrNet = _PythonWrapper.v4DecrNet
v4ContDecrHost = _PythonWrapper.v4ContDecrHost
v4ContDecrNet = _PythonWrapper.v4ContDecrNet
v4Random = _PythonWrapper.v4Random
v4Fixed = _PythonWrapper.v4Fixed
v4Undefined = _PythonWrapper.v4Undefined
clmClassA = _PythonWrapper.clmClassA
clmClassB = _PythonWrapper.clmClassB
clmClassC = _PythonWrapper.clmClassC
clmNoMask = _PythonWrapper.clmNoMask
clmUndefined = _PythonWrapper.clmUndefined
v6IncrInterfaceId = _PythonWrapper.v6IncrInterfaceId
v6DecrInterfaceId = _PythonWrapper.v6DecrInterfaceId
v6IncrGblUniTopLvl = _PythonWrapper.v6IncrGblUniTopLvl
v6DecrGblUniTopLvl = _PythonWrapper.v6DecrGblUniTopLvl
v6Fixed = _PythonWrapper.v6Fixed
v6IncrHost = _PythonWrapper.v6IncrHost
v6DecrHost = _PythonWrapper.v6DecrHost
v6IncrNet = _PythonWrapper.v6IncrNet
v6DecrNet = _PythonWrapper.v6DecrNet
v6IncrSiteLocal = _PythonWrapper.v6IncrSiteLocal
v6DecrSiteLocal = _PythonWrapper.v6DecrSiteLocal
v6IncrMcastGroup = _PythonWrapper.v6IncrMcastGroup
v6DecrMcastGroup = _PythonWrapper.v6DecrMcastGroup
v6Undefined = _PythonWrapper.v6Undefined
vlanSingle = _PythonWrapper.vlanSingle
vlanQinQ = _PythonWrapper.vlanQinQ
vlanUndefined = _PythonWrapper.vlanUndefined
udfCounterMode = _PythonWrapper.udfCounterMode
udfRandomMode = _PythonWrapper.udfRandomMode
udfValueListMode = _PythonWrapper.udfValueListMode
udfNestedCounterMode = _PythonWrapper.udfNestedCounterMode
udfRangeListMode = _PythonWrapper.udfRangeListMode
udfIPv4Mode = _PythonWrapper.udfIPv4Mode
udfUndefined = _PythonWrapper.udfUndefined
c8 = _PythonWrapper.c8
c16 = _PythonWrapper.c16
c8x8 = _PythonWrapper.c8x8
c24 = _PythonWrapper.c24
c16x8 = _PythonWrapper.c16x8
c8x16 = _PythonWrapper.c8x16
c8x8x8 = _PythonWrapper.c8x8x8
c32 = _PythonWrapper.c32
c24x8 = _PythonWrapper.c24x8
c16x16 = _PythonWrapper.c16x16
c16x8x8 = _PythonWrapper.c16x8x8
c8x24 = _PythonWrapper.c8x24
c8x16x8 = _PythonWrapper.c8x16x8
c8x8x16 = _PythonWrapper.c8x8x16
c8x8x8x8 = _PythonWrapper.c8x8x8x8
cUndefined = _PythonWrapper.cUndefined
bm1Bit = _PythonWrapper.bm1Bit
bm2bit = _PythonWrapper.bm2bit
bm3bit = _PythonWrapper.bm3bit
bm4bit = _PythonWrapper.bm4bit
bm5bit = _PythonWrapper.bm5bit
bm6bit = _PythonWrapper.bm6bit
bm7bit = _PythonWrapper.bm7bit
bm8bit = _PythonWrapper.bm8bit
bm9bit = _PythonWrapper.bm9bit
bm10bit = _PythonWrapper.bm10bit
bm11bit = _PythonWrapper.bm11bit
bm12bit = _PythonWrapper.bm12bit
bm13bit = _PythonWrapper.bm13bit
bm14bit = _PythonWrapper.bm14bit
bm15bit = _PythonWrapper.bm15bit
bm16bit = _PythonWrapper.bm16bit
bm17bit = _PythonWrapper.bm17bit
bm18bit = _PythonWrapper.bm18bit
bm19bit = _PythonWrapper.bm19bit
bm20bit = _PythonWrapper.bm20bit
bm21bit = _PythonWrapper.bm21bit
bm22bit = _PythonWrapper.bm22bit
bm23bit = _PythonWrapper.bm23bit
bm24bit = _PythonWrapper.bm24bit
bm25bit = _PythonWrapper.bm25bit
bm26bit = _PythonWrapper.bm26bit
bm27bit = _PythonWrapper.bm27bit
bm28bit = _PythonWrapper.bm28bit
bm29bit = _PythonWrapper.bm29bit
bm30bit = _PythonWrapper.bm30bit
bm31bit = _PythonWrapper.bm31bit
bm32bit = _PythonWrapper.bm32bit
uuuu = _PythonWrapper.uuuu
uuud = _PythonWrapper.uuud
uudu = _PythonWrapper.uudu
uudd = _PythonWrapper.uudd
uduu = _PythonWrapper.uduu
udud = _PythonWrapper.udud
uddu = _PythonWrapper.uddu
uddd = _PythonWrapper.uddd
duuu = _PythonWrapper.duuu
duud = _PythonWrapper.duud
dudu = _PythonWrapper.dudu
dudd = _PythonWrapper.dudd
dduu = _PythonWrapper.dduu
ddud = _PythonWrapper.ddud
dddu = _PythonWrapper.dddu
dddd = _PythonWrapper.dddd
udbUndefined = _PythonWrapper.udbUndefined
feNoError = _PythonWrapper.feNoError
feBadCrc = _PythonWrapper.feBadCrc
feNoCrc = _PythonWrapper.feNoCrc
class TransmitTerminationMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransmitTerminationMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransmitTerminationMode, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TransmitTerminationMode()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["returnToID"] = _PythonWrapper.TransmitTerminationMode_returnToID_set
    __swig_getmethods__["returnToID"] = _PythonWrapper.TransmitTerminationMode_returnToID_get
    if _newclass:
        returnToID = _swig_property(_PythonWrapper.TransmitTerminationMode_returnToID_get, _PythonWrapper.TransmitTerminationMode_returnToID_set)
    __swig_setmethods__["loopCount"] = _PythonWrapper.TransmitTerminationMode_loopCount_set
    __swig_getmethods__["loopCount"] = _PythonWrapper.TransmitTerminationMode_loopCount_get
    if _newclass:
        loopCount = _swig_property(_PythonWrapper.TransmitTerminationMode_loopCount_get, _PythonWrapper.TransmitTerminationMode_loopCount_set)
    __swig_setmethods__["packetsPerBurst"] = _PythonWrapper.TransmitTerminationMode_packetsPerBurst_set
    __swig_getmethods__["packetsPerBurst"] = _PythonWrapper.TransmitTerminationMode_packetsPerBurst_get
    if _newclass:
        packetsPerBurst = _swig_property(_PythonWrapper.TransmitTerminationMode_packetsPerBurst_get, _PythonWrapper.TransmitTerminationMode_packetsPerBurst_set)
    __swig_setmethods__["burstsPerStream"] = _PythonWrapper.TransmitTerminationMode_burstsPerStream_set
    __swig_getmethods__["burstsPerStream"] = _PythonWrapper.TransmitTerminationMode_burstsPerStream_get
    if _newclass:
        burstsPerStream = _swig_property(_PythonWrapper.TransmitTerminationMode_burstsPerStream_get, _PythonWrapper.TransmitTerminationMode_burstsPerStream_set)

    def Clear(self):
        return _PythonWrapper.TransmitTerminationMode_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_TransmitTerminationMode
    __del__ = lambda self: None
TransmitTerminationMode_swigregister = _PythonWrapper.TransmitTerminationMode_swigregister
TransmitTerminationMode_swigregister(TransmitTerminationMode)

class IpgProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpgProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpgProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_IpgProperties()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["value"] = _PythonWrapper.IpgProperties_value_set
    __swig_getmethods__["value"] = _PythonWrapper.IpgProperties_value_get
    if _newclass:
        value = _swig_property(_PythonWrapper.IpgProperties_value_get, _PythonWrapper.IpgProperties_value_set)
    __swig_setmethods__["timeUnit"] = _PythonWrapper.IpgProperties_timeUnit_set
    __swig_getmethods__["timeUnit"] = _PythonWrapper.IpgProperties_timeUnit_get
    if _newclass:
        timeUnit = _swig_property(_PythonWrapper.IpgProperties_timeUnit_get, _PythonWrapper.IpgProperties_timeUnit_set)
    __swig_setmethods__["enforceMinGap"] = _PythonWrapper.IpgProperties_enforceMinGap_set
    __swig_getmethods__["enforceMinGap"] = _PythonWrapper.IpgProperties_enforceMinGap_get
    if _newclass:
        enforceMinGap = _swig_property(_PythonWrapper.IpgProperties_enforceMinGap_get, _PythonWrapper.IpgProperties_enforceMinGap_set)

    def Clear(self):
        return _PythonWrapper.IpgProperties_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_IpgProperties
    __del__ = lambda self: None
IpgProperties_swigregister = _PythonWrapper.IpgProperties_swigregister
IpgProperties_swigregister(IpgProperties)

class InterGapProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterGapProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterGapProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_InterGapProperties()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["value"] = _PythonWrapper.InterGapProperties_value_set
    __swig_getmethods__["value"] = _PythonWrapper.InterGapProperties_value_get
    if _newclass:
        value = _swig_property(_PythonWrapper.InterGapProperties_value_get, _PythonWrapper.InterGapProperties_value_set)
    __swig_setmethods__["timeUnit"] = _PythonWrapper.InterGapProperties_timeUnit_set
    __swig_getmethods__["timeUnit"] = _PythonWrapper.InterGapProperties_timeUnit_get
    if _newclass:
        timeUnit = _swig_property(_PythonWrapper.InterGapProperties_timeUnit_get, _PythonWrapper.InterGapProperties_timeUnit_set)

    def Clear(self):
        return _PythonWrapper.InterGapProperties_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_InterGapProperties
    __del__ = lambda self: None
InterGapProperties_swigregister = _PythonWrapper.InterGapProperties_swigregister
InterGapProperties_swigregister(InterGapProperties)

class TGStreamControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGStreamControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGStreamControl, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGStreamControl()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clear(self):
        return _PythonWrapper.TGStreamControl_Clear(self)
    __swig_setmethods__["enable"] = _PythonWrapper.TGStreamControl_enable_set
    __swig_getmethods__["enable"] = _PythonWrapper.TGStreamControl_enable_get
    if _newclass:
        enable = _swig_property(_PythonWrapper.TGStreamControl_enable_get, _PythonWrapper.TGStreamControl_enable_set)
    __swig_setmethods__["txMode"] = _PythonWrapper.TGStreamControl_txMode_set
    __swig_getmethods__["txMode"] = _PythonWrapper.TGStreamControl_txMode_get
    if _newclass:
        txMode = _swig_property(_PythonWrapper.TGStreamControl_txMode_get, _PythonWrapper.TGStreamControl_txMode_set)
    __swig_setmethods__["txModeParams"] = _PythonWrapper.TGStreamControl_txModeParams_set
    __swig_getmethods__["txModeParams"] = _PythonWrapper.TGStreamControl_txModeParams_get
    if _newclass:
        txModeParams = _swig_property(_PythonWrapper.TGStreamControl_txModeParams_get, _PythonWrapper.TGStreamControl_txModeParams_set)
    __swig_setmethods__["rateMode"] = _PythonWrapper.TGStreamControl_rateMode_set
    __swig_getmethods__["rateMode"] = _PythonWrapper.TGStreamControl_rateMode_get
    if _newclass:
        rateMode = _swig_property(_PythonWrapper.TGStreamControl_rateMode_get, _PythonWrapper.TGStreamControl_rateMode_set)
    __swig_setmethods__["utilizationValue"] = _PythonWrapper.TGStreamControl_utilizationValue_set
    __swig_getmethods__["utilizationValue"] = _PythonWrapper.TGStreamControl_utilizationValue_get
    if _newclass:
        utilizationValue = _swig_property(_PythonWrapper.TGStreamControl_utilizationValue_get, _PythonWrapper.TGStreamControl_utilizationValue_set)
    __swig_setmethods__["ppsValue"] = _PythonWrapper.TGStreamControl_ppsValue_set
    __swig_getmethods__["ppsValue"] = _PythonWrapper.TGStreamControl_ppsValue_get
    if _newclass:
        ppsValue = _swig_property(_PythonWrapper.TGStreamControl_ppsValue_get, _PythonWrapper.TGStreamControl_ppsValue_set)
    __swig_setmethods__["bitRateValue"] = _PythonWrapper.TGStreamControl_bitRateValue_set
    __swig_getmethods__["bitRateValue"] = _PythonWrapper.TGStreamControl_bitRateValue_get
    if _newclass:
        bitRateValue = _swig_property(_PythonWrapper.TGStreamControl_bitRateValue_get, _PythonWrapper.TGStreamControl_bitRateValue_set)
    __swig_setmethods__["ipgValues"] = _PythonWrapper.TGStreamControl_ipgValues_set
    __swig_getmethods__["ipgValues"] = _PythonWrapper.TGStreamControl_ipgValues_get
    if _newclass:
        ipgValues = _swig_property(_PythonWrapper.TGStreamControl_ipgValues_get, _PythonWrapper.TGStreamControl_ipgValues_set)
    __swig_setmethods__["interBurstState"] = _PythonWrapper.TGStreamControl_interBurstState_set
    __swig_getmethods__["interBurstState"] = _PythonWrapper.TGStreamControl_interBurstState_get
    if _newclass:
        interBurstState = _swig_property(_PythonWrapper.TGStreamControl_interBurstState_get, _PythonWrapper.TGStreamControl_interBurstState_set)
    __swig_setmethods__["interBurstValues"] = _PythonWrapper.TGStreamControl_interBurstValues_set
    __swig_getmethods__["interBurstValues"] = _PythonWrapper.TGStreamControl_interBurstValues_get
    if _newclass:
        interBurstValues = _swig_property(_PythonWrapper.TGStreamControl_interBurstValues_get, _PythonWrapper.TGStreamControl_interBurstValues_set)
    __swig_setmethods__["interStreamState"] = _PythonWrapper.TGStreamControl_interStreamState_set
    __swig_getmethods__["interStreamState"] = _PythonWrapper.TGStreamControl_interStreamState_get
    if _newclass:
        interStreamState = _swig_property(_PythonWrapper.TGStreamControl_interStreamState_get, _PythonWrapper.TGStreamControl_interStreamState_set)
    __swig_setmethods__["interStreamValues"] = _PythonWrapper.TGStreamControl_interStreamValues_set
    __swig_getmethods__["interStreamValues"] = _PythonWrapper.TGStreamControl_interStreamValues_get
    if _newclass:
        interStreamValues = _swig_property(_PythonWrapper.TGStreamControl_interStreamValues_get, _PythonWrapper.TGStreamControl_interStreamValues_set)
    __swig_destroy__ = _PythonWrapper.delete_TGStreamControl
    __del__ = lambda self: None
TGStreamControl_swigregister = _PythonWrapper.TGStreamControl_swigregister
TGStreamControl_swigregister(TGStreamControl)

class TimeStampInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeStampInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeStampInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _PythonWrapper.TimeStampInfo_enable_set
    __swig_getmethods__["enable"] = _PythonWrapper.TimeStampInfo_enable_get
    if _newclass:
        enable = _swig_property(_PythonWrapper.TimeStampInfo_enable_get, _PythonWrapper.TimeStampInfo_enable_set)

    def __init__(self):
        this = _PythonWrapper.new_TimeStampInfo()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_TimeStampInfo
    __del__ = lambda self: None
TimeStampInfo_swigregister = _PythonWrapper.TimeStampInfo_swigregister
TimeStampInfo_swigregister(TimeStampInfo)

class StreamAutomatic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAutomatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAutomatic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _PythonWrapper.StreamAutomatic_enable_set
    __swig_getmethods__["enable"] = _PythonWrapper.StreamAutomatic_enable_get
    if _newclass:
        enable = _swig_property(_PythonWrapper.StreamAutomatic_enable_get, _PythonWrapper.StreamAutomatic_enable_set)
    __swig_setmethods__["signature"] = _PythonWrapper.StreamAutomatic_signature_set
    __swig_getmethods__["signature"] = _PythonWrapper.StreamAutomatic_signature_get
    if _newclass:
        signature = _swig_property(_PythonWrapper.StreamAutomatic_signature_get, _PythonWrapper.StreamAutomatic_signature_set)
    __swig_setmethods__["prbsEnable"] = _PythonWrapper.StreamAutomatic_prbsEnable_set
    __swig_getmethods__["prbsEnable"] = _PythonWrapper.StreamAutomatic_prbsEnable_get
    if _newclass:
        prbsEnable = _swig_property(_PythonWrapper.StreamAutomatic_prbsEnable_get, _PythonWrapper.StreamAutomatic_prbsEnable_set)
    __swig_setmethods__["setDefault"] = _PythonWrapper.StreamAutomatic_setDefault_set
    __swig_getmethods__["setDefault"] = _PythonWrapper.StreamAutomatic_setDefault_get
    if _newclass:
        setDefault = _swig_property(_PythonWrapper.StreamAutomatic_setDefault_get, _PythonWrapper.StreamAutomatic_setDefault_set)

    def __init__(self):
        this = _PythonWrapper.new_StreamAutomatic()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_StreamAutomatic
    __del__ = lambda self: None
StreamAutomatic_swigregister = _PythonWrapper.StreamAutomatic_swigregister
StreamAutomatic_swigregister(StreamAutomatic)

class StreamDataIntegrity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamDataIntegrity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamDataIntegrity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _PythonWrapper.StreamDataIntegrity_enable_set
    __swig_getmethods__["enable"] = _PythonWrapper.StreamDataIntegrity_enable_get
    if _newclass:
        enable = _swig_property(_PythonWrapper.StreamDataIntegrity_enable_get, _PythonWrapper.StreamDataIntegrity_enable_set)
    __swig_setmethods__["setDefault"] = _PythonWrapper.StreamDataIntegrity_setDefault_set
    __swig_getmethods__["setDefault"] = _PythonWrapper.StreamDataIntegrity_setDefault_get
    if _newclass:
        setDefault = _swig_property(_PythonWrapper.StreamDataIntegrity_setDefault_get, _PythonWrapper.StreamDataIntegrity_setDefault_set)
    __swig_setmethods__["offset"] = _PythonWrapper.StreamDataIntegrity_offset_set
    __swig_getmethods__["offset"] = _PythonWrapper.StreamDataIntegrity_offset_get
    if _newclass:
        offset = _swig_property(_PythonWrapper.StreamDataIntegrity_offset_get, _PythonWrapper.StreamDataIntegrity_offset_set)
    __swig_setmethods__["signature"] = _PythonWrapper.StreamDataIntegrity_signature_set
    __swig_getmethods__["signature"] = _PythonWrapper.StreamDataIntegrity_signature_get
    if _newclass:
        signature = _swig_property(_PythonWrapper.StreamDataIntegrity_signature_get, _PythonWrapper.StreamDataIntegrity_signature_set)

    def __init__(self):
        this = _PythonWrapper.new_StreamDataIntegrity()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_StreamDataIntegrity
    __del__ = lambda self: None
StreamDataIntegrity_swigregister = _PythonWrapper.StreamDataIntegrity_swigregister
StreamDataIntegrity_swigregister(StreamDataIntegrity)

class StreamPacketGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamPacketGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamPacketGroup, name)
    __repr__ = _swig_repr
    __swig_setmethods__["signature"] = _PythonWrapper.StreamPacketGroup_signature_set
    __swig_getmethods__["signature"] = _PythonWrapper.StreamPacketGroup_signature_get
    if _newclass:
        signature = _swig_property(_PythonWrapper.StreamPacketGroup_signature_get, _PythonWrapper.StreamPacketGroup_signature_set)
    __swig_setmethods__["offset"] = _PythonWrapper.StreamPacketGroup_offset_set
    __swig_getmethods__["offset"] = _PythonWrapper.StreamPacketGroup_offset_get
    if _newclass:
        offset = _swig_property(_PythonWrapper.StreamPacketGroup_offset_get, _PythonWrapper.StreamPacketGroup_offset_set)
    __swig_setmethods__["groupId"] = _PythonWrapper.StreamPacketGroup_groupId_set
    __swig_getmethods__["groupId"] = _PythonWrapper.StreamPacketGroup_groupId_get
    if _newclass:
        groupId = _swig_property(_PythonWrapper.StreamPacketGroup_groupId_get, _PythonWrapper.StreamPacketGroup_groupId_set)
    __swig_setmethods__["groupIdOffset"] = _PythonWrapper.StreamPacketGroup_groupIdOffset_set
    __swig_getmethods__["groupIdOffset"] = _PythonWrapper.StreamPacketGroup_groupIdOffset_get
    if _newclass:
        groupIdOffset = _swig_property(_PythonWrapper.StreamPacketGroup_groupIdOffset_get, _PythonWrapper.StreamPacketGroup_groupIdOffset_set)
    __swig_setmethods__["sequenceNumberOffset"] = _PythonWrapper.StreamPacketGroup_sequenceNumberOffset_set
    __swig_getmethods__["sequenceNumberOffset"] = _PythonWrapper.StreamPacketGroup_sequenceNumberOffset_get
    if _newclass:
        sequenceNumberOffset = _swig_property(_PythonWrapper.StreamPacketGroup_sequenceNumberOffset_get, _PythonWrapper.StreamPacketGroup_sequenceNumberOffset_set)
    __swig_setmethods__["allocateUdf"] = _PythonWrapper.StreamPacketGroup_allocateUdf_set
    __swig_getmethods__["allocateUdf"] = _PythonWrapper.StreamPacketGroup_allocateUdf_get
    if _newclass:
        allocateUdf = _swig_property(_PythonWrapper.StreamPacketGroup_allocateUdf_get, _PythonWrapper.StreamPacketGroup_allocateUdf_set)
    __swig_setmethods__["packetGroupEnable"] = _PythonWrapper.StreamPacketGroup_packetGroupEnable_set
    __swig_getmethods__["packetGroupEnable"] = _PythonWrapper.StreamPacketGroup_packetGroupEnable_get
    if _newclass:
        packetGroupEnable = _swig_property(_PythonWrapper.StreamPacketGroup_packetGroupEnable_get, _PythonWrapper.StreamPacketGroup_packetGroupEnable_set)
    __swig_setmethods__["sequenceCheckingEnable"] = _PythonWrapper.StreamPacketGroup_sequenceCheckingEnable_set
    __swig_getmethods__["sequenceCheckingEnable"] = _PythonWrapper.StreamPacketGroup_sequenceCheckingEnable_get
    if _newclass:
        sequenceCheckingEnable = _swig_property(_PythonWrapper.StreamPacketGroup_sequenceCheckingEnable_get, _PythonWrapper.StreamPacketGroup_sequenceCheckingEnable_set)
    __swig_setmethods__["setDefault"] = _PythonWrapper.StreamPacketGroup_setDefault_set
    __swig_getmethods__["setDefault"] = _PythonWrapper.StreamPacketGroup_setDefault_get
    if _newclass:
        setDefault = _swig_property(_PythonWrapper.StreamPacketGroup_setDefault_get, _PythonWrapper.StreamPacketGroup_setDefault_set)

    def __init__(self):
        this = _PythonWrapper.new_StreamPacketGroup()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_StreamPacketGroup
    __del__ = lambda self: None
StreamPacketGroup_swigregister = _PythonWrapper.StreamPacketGroup_swigregister
StreamPacketGroup_swigregister(StreamPacketGroup)

class TGStreamInstrumentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGStreamInstrumentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGStreamInstrumentation, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGStreamInstrumentation()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clear(self):
        return _PythonWrapper.TGStreamInstrumentation_Clear(self)
    __swig_setmethods__["dataIntegrity"] = _PythonWrapper.TGStreamInstrumentation_dataIntegrity_set
    __swig_getmethods__["dataIntegrity"] = _PythonWrapper.TGStreamInstrumentation_dataIntegrity_get
    if _newclass:
        dataIntegrity = _swig_property(_PythonWrapper.TGStreamInstrumentation_dataIntegrity_get, _PythonWrapper.TGStreamInstrumentation_dataIntegrity_set)
    __swig_setmethods__["packetGroup"] = _PythonWrapper.TGStreamInstrumentation_packetGroup_set
    __swig_getmethods__["packetGroup"] = _PythonWrapper.TGStreamInstrumentation_packetGroup_get
    if _newclass:
        packetGroup = _swig_property(_PythonWrapper.TGStreamInstrumentation_packetGroup_get, _PythonWrapper.TGStreamInstrumentation_packetGroup_set)
    __swig_setmethods__["timeStamp"] = _PythonWrapper.TGStreamInstrumentation_timeStamp_set
    __swig_getmethods__["timeStamp"] = _PythonWrapper.TGStreamInstrumentation_timeStamp_get
    if _newclass:
        timeStamp = _swig_property(_PythonWrapper.TGStreamInstrumentation_timeStamp_get, _PythonWrapper.TGStreamInstrumentation_timeStamp_set)
    __swig_setmethods__["automatic"] = _PythonWrapper.TGStreamInstrumentation_automatic_set
    __swig_getmethods__["automatic"] = _PythonWrapper.TGStreamInstrumentation_automatic_get
    if _newclass:
        automatic = _swig_property(_PythonWrapper.TGStreamInstrumentation_automatic_get, _PythonWrapper.TGStreamInstrumentation_automatic_set)
    __swig_destroy__ = _PythonWrapper.delete_TGStreamInstrumentation
    __del__ = lambda self: None
TGStreamInstrumentation_swigregister = _PythonWrapper.TGStreamInstrumentation_swigregister
TGStreamInstrumentation_swigregister(TGStreamInstrumentation)

class RandomFrameSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomFrameSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomFrameSize, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _PythonWrapper.RandomFrameSize_mode_set
    __swig_getmethods__["mode"] = _PythonWrapper.RandomFrameSize_mode_get
    if _newclass:
        mode = _swig_property(_PythonWrapper.RandomFrameSize_mode_get, _PythonWrapper.RandomFrameSize_mode_set)
    __swig_setmethods__["predefinedMode"] = _PythonWrapper.RandomFrameSize_predefinedMode_set
    __swig_getmethods__["predefinedMode"] = _PythonWrapper.RandomFrameSize_predefinedMode_get
    if _newclass:
        predefinedMode = _swig_property(_PythonWrapper.RandomFrameSize_predefinedMode_get, _PythonWrapper.RandomFrameSize_predefinedMode_set)
    __swig_setmethods__["minSize"] = _PythonWrapper.RandomFrameSize_minSize_set
    __swig_getmethods__["minSize"] = _PythonWrapper.RandomFrameSize_minSize_get
    if _newclass:
        minSize = _swig_property(_PythonWrapper.RandomFrameSize_minSize_get, _PythonWrapper.RandomFrameSize_minSize_set)
    __swig_setmethods__["maxSize"] = _PythonWrapper.RandomFrameSize_maxSize_set
    __swig_getmethods__["maxSize"] = _PythonWrapper.RandomFrameSize_maxSize_get
    if _newclass:
        maxSize = _swig_property(_PythonWrapper.RandomFrameSize_maxSize_get, _PythonWrapper.RandomFrameSize_maxSize_set)

    def __init__(self):
        this = _PythonWrapper.new_RandomFrameSize()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def clear(self):
        return _PythonWrapper.RandomFrameSize_clear(self)
    __swig_destroy__ = _PythonWrapper.delete_RandomFrameSize
    __del__ = lambda self: None
RandomFrameSize_swigregister = _PythonWrapper.RandomFrameSize_swigregister
RandomFrameSize_swigregister(RandomFrameSize)

class IncrementFrameSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncrementFrameSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IncrementFrameSize, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minSize"] = _PythonWrapper.IncrementFrameSize_minSize_set
    __swig_getmethods__["minSize"] = _PythonWrapper.IncrementFrameSize_minSize_get
    if _newclass:
        minSize = _swig_property(_PythonWrapper.IncrementFrameSize_minSize_get, _PythonWrapper.IncrementFrameSize_minSize_set)
    __swig_setmethods__["maxSize"] = _PythonWrapper.IncrementFrameSize_maxSize_set
    __swig_getmethods__["maxSize"] = _PythonWrapper.IncrementFrameSize_maxSize_get
    if _newclass:
        maxSize = _swig_property(_PythonWrapper.IncrementFrameSize_maxSize_get, _PythonWrapper.IncrementFrameSize_maxSize_set)
    __swig_setmethods__["step"] = _PythonWrapper.IncrementFrameSize_step_set
    __swig_getmethods__["step"] = _PythonWrapper.IncrementFrameSize_step_get
    if _newclass:
        step = _swig_property(_PythonWrapper.IncrementFrameSize_step_get, _PythonWrapper.IncrementFrameSize_step_set)

    def __init__(self):
        this = _PythonWrapper.new_IncrementFrameSize()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def clear(self):
        return _PythonWrapper.IncrementFrameSize_clear(self)
    __swig_destroy__ = _PythonWrapper.delete_IncrementFrameSize
    __del__ = lambda self: None
IncrementFrameSize_swigregister = _PythonWrapper.IncrementFrameSize_swigregister
IncrementFrameSize_swigregister(IncrementFrameSize)

class MacFieldModification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MacFieldModification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MacFieldModification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _PythonWrapper.MacFieldModification_mode_set
    __swig_getmethods__["mode"] = _PythonWrapper.MacFieldModification_mode_get
    if _newclass:
        mode = _swig_property(_PythonWrapper.MacFieldModification_mode_get, _PythonWrapper.MacFieldModification_mode_set)
    __swig_setmethods__["count"] = _PythonWrapper.MacFieldModification_count_set
    __swig_getmethods__["count"] = _PythonWrapper.MacFieldModification_count_get
    if _newclass:
        count = _swig_property(_PythonWrapper.MacFieldModification_count_get, _PythonWrapper.MacFieldModification_count_set)
    __swig_setmethods__["step"] = _PythonWrapper.MacFieldModification_step_set
    __swig_getmethods__["step"] = _PythonWrapper.MacFieldModification_step_get
    if _newclass:
        step = _swig_property(_PythonWrapper.MacFieldModification_step_get, _PythonWrapper.MacFieldModification_step_set)
    __swig_setmethods__["mask"] = _PythonWrapper.MacFieldModification_mask_set
    __swig_getmethods__["mask"] = _PythonWrapper.MacFieldModification_mask_get
    if _newclass:
        mask = _swig_property(_PythonWrapper.MacFieldModification_mask_get, _PythonWrapper.MacFieldModification_mask_set)

    def __init__(self):
        this = _PythonWrapper.new_MacFieldModification()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def clear(self):
        return _PythonWrapper.MacFieldModification_clear(self)
    __swig_destroy__ = _PythonWrapper.delete_MacFieldModification
    __del__ = lambda self: None
MacFieldModification_swigregister = _PythonWrapper.MacFieldModification_swigregister
MacFieldModification_swigregister(MacFieldModification)

class VlanFieldModification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VlanFieldModification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VlanFieldModification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _PythonWrapper.VlanFieldModification_mode_set
    __swig_getmethods__["mode"] = _PythonWrapper.VlanFieldModification_mode_get
    if _newclass:
        mode = _swig_property(_PythonWrapper.VlanFieldModification_mode_get, _PythonWrapper.VlanFieldModification_mode_set)
    __swig_setmethods__["type"] = _PythonWrapper.VlanFieldModification_type_set
    __swig_getmethods__["type"] = _PythonWrapper.VlanFieldModification_type_get
    if _newclass:
        type = _swig_property(_PythonWrapper.VlanFieldModification_type_get, _PythonWrapper.VlanFieldModification_type_set)
    __swig_setmethods__["inner"] = _PythonWrapper.VlanFieldModification_inner_set
    __swig_getmethods__["inner"] = _PythonWrapper.VlanFieldModification_inner_get
    if _newclass:
        inner = _swig_property(_PythonWrapper.VlanFieldModification_inner_get, _PythonWrapper.VlanFieldModification_inner_set)
    __swig_setmethods__["count"] = _PythonWrapper.VlanFieldModification_count_set
    __swig_getmethods__["count"] = _PythonWrapper.VlanFieldModification_count_get
    if _newclass:
        count = _swig_property(_PythonWrapper.VlanFieldModification_count_get, _PythonWrapper.VlanFieldModification_count_set)
    __swig_setmethods__["step"] = _PythonWrapper.VlanFieldModification_step_set
    __swig_getmethods__["step"] = _PythonWrapper.VlanFieldModification_step_get
    if _newclass:
        step = _swig_property(_PythonWrapper.VlanFieldModification_step_get, _PythonWrapper.VlanFieldModification_step_set)
    __swig_setmethods__["mask"] = _PythonWrapper.VlanFieldModification_mask_set
    __swig_getmethods__["mask"] = _PythonWrapper.VlanFieldModification_mask_get
    if _newclass:
        mask = _swig_property(_PythonWrapper.VlanFieldModification_mask_get, _PythonWrapper.VlanFieldModification_mask_set)

    def __init__(self):
        this = _PythonWrapper.new_VlanFieldModification()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def clear(self):
        return _PythonWrapper.VlanFieldModification_clear(self)
    __swig_destroy__ = _PythonWrapper.delete_VlanFieldModification
    __del__ = lambda self: None
VlanFieldModification_swigregister = _PythonWrapper.VlanFieldModification_swigregister
VlanFieldModification_swigregister(VlanFieldModification)

class Ipv4FieldModification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv4FieldModification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv4FieldModification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _PythonWrapper.Ipv4FieldModification_mode_set
    __swig_getmethods__["mode"] = _PythonWrapper.Ipv4FieldModification_mode_get
    if _newclass:
        mode = _swig_property(_PythonWrapper.Ipv4FieldModification_mode_get, _PythonWrapper.Ipv4FieldModification_mode_set)
    __swig_setmethods__["repeat"] = _PythonWrapper.Ipv4FieldModification_repeat_set
    __swig_getmethods__["repeat"] = _PythonWrapper.Ipv4FieldModification_repeat_get
    if _newclass:
        repeat = _swig_property(_PythonWrapper.Ipv4FieldModification_repeat_get, _PythonWrapper.Ipv4FieldModification_repeat_set)
    __swig_setmethods__["ip4Class"] = _PythonWrapper.Ipv4FieldModification_ip4Class_set
    __swig_getmethods__["ip4Class"] = _PythonWrapper.Ipv4FieldModification_ip4Class_get
    if _newclass:
        ip4Class = _swig_property(_PythonWrapper.Ipv4FieldModification_ip4Class_get, _PythonWrapper.Ipv4FieldModification_ip4Class_set)
    __swig_setmethods__["mask"] = _PythonWrapper.Ipv4FieldModification_mask_set
    __swig_getmethods__["mask"] = _PythonWrapper.Ipv4FieldModification_mask_get
    if _newclass:
        mask = _swig_property(_PythonWrapper.Ipv4FieldModification_mask_get, _PythonWrapper.Ipv4FieldModification_mask_set)

    def __init__(self):
        this = _PythonWrapper.new_Ipv4FieldModification()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def clear(self):
        return _PythonWrapper.Ipv4FieldModification_clear(self)
    __swig_destroy__ = _PythonWrapper.delete_Ipv4FieldModification
    __del__ = lambda self: None
Ipv4FieldModification_swigregister = _PythonWrapper.Ipv4FieldModification_swigregister
Ipv4FieldModification_swigregister(Ipv4FieldModification)

class Ipv6FieldModification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv6FieldModification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv6FieldModification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _PythonWrapper.Ipv6FieldModification_mode_set
    __swig_getmethods__["mode"] = _PythonWrapper.Ipv6FieldModification_mode_get
    if _newclass:
        mode = _swig_property(_PythonWrapper.Ipv6FieldModification_mode_get, _PythonWrapper.Ipv6FieldModification_mode_set)
    __swig_setmethods__["repeat"] = _PythonWrapper.Ipv6FieldModification_repeat_set
    __swig_getmethods__["repeat"] = _PythonWrapper.Ipv6FieldModification_repeat_get
    if _newclass:
        repeat = _swig_property(_PythonWrapper.Ipv6FieldModification_repeat_get, _PythonWrapper.Ipv6FieldModification_repeat_set)
    __swig_setmethods__["stepSize"] = _PythonWrapper.Ipv6FieldModification_stepSize_set
    __swig_getmethods__["stepSize"] = _PythonWrapper.Ipv6FieldModification_stepSize_get
    if _newclass:
        stepSize = _swig_property(_PythonWrapper.Ipv6FieldModification_stepSize_get, _PythonWrapper.Ipv6FieldModification_stepSize_set)
    __swig_setmethods__["networkMask"] = _PythonWrapper.Ipv6FieldModification_networkMask_set
    __swig_getmethods__["networkMask"] = _PythonWrapper.Ipv6FieldModification_networkMask_get
    if _newclass:
        networkMask = _swig_property(_PythonWrapper.Ipv6FieldModification_networkMask_get, _PythonWrapper.Ipv6FieldModification_networkMask_set)

    def __init__(self):
        this = _PythonWrapper.new_Ipv6FieldModification()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def clear(self):
        return _PythonWrapper.Ipv6FieldModification_clear(self)
    __swig_destroy__ = _PythonWrapper.delete_Ipv6FieldModification
    __del__ = lambda self: None
Ipv6FieldModification_swigregister = _PythonWrapper.Ipv6FieldModification_swigregister
Ipv6FieldModification_swigregister(Ipv6FieldModification)

class UdfProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UdfProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UdfProperties, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_UdfProperties()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clear(self):
        return _PythonWrapper.UdfProperties_Clear(self)
    __swig_setmethods__["enable"] = _PythonWrapper.UdfProperties_enable_set
    __swig_getmethods__["enable"] = _PythonWrapper.UdfProperties_enable_get
    if _newclass:
        enable = _swig_property(_PythonWrapper.UdfProperties_enable_get, _PythonWrapper.UdfProperties_enable_set)
    __swig_setmethods__["byteOffset"] = _PythonWrapper.UdfProperties_byteOffset_set
    __swig_getmethods__["byteOffset"] = _PythonWrapper.UdfProperties_byteOffset_get
    if _newclass:
        byteOffset = _swig_property(_PythonWrapper.UdfProperties_byteOffset_get, _PythonWrapper.UdfProperties_byteOffset_set)
    __swig_setmethods__["bitOffset"] = _PythonWrapper.UdfProperties_bitOffset_set
    __swig_getmethods__["bitOffset"] = _PythonWrapper.UdfProperties_bitOffset_get
    if _newclass:
        bitOffset = _swig_property(_PythonWrapper.UdfProperties_bitOffset_get, _PythonWrapper.UdfProperties_bitOffset_set)
    __swig_setmethods__["mode"] = _PythonWrapper.UdfProperties_mode_set
    __swig_getmethods__["mode"] = _PythonWrapper.UdfProperties_mode_get
    if _newclass:
        mode = _swig_property(_PythonWrapper.UdfProperties_mode_get, _PythonWrapper.UdfProperties_mode_set)
    __swig_setmethods__["type"] = _PythonWrapper.UdfProperties_type_set
    __swig_getmethods__["type"] = _PythonWrapper.UdfProperties_type_get
    if _newclass:
        type = _swig_property(_PythonWrapper.UdfProperties_type_get, _PythonWrapper.UdfProperties_type_set)
    __swig_setmethods__["continuouslyCounting"] = _PythonWrapper.UdfProperties_continuouslyCounting_set
    __swig_getmethods__["continuouslyCounting"] = _PythonWrapper.UdfProperties_continuouslyCounting_get
    if _newclass:
        continuouslyCounting = _swig_property(_PythonWrapper.UdfProperties_continuouslyCounting_get, _PythonWrapper.UdfProperties_continuouslyCounting_set)
    __swig_setmethods__["repeatCount"] = _PythonWrapper.UdfProperties_repeatCount_set
    __swig_getmethods__["repeatCount"] = _PythonWrapper.UdfProperties_repeatCount_get
    if _newclass:
        repeatCount = _swig_property(_PythonWrapper.UdfProperties_repeatCount_get, _PythonWrapper.UdfProperties_repeatCount_set)
    __swig_setmethods__["initValue"] = _PythonWrapper.UdfProperties_initValue_set
    __swig_getmethods__["initValue"] = _PythonWrapper.UdfProperties_initValue_get
    if _newclass:
        initValue = _swig_property(_PythonWrapper.UdfProperties_initValue_get, _PythonWrapper.UdfProperties_initValue_set)
    __swig_setmethods__["maskSelect"] = _PythonWrapper.UdfProperties_maskSelect_set
    __swig_getmethods__["maskSelect"] = _PythonWrapper.UdfProperties_maskSelect_get
    if _newclass:
        maskSelect = _swig_property(_PythonWrapper.UdfProperties_maskSelect_get, _PythonWrapper.UdfProperties_maskSelect_set)
    __swig_setmethods__["maskVal"] = _PythonWrapper.UdfProperties_maskVal_set
    __swig_getmethods__["maskVal"] = _PythonWrapper.UdfProperties_maskVal_get
    if _newclass:
        maskVal = _swig_property(_PythonWrapper.UdfProperties_maskVal_get, _PythonWrapper.UdfProperties_maskVal_set)
    __swig_setmethods__["updown"] = _PythonWrapper.UdfProperties_updown_set
    __swig_getmethods__["updown"] = _PythonWrapper.UdfProperties_updown_get
    if _newclass:
        updown = _swig_property(_PythonWrapper.UdfProperties_updown_get, _PythonWrapper.UdfProperties_updown_set)
    __swig_setmethods__["step"] = _PythonWrapper.UdfProperties_step_set
    __swig_getmethods__["step"] = _PythonWrapper.UdfProperties_step_get
    if _newclass:
        step = _swig_property(_PythonWrapper.UdfProperties_step_get, _PythonWrapper.UdfProperties_step_set)
    __swig_destroy__ = _PythonWrapper.delete_UdfProperties
    __del__ = lambda self: None
UdfProperties_swigregister = _PythonWrapper.UdfProperties_swigregister
UdfProperties_swigregister(UdfProperties)

class ProtFieldModification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProtFieldModification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProtFieldModification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _PythonWrapper.ProtFieldModification_count_set
    __swig_getmethods__["count"] = _PythonWrapper.ProtFieldModification_count_get
    if _newclass:
        count = _swig_property(_PythonWrapper.ProtFieldModification_count_get, _PythonWrapper.ProtFieldModification_count_set)
    __swig_setmethods__["mode"] = _PythonWrapper.ProtFieldModification_mode_set
    __swig_getmethods__["mode"] = _PythonWrapper.ProtFieldModification_mode_get
    if _newclass:
        mode = _swig_property(_PythonWrapper.ProtFieldModification_mode_get, _PythonWrapper.ProtFieldModification_mode_set)

    def __init__(self):
        this = _PythonWrapper.new_ProtFieldModification()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def clear(self):
        return _PythonWrapper.ProtFieldModification_clear(self)
    __swig_destroy__ = _PythonWrapper.delete_ProtFieldModification
    __del__ = lambda self: None
ProtFieldModification_swigregister = _PythonWrapper.ProtFieldModification_swigregister
ProtFieldModification_swigregister(ProtFieldModification)

class SingleArpModification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleArpModification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleArpModification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["step"] = _PythonWrapper.SingleArpModification_step_set
    __swig_getmethods__["step"] = _PythonWrapper.SingleArpModification_step_get
    if _newclass:
        step = _swig_property(_PythonWrapper.SingleArpModification_step_get, _PythonWrapper.SingleArpModification_step_set)
    __swig_setmethods__["mode"] = _PythonWrapper.SingleArpModification_mode_set
    __swig_getmethods__["mode"] = _PythonWrapper.SingleArpModification_mode_get
    if _newclass:
        mode = _swig_property(_PythonWrapper.SingleArpModification_mode_get, _PythonWrapper.SingleArpModification_mode_set)

    def clear(self):
        return _PythonWrapper.SingleArpModification_clear(self)

    def __init__(self):
        this = _PythonWrapper.new_SingleArpModification()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_SingleArpModification
    __del__ = lambda self: None
SingleArpModification_swigregister = _PythonWrapper.SingleArpModification_swigregister
SingleArpModification_swigregister(SingleArpModification)

class ArpFieldModification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArpFieldModification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArpFieldModification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srcProtocol"] = _PythonWrapper.ArpFieldModification_srcProtocol_set
    __swig_getmethods__["srcProtocol"] = _PythonWrapper.ArpFieldModification_srcProtocol_get
    if _newclass:
        srcProtocol = _swig_property(_PythonWrapper.ArpFieldModification_srcProtocol_get, _PythonWrapper.ArpFieldModification_srcProtocol_set)
    __swig_setmethods__["dstProtocol"] = _PythonWrapper.ArpFieldModification_dstProtocol_set
    __swig_getmethods__["dstProtocol"] = _PythonWrapper.ArpFieldModification_dstProtocol_get
    if _newclass:
        dstProtocol = _swig_property(_PythonWrapper.ArpFieldModification_dstProtocol_get, _PythonWrapper.ArpFieldModification_dstProtocol_set)
    __swig_setmethods__["srcHw"] = _PythonWrapper.ArpFieldModification_srcHw_set
    __swig_getmethods__["srcHw"] = _PythonWrapper.ArpFieldModification_srcHw_get
    if _newclass:
        srcHw = _swig_property(_PythonWrapper.ArpFieldModification_srcHw_get, _PythonWrapper.ArpFieldModification_srcHw_set)
    __swig_setmethods__["dstHw"] = _PythonWrapper.ArpFieldModification_dstHw_set
    __swig_getmethods__["dstHw"] = _PythonWrapper.ArpFieldModification_dstHw_get
    if _newclass:
        dstHw = _swig_property(_PythonWrapper.ArpFieldModification_dstHw_get, _PythonWrapper.ArpFieldModification_dstHw_set)

    def __init__(self):
        this = _PythonWrapper.new_ArpFieldModification()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def clear(self):
        return _PythonWrapper.ArpFieldModification_clear(self)
    __swig_destroy__ = _PythonWrapper.delete_ArpFieldModification
    __del__ = lambda self: None
ArpFieldModification_swigregister = _PythonWrapper.ArpFieldModification_swigregister
ArpFieldModification_swigregister(ArpFieldModification)

class TGStreamFrameData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGStreamFrameData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGStreamFrameData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGStreamFrameData()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["preambleSize"] = _PythonWrapper.TGStreamFrameData_preambleSize_set
    __swig_getmethods__["preambleSize"] = _PythonWrapper.TGStreamFrameData_preambleSize_get
    if _newclass:
        preambleSize = _swig_property(_PythonWrapper.TGStreamFrameData_preambleSize_get, _PythonWrapper.TGStreamFrameData_preambleSize_set)
    __swig_setmethods__["frameSizeMode"] = _PythonWrapper.TGStreamFrameData_frameSizeMode_set
    __swig_getmethods__["frameSizeMode"] = _PythonWrapper.TGStreamFrameData_frameSizeMode_get
    if _newclass:
        frameSizeMode = _swig_property(_PythonWrapper.TGStreamFrameData_frameSizeMode_get, _PythonWrapper.TGStreamFrameData_frameSizeMode_set)
    __swig_setmethods__["frameSizeRandom"] = _PythonWrapper.TGStreamFrameData_frameSizeRandom_set
    __swig_getmethods__["frameSizeRandom"] = _PythonWrapper.TGStreamFrameData_frameSizeRandom_get
    if _newclass:
        frameSizeRandom = _swig_property(_PythonWrapper.TGStreamFrameData_frameSizeRandom_get, _PythonWrapper.TGStreamFrameData_frameSizeRandom_set)
    __swig_setmethods__["frameSizeIncr"] = _PythonWrapper.TGStreamFrameData_frameSizeIncr_set
    __swig_getmethods__["frameSizeIncr"] = _PythonWrapper.TGStreamFrameData_frameSizeIncr_get
    if _newclass:
        frameSizeIncr = _swig_property(_PythonWrapper.TGStreamFrameData_frameSizeIncr_get, _PythonWrapper.TGStreamFrameData_frameSizeIncr_set)
    __swig_setmethods__["instrumentation"] = _PythonWrapper.TGStreamFrameData_instrumentation_set
    __swig_getmethods__["instrumentation"] = _PythonWrapper.TGStreamFrameData_instrumentation_get
    if _newclass:
        instrumentation = _swig_property(_PythonWrapper.TGStreamFrameData_instrumentation_get, _PythonWrapper.TGStreamFrameData_instrumentation_set)
    __swig_setmethods__["packetData"] = _PythonWrapper.TGStreamFrameData_packetData_set
    __swig_getmethods__["packetData"] = _PythonWrapper.TGStreamFrameData_packetData_get
    if _newclass:
        packetData = _swig_property(_PythonWrapper.TGStreamFrameData_packetData_get, _PythonWrapper.TGStreamFrameData_packetData_set)
    __swig_setmethods__["udf"] = _PythonWrapper.TGStreamFrameData_udf_set
    __swig_getmethods__["udf"] = _PythonWrapper.TGStreamFrameData_udf_get
    if _newclass:
        udf = _swig_property(_PythonWrapper.TGStreamFrameData_udf_get, _PythonWrapper.TGStreamFrameData_udf_set)

    def SetUdfProperties(self, index, udf):
        return _PythonWrapper.TGStreamFrameData_SetUdfProperties(self, index, udf)

    def UpdateUdfOffsetAndSizeByPacketField(self, udfIndex, headerName, headerElementName):
        return _PythonWrapper.TGStreamFrameData_UpdateUdfOffsetAndSizeByPacketField(self, udfIndex, headerName, headerElementName)

    def GetUdfProperties(self, index):
        return _PythonWrapper.TGStreamFrameData_GetUdfProperties(self, index)
    __swig_setmethods__["forceErrors"] = _PythonWrapper.TGStreamFrameData_forceErrors_set
    __swig_getmethods__["forceErrors"] = _PythonWrapper.TGStreamFrameData_forceErrors_get
    if _newclass:
        forceErrors = _swig_property(_PythonWrapper.TGStreamFrameData_forceErrors_get, _PythonWrapper.TGStreamFrameData_forceErrors_set)
    __swig_setmethods__["fieldModMacDa"] = _PythonWrapper.TGStreamFrameData_fieldModMacDa_set
    __swig_getmethods__["fieldModMacDa"] = _PythonWrapper.TGStreamFrameData_fieldModMacDa_get
    if _newclass:
        fieldModMacDa = _swig_property(_PythonWrapper.TGStreamFrameData_fieldModMacDa_get, _PythonWrapper.TGStreamFrameData_fieldModMacDa_set)
    __swig_setmethods__["fieldModMacSa"] = _PythonWrapper.TGStreamFrameData_fieldModMacSa_set
    __swig_getmethods__["fieldModMacSa"] = _PythonWrapper.TGStreamFrameData_fieldModMacSa_get
    if _newclass:
        fieldModMacSa = _swig_property(_PythonWrapper.TGStreamFrameData_fieldModMacSa_get, _PythonWrapper.TGStreamFrameData_fieldModMacSa_set)
    __swig_setmethods__["fieldModVlan"] = _PythonWrapper.TGStreamFrameData_fieldModVlan_set
    __swig_getmethods__["fieldModVlan"] = _PythonWrapper.TGStreamFrameData_fieldModVlan_get
    if _newclass:
        fieldModVlan = _swig_property(_PythonWrapper.TGStreamFrameData_fieldModVlan_get, _PythonWrapper.TGStreamFrameData_fieldModVlan_set)
    __swig_setmethods__["fieldModIpv4Da"] = _PythonWrapper.TGStreamFrameData_fieldModIpv4Da_set
    __swig_getmethods__["fieldModIpv4Da"] = _PythonWrapper.TGStreamFrameData_fieldModIpv4Da_get
    if _newclass:
        fieldModIpv4Da = _swig_property(_PythonWrapper.TGStreamFrameData_fieldModIpv4Da_get, _PythonWrapper.TGStreamFrameData_fieldModIpv4Da_set)
    __swig_setmethods__["fieldModIpv4Sa"] = _PythonWrapper.TGStreamFrameData_fieldModIpv4Sa_set
    __swig_getmethods__["fieldModIpv4Sa"] = _PythonWrapper.TGStreamFrameData_fieldModIpv4Sa_get
    if _newclass:
        fieldModIpv4Sa = _swig_property(_PythonWrapper.TGStreamFrameData_fieldModIpv4Sa_get, _PythonWrapper.TGStreamFrameData_fieldModIpv4Sa_set)
    __swig_setmethods__["fieldModIpv6Da"] = _PythonWrapper.TGStreamFrameData_fieldModIpv6Da_set
    __swig_getmethods__["fieldModIpv6Da"] = _PythonWrapper.TGStreamFrameData_fieldModIpv6Da_get
    if _newclass:
        fieldModIpv6Da = _swig_property(_PythonWrapper.TGStreamFrameData_fieldModIpv6Da_get, _PythonWrapper.TGStreamFrameData_fieldModIpv6Da_set)
    __swig_setmethods__["fieldModIpv6Sa"] = _PythonWrapper.TGStreamFrameData_fieldModIpv6Sa_set
    __swig_getmethods__["fieldModIpv6Sa"] = _PythonWrapper.TGStreamFrameData_fieldModIpv6Sa_get
    if _newclass:
        fieldModIpv6Sa = _swig_property(_PythonWrapper.TGStreamFrameData_fieldModIpv6Sa_get, _PythonWrapper.TGStreamFrameData_fieldModIpv6Sa_set)
    __swig_setmethods__["fieldModIGMP"] = _PythonWrapper.TGStreamFrameData_fieldModIGMP_set
    __swig_getmethods__["fieldModIGMP"] = _PythonWrapper.TGStreamFrameData_fieldModIGMP_get
    if _newclass:
        fieldModIGMP = _swig_property(_PythonWrapper.TGStreamFrameData_fieldModIGMP_get, _PythonWrapper.TGStreamFrameData_fieldModIGMP_set)
    __swig_setmethods__["fieldModArp"] = _PythonWrapper.TGStreamFrameData_fieldModArp_set
    __swig_getmethods__["fieldModArp"] = _PythonWrapper.TGStreamFrameData_fieldModArp_get
    if _newclass:
        fieldModArp = _swig_property(_PythonWrapper.TGStreamFrameData_fieldModArp_get, _PythonWrapper.TGStreamFrameData_fieldModArp_set)
    __swig_destroy__ = _PythonWrapper.delete_TGStreamFrameData
    __del__ = lambda self: None
TGStreamFrameData_swigregister = _PythonWrapper.TGStreamFrameData_swigregister
TGStreamFrameData_swigregister(TGStreamFrameData)

class TGStreamCounters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGStreamCounters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGStreamCounters, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGStreamCounters()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["framesSent"] = _PythonWrapper.TGStreamCounters_framesSent_set
    __swig_getmethods__["framesSent"] = _PythonWrapper.TGStreamCounters_framesSent_get
    if _newclass:
        framesSent = _swig_property(_PythonWrapper.TGStreamCounters_framesSent_get, _PythonWrapper.TGStreamCounters_framesSent_set)
    __swig_setmethods__["frameRate"] = _PythonWrapper.TGStreamCounters_frameRate_set
    __swig_getmethods__["frameRate"] = _PythonWrapper.TGStreamCounters_frameRate_get
    if _newclass:
        frameRate = _swig_property(_PythonWrapper.TGStreamCounters_frameRate_get, _PythonWrapper.TGStreamCounters_frameRate_set)
    __swig_destroy__ = _PythonWrapper.delete_TGStreamCounters
    __del__ = lambda self: None
TGStreamCounters_swigregister = _PythonWrapper.TGStreamCounters_swigregister
TGStreamCounters_swigregister(TGStreamCounters)

class PGIDStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PGIDStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PGIDStatistics, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_PGIDStatistics()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clear(self):
        return _PythonWrapper.PGIDStatistics_Clear(self)
    __swig_setmethods__["FramesReceived"] = _PythonWrapper.PGIDStatistics_FramesReceived_set
    __swig_getmethods__["FramesReceived"] = _PythonWrapper.PGIDStatistics_FramesReceived_get
    if _newclass:
        FramesReceived = _swig_property(_PythonWrapper.PGIDStatistics_FramesReceived_get, _PythonWrapper.PGIDStatistics_FramesReceived_set)
    __swig_setmethods__["LatencyMin"] = _PythonWrapper.PGIDStatistics_LatencyMin_set
    __swig_getmethods__["LatencyMin"] = _PythonWrapper.PGIDStatistics_LatencyMin_get
    if _newclass:
        LatencyMin = _swig_property(_PythonWrapper.PGIDStatistics_LatencyMin_get, _PythonWrapper.PGIDStatistics_LatencyMin_set)
    __swig_setmethods__["LatencyMax"] = _PythonWrapper.PGIDStatistics_LatencyMax_set
    __swig_getmethods__["LatencyMax"] = _PythonWrapper.PGIDStatistics_LatencyMax_get
    if _newclass:
        LatencyMax = _swig_property(_PythonWrapper.PGIDStatistics_LatencyMax_get, _PythonWrapper.PGIDStatistics_LatencyMax_set)
    __swig_setmethods__["LatencyMaxMin"] = _PythonWrapper.PGIDStatistics_LatencyMaxMin_set
    __swig_getmethods__["LatencyMaxMin"] = _PythonWrapper.PGIDStatistics_LatencyMaxMin_get
    if _newclass:
        LatencyMaxMin = _swig_property(_PythonWrapper.PGIDStatistics_LatencyMaxMin_get, _PythonWrapper.PGIDStatistics_LatencyMaxMin_set)
    __swig_setmethods__["LatencyAvg"] = _PythonWrapper.PGIDStatistics_LatencyAvg_set
    __swig_getmethods__["LatencyAvg"] = _PythonWrapper.PGIDStatistics_LatencyAvg_get
    if _newclass:
        LatencyAvg = _swig_property(_PythonWrapper.PGIDStatistics_LatencyAvg_get, _PythonWrapper.PGIDStatistics_LatencyAvg_set)
    __swig_setmethods__["BitRateSec"] = _PythonWrapper.PGIDStatistics_BitRateSec_set
    __swig_getmethods__["BitRateSec"] = _PythonWrapper.PGIDStatistics_BitRateSec_get
    if _newclass:
        BitRateSec = _swig_property(_PythonWrapper.PGIDStatistics_BitRateSec_get, _PythonWrapper.PGIDStatistics_BitRateSec_set)
    __swig_setmethods__["ByteCount"] = _PythonWrapper.PGIDStatistics_ByteCount_set
    __swig_getmethods__["ByteCount"] = _PythonWrapper.PGIDStatistics_ByteCount_get
    if _newclass:
        ByteCount = _swig_property(_PythonWrapper.PGIDStatistics_ByteCount_get, _PythonWrapper.PGIDStatistics_ByteCount_set)
    __swig_setmethods__["SmallError"] = _PythonWrapper.PGIDStatistics_SmallError_set
    __swig_getmethods__["SmallError"] = _PythonWrapper.PGIDStatistics_SmallError_get
    if _newclass:
        SmallError = _swig_property(_PythonWrapper.PGIDStatistics_SmallError_get, _PythonWrapper.PGIDStatistics_SmallError_set)
    __swig_setmethods__["BigError"] = _PythonWrapper.PGIDStatistics_BigError_set
    __swig_getmethods__["BigError"] = _PythonWrapper.PGIDStatistics_BigError_get
    if _newclass:
        BigError = _swig_property(_PythonWrapper.PGIDStatistics_BigError_get, _PythonWrapper.PGIDStatistics_BigError_set)
    __swig_setmethods__["ReverseError"] = _PythonWrapper.PGIDStatistics_ReverseError_set
    __swig_getmethods__["ReverseError"] = _PythonWrapper.PGIDStatistics_ReverseError_get
    if _newclass:
        ReverseError = _swig_property(_PythonWrapper.PGIDStatistics_ReverseError_get, _PythonWrapper.PGIDStatistics_ReverseError_set)
    __swig_setmethods__["TotalError"] = _PythonWrapper.PGIDStatistics_TotalError_set
    __swig_getmethods__["TotalError"] = _PythonWrapper.PGIDStatistics_TotalError_get
    if _newclass:
        TotalError = _swig_property(_PythonWrapper.PGIDStatistics_TotalError_get, _PythonWrapper.PGIDStatistics_TotalError_set)
    __swig_destroy__ = _PythonWrapper.delete_PGIDStatistics
    __del__ = lambda self: None
PGIDStatistics_swigregister = _PythonWrapper.PGIDStatistics_swigregister
PGIDStatistics_swigregister(PGIDStatistics)

class TGCountCounters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGCountCounters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGCountCounters, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGCountCounters()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def ClearCounters(self):
        return _PythonWrapper.TGCountCounters_ClearCounters(self)
    __swig_setmethods__["RxFrames"] = _PythonWrapper.TGCountCounters_RxFrames_set
    __swig_getmethods__["RxFrames"] = _PythonWrapper.TGCountCounters_RxFrames_get
    if _newclass:
        RxFrames = _swig_property(_PythonWrapper.TGCountCounters_RxFrames_get, _PythonWrapper.TGCountCounters_RxFrames_set)
    __swig_setmethods__["TxFrames"] = _PythonWrapper.TGCountCounters_TxFrames_set
    __swig_getmethods__["TxFrames"] = _PythonWrapper.TGCountCounters_TxFrames_get
    if _newclass:
        TxFrames = _swig_property(_PythonWrapper.TGCountCounters_TxFrames_get, _PythonWrapper.TGCountCounters_TxFrames_set)
    __swig_setmethods__["Collisions"] = _PythonWrapper.TGCountCounters_Collisions_set
    __swig_getmethods__["Collisions"] = _PythonWrapper.TGCountCounters_Collisions_get
    if _newclass:
        Collisions = _swig_property(_PythonWrapper.TGCountCounters_Collisions_get, _PythonWrapper.TGCountCounters_Collisions_set)
    __swig_setmethods__["RxTriggers"] = _PythonWrapper.TGCountCounters_RxTriggers_set
    __swig_getmethods__["RxTriggers"] = _PythonWrapper.TGCountCounters_RxTriggers_get
    if _newclass:
        RxTriggers = _swig_property(_PythonWrapper.TGCountCounters_RxTriggers_get, _PythonWrapper.TGCountCounters_RxTriggers_set)
    __swig_setmethods__["RxBytes"] = _PythonWrapper.TGCountCounters_RxBytes_set
    __swig_getmethods__["RxBytes"] = _PythonWrapper.TGCountCounters_RxBytes_get
    if _newclass:
        RxBytes = _swig_property(_PythonWrapper.TGCountCounters_RxBytes_get, _PythonWrapper.TGCountCounters_RxBytes_set)
    __swig_setmethods__["CRCErrors"] = _PythonWrapper.TGCountCounters_CRCErrors_set
    __swig_getmethods__["CRCErrors"] = _PythonWrapper.TGCountCounters_CRCErrors_get
    if _newclass:
        CRCErrors = _swig_property(_PythonWrapper.TGCountCounters_CRCErrors_get, _PythonWrapper.TGCountCounters_CRCErrors_set)
    __swig_setmethods__["AlignErrors"] = _PythonWrapper.TGCountCounters_AlignErrors_set
    __swig_getmethods__["AlignErrors"] = _PythonWrapper.TGCountCounters_AlignErrors_get
    if _newclass:
        AlignErrors = _swig_property(_PythonWrapper.TGCountCounters_AlignErrors_get, _PythonWrapper.TGCountCounters_AlignErrors_set)
    __swig_setmethods__["Oversize"] = _PythonWrapper.TGCountCounters_Oversize_set
    __swig_getmethods__["Oversize"] = _PythonWrapper.TGCountCounters_Oversize_get
    if _newclass:
        Oversize = _swig_property(_PythonWrapper.TGCountCounters_Oversize_get, _PythonWrapper.TGCountCounters_Oversize_set)
    __swig_setmethods__["UnderSize"] = _PythonWrapper.TGCountCounters_UnderSize_set
    __swig_getmethods__["UnderSize"] = _PythonWrapper.TGCountCounters_UnderSize_get
    if _newclass:
        UnderSize = _swig_property(_PythonWrapper.TGCountCounters_UnderSize_get, _PythonWrapper.TGCountCounters_UnderSize_set)
    __swig_setmethods__["RxVLANFrames"] = _PythonWrapper.TGCountCounters_RxVLANFrames_set
    __swig_getmethods__["RxVLANFrames"] = _PythonWrapper.TGCountCounters_RxVLANFrames_get
    if _newclass:
        RxVLANFrames = _swig_property(_PythonWrapper.TGCountCounters_RxVLANFrames_get, _PythonWrapper.TGCountCounters_RxVLANFrames_set)
    __swig_setmethods__["RxIPFrames"] = _PythonWrapper.TGCountCounters_RxIPFrames_set
    __swig_getmethods__["RxIPFrames"] = _PythonWrapper.TGCountCounters_RxIPFrames_get
    if _newclass:
        RxIPFrames = _swig_property(_PythonWrapper.TGCountCounters_RxIPFrames_get, _PythonWrapper.TGCountCounters_RxIPFrames_set)
    __swig_setmethods__["RxIPChecksumErrors"] = _PythonWrapper.TGCountCounters_RxIPChecksumErrors_set
    __swig_getmethods__["RxIPChecksumErrors"] = _PythonWrapper.TGCountCounters_RxIPChecksumErrors_get
    if _newclass:
        RxIPChecksumErrors = _swig_property(_PythonWrapper.TGCountCounters_RxIPChecksumErrors_get, _PythonWrapper.TGCountCounters_RxIPChecksumErrors_set)
    __swig_setmethods__["TxARPReplies"] = _PythonWrapper.TGCountCounters_TxARPReplies_set
    __swig_getmethods__["TxARPReplies"] = _PythonWrapper.TGCountCounters_TxARPReplies_get
    if _newclass:
        TxARPReplies = _swig_property(_PythonWrapper.TGCountCounters_TxARPReplies_get, _PythonWrapper.TGCountCounters_TxARPReplies_set)
    __swig_setmethods__["RxARPReplies"] = _PythonWrapper.TGCountCounters_RxARPReplies_set
    __swig_getmethods__["RxARPReplies"] = _PythonWrapper.TGCountCounters_RxARPReplies_get
    if _newclass:
        RxARPReplies = _swig_property(_PythonWrapper.TGCountCounters_RxARPReplies_get, _PythonWrapper.TGCountCounters_RxARPReplies_set)
    __swig_setmethods__["TxARPRequests"] = _PythonWrapper.TGCountCounters_TxARPRequests_set
    __swig_getmethods__["TxARPRequests"] = _PythonWrapper.TGCountCounters_TxARPRequests_get
    if _newclass:
        TxARPRequests = _swig_property(_PythonWrapper.TGCountCounters_TxARPRequests_get, _PythonWrapper.TGCountCounters_TxARPRequests_set)
    __swig_setmethods__["RxARPRequests"] = _PythonWrapper.TGCountCounters_RxARPRequests_set
    __swig_getmethods__["RxARPRequests"] = _PythonWrapper.TGCountCounters_RxARPRequests_get
    if _newclass:
        RxARPRequests = _swig_property(_PythonWrapper.TGCountCounters_RxARPRequests_get, _PythonWrapper.TGCountCounters_RxARPRequests_set)
    __swig_setmethods__["TxPingReplies"] = _PythonWrapper.TGCountCounters_TxPingReplies_set
    __swig_getmethods__["TxPingReplies"] = _PythonWrapper.TGCountCounters_TxPingReplies_get
    if _newclass:
        TxPingReplies = _swig_property(_PythonWrapper.TGCountCounters_TxPingReplies_get, _PythonWrapper.TGCountCounters_TxPingReplies_set)
    __swig_setmethods__["RxPingReplies"] = _PythonWrapper.TGCountCounters_RxPingReplies_set
    __swig_getmethods__["RxPingReplies"] = _PythonWrapper.TGCountCounters_RxPingReplies_get
    if _newclass:
        RxPingReplies = _swig_property(_PythonWrapper.TGCountCounters_RxPingReplies_get, _PythonWrapper.TGCountCounters_RxPingReplies_set)
    __swig_setmethods__["TxPingRequests"] = _PythonWrapper.TGCountCounters_TxPingRequests_set
    __swig_getmethods__["TxPingRequests"] = _PythonWrapper.TGCountCounters_TxPingRequests_get
    if _newclass:
        TxPingRequests = _swig_property(_PythonWrapper.TGCountCounters_TxPingRequests_get, _PythonWrapper.TGCountCounters_TxPingRequests_set)
    __swig_setmethods__["RxPingRequests"] = _PythonWrapper.TGCountCounters_RxPingRequests_set
    __swig_getmethods__["RxPingRequests"] = _PythonWrapper.TGCountCounters_RxPingRequests_get
    if _newclass:
        RxPingRequests = _swig_property(_PythonWrapper.TGCountCounters_RxPingRequests_get, _PythonWrapper.TGCountCounters_RxPingRequests_set)
    __swig_setmethods__["RxDataIntegrirtyErrors"] = _PythonWrapper.TGCountCounters_RxDataIntegrirtyErrors_set
    __swig_getmethods__["RxDataIntegrirtyErrors"] = _PythonWrapper.TGCountCounters_RxDataIntegrirtyErrors_get
    if _newclass:
        RxDataIntegrirtyErrors = _swig_property(_PythonWrapper.TGCountCounters_RxDataIntegrirtyErrors_get, _PythonWrapper.TGCountCounters_RxDataIntegrirtyErrors_set)
    __swig_setmethods__["TxSignatureFrames"] = _PythonWrapper.TGCountCounters_TxSignatureFrames_set
    __swig_getmethods__["TxSignatureFrames"] = _PythonWrapper.TGCountCounters_TxSignatureFrames_get
    if _newclass:
        TxSignatureFrames = _swig_property(_PythonWrapper.TGCountCounters_TxSignatureFrames_get, _PythonWrapper.TGCountCounters_TxSignatureFrames_set)
    __swig_setmethods__["RxSignatureFrames"] = _PythonWrapper.TGCountCounters_RxSignatureFrames_set
    __swig_getmethods__["RxSignatureFrames"] = _PythonWrapper.TGCountCounters_RxSignatureFrames_get
    if _newclass:
        RxSignatureFrames = _swig_property(_PythonWrapper.TGCountCounters_RxSignatureFrames_get, _PythonWrapper.TGCountCounters_RxSignatureFrames_set)
    __swig_setmethods__["TxDuration"] = _PythonWrapper.TGCountCounters_TxDuration_set
    __swig_getmethods__["TxDuration"] = _PythonWrapper.TGCountCounters_TxDuration_get
    if _newclass:
        TxDuration = _swig_property(_PythonWrapper.TGCountCounters_TxDuration_get, _PythonWrapper.TGCountCounters_TxDuration_set)
    __swig_setmethods__["TxBytes"] = _PythonWrapper.TGCountCounters_TxBytes_set
    __swig_getmethods__["TxBytes"] = _PythonWrapper.TGCountCounters_TxBytes_get
    if _newclass:
        TxBytes = _swig_property(_PythonWrapper.TGCountCounters_TxBytes_get, _PythonWrapper.TGCountCounters_TxBytes_set)
    __swig_setmethods__["Fragments"] = _PythonWrapper.TGCountCounters_Fragments_set
    __swig_getmethods__["Fragments"] = _PythonWrapper.TGCountCounters_Fragments_get
    if _newclass:
        Fragments = _swig_property(_PythonWrapper.TGCountCounters_Fragments_get, _PythonWrapper.TGCountCounters_Fragments_set)
    __swig_setmethods__["RxFlowControlFrames"] = _PythonWrapper.TGCountCounters_RxFlowControlFrames_set
    __swig_getmethods__["RxFlowControlFrames"] = _PythonWrapper.TGCountCounters_RxFlowControlFrames_get
    if _newclass:
        RxFlowControlFrames = _swig_property(_PythonWrapper.TGCountCounters_RxFlowControlFrames_get, _PythonWrapper.TGCountCounters_RxFlowControlFrames_set)
    __swig_setmethods__["DribbleErrors"] = _PythonWrapper.TGCountCounters_DribbleErrors_set
    __swig_getmethods__["DribbleErrors"] = _PythonWrapper.TGCountCounters_DribbleErrors_get
    if _newclass:
        DribbleErrors = _swig_property(_PythonWrapper.TGCountCounters_DribbleErrors_get, _PythonWrapper.TGCountCounters_DribbleErrors_set)
    __swig_setmethods__["LateCollisions"] = _PythonWrapper.TGCountCounters_LateCollisions_set
    __swig_getmethods__["LateCollisions"] = _PythonWrapper.TGCountCounters_LateCollisions_get
    if _newclass:
        LateCollisions = _swig_property(_PythonWrapper.TGCountCounters_LateCollisions_get, _PythonWrapper.TGCountCounters_LateCollisions_set)
    __swig_setmethods__["CollisionFrames"] = _PythonWrapper.TGCountCounters_CollisionFrames_set
    __swig_getmethods__["CollisionFrames"] = _PythonWrapper.TGCountCounters_CollisionFrames_get
    if _newclass:
        CollisionFrames = _swig_property(_PythonWrapper.TGCountCounters_CollisionFrames_get, _PythonWrapper.TGCountCounters_CollisionFrames_set)
    __swig_setmethods__["ExcessiveCollisionFrames"] = _PythonWrapper.TGCountCounters_ExcessiveCollisionFrames_set
    __swig_getmethods__["ExcessiveCollisionFrames"] = _PythonWrapper.TGCountCounters_ExcessiveCollisionFrames_get
    if _newclass:
        ExcessiveCollisionFrames = _swig_property(_PythonWrapper.TGCountCounters_ExcessiveCollisionFrames_get, _PythonWrapper.TGCountCounters_ExcessiveCollisionFrames_set)
    __swig_setmethods__["OversizeAndCRC"] = _PythonWrapper.TGCountCounters_OversizeAndCRC_set
    __swig_getmethods__["OversizeAndCRC"] = _PythonWrapper.TGCountCounters_OversizeAndCRC_get
    if _newclass:
        OversizeAndCRC = _swig_property(_PythonWrapper.TGCountCounters_OversizeAndCRC_get, _PythonWrapper.TGCountCounters_OversizeAndCRC_set)
    __swig_setmethods__["UDS1"] = _PythonWrapper.TGCountCounters_UDS1_set
    __swig_getmethods__["UDS1"] = _PythonWrapper.TGCountCounters_UDS1_get
    if _newclass:
        UDS1 = _swig_property(_PythonWrapper.TGCountCounters_UDS1_get, _PythonWrapper.TGCountCounters_UDS1_set)
    __swig_setmethods__["UDS2"] = _PythonWrapper.TGCountCounters_UDS2_set
    __swig_getmethods__["UDS2"] = _PythonWrapper.TGCountCounters_UDS2_get
    if _newclass:
        UDS2 = _swig_property(_PythonWrapper.TGCountCounters_UDS2_get, _PythonWrapper.TGCountCounters_UDS2_set)
    __swig_setmethods__["UDS3"] = _PythonWrapper.TGCountCounters_UDS3_set
    __swig_getmethods__["UDS3"] = _PythonWrapper.TGCountCounters_UDS3_get
    if _newclass:
        UDS3 = _swig_property(_PythonWrapper.TGCountCounters_UDS3_get, _PythonWrapper.TGCountCounters_UDS3_set)
    __swig_setmethods__["UDS4"] = _PythonWrapper.TGCountCounters_UDS4_set
    __swig_getmethods__["UDS4"] = _PythonWrapper.TGCountCounters_UDS4_get
    if _newclass:
        UDS4 = _swig_property(_PythonWrapper.TGCountCounters_UDS4_get, _PythonWrapper.TGCountCounters_UDS4_set)
    __swig_setmethods__["TxProtocolServer"] = _PythonWrapper.TGCountCounters_TxProtocolServer_set
    __swig_getmethods__["TxProtocolServer"] = _PythonWrapper.TGCountCounters_TxProtocolServer_get
    if _newclass:
        TxProtocolServer = _swig_property(_PythonWrapper.TGCountCounters_TxProtocolServer_get, _PythonWrapper.TGCountCounters_TxProtocolServer_set)
    __swig_setmethods__["RxProtocolServer"] = _PythonWrapper.TGCountCounters_RxProtocolServer_set
    __swig_getmethods__["RxProtocolServer"] = _PythonWrapper.TGCountCounters_RxProtocolServer_get
    if _newclass:
        RxProtocolServer = _swig_property(_PythonWrapper.TGCountCounters_RxProtocolServer_get, _PythonWrapper.TGCountCounters_RxProtocolServer_set)
    __swig_setmethods__["ScheduledFramesSent"] = _PythonWrapper.TGCountCounters_ScheduledFramesSent_set
    __swig_getmethods__["ScheduledFramesSent"] = _PythonWrapper.TGCountCounters_ScheduledFramesSent_get
    if _newclass:
        ScheduledFramesSent = _swig_property(_PythonWrapper.TGCountCounters_ScheduledFramesSent_get, _PythonWrapper.TGCountCounters_ScheduledFramesSent_set)
    __swig_setmethods__["AsynchronousFramesSent"] = _PythonWrapper.TGCountCounters_AsynchronousFramesSent_set
    __swig_getmethods__["AsynchronousFramesSent"] = _PythonWrapper.TGCountCounters_AsynchronousFramesSent_get
    if _newclass:
        AsynchronousFramesSent = _swig_property(_PythonWrapper.TGCountCounters_AsynchronousFramesSent_get, _PythonWrapper.TGCountCounters_AsynchronousFramesSent_set)
    __swig_setmethods__["TxBits"] = _PythonWrapper.TGCountCounters_TxBits_set
    __swig_getmethods__["TxBits"] = _PythonWrapper.TGCountCounters_TxBits_get
    if _newclass:
        TxBits = _swig_property(_PythonWrapper.TGCountCounters_TxBits_get, _PythonWrapper.TGCountCounters_TxBits_set)
    __swig_setmethods__["RxBits"] = _PythonWrapper.TGCountCounters_RxBits_set
    __swig_getmethods__["RxBits"] = _PythonWrapper.TGCountCounters_RxBits_get
    if _newclass:
        RxBits = _swig_property(_PythonWrapper.TGCountCounters_RxBits_get, _PythonWrapper.TGCountCounters_RxBits_set)
    __swig_setmethods__["TxNeighborSolicitations"] = _PythonWrapper.TGCountCounters_TxNeighborSolicitations_set
    __swig_getmethods__["TxNeighborSolicitations"] = _PythonWrapper.TGCountCounters_TxNeighborSolicitations_get
    if _newclass:
        TxNeighborSolicitations = _swig_property(_PythonWrapper.TGCountCounters_TxNeighborSolicitations_get, _PythonWrapper.TGCountCounters_TxNeighborSolicitations_set)
    __swig_setmethods__["TxNeighborAdvertisements"] = _PythonWrapper.TGCountCounters_TxNeighborAdvertisements_set
    __swig_getmethods__["TxNeighborAdvertisements"] = _PythonWrapper.TGCountCounters_TxNeighborAdvertisements_get
    if _newclass:
        TxNeighborAdvertisements = _swig_property(_PythonWrapper.TGCountCounters_TxNeighborAdvertisements_get, _PythonWrapper.TGCountCounters_TxNeighborAdvertisements_set)
    __swig_setmethods__["RxNeighborSolicitations"] = _PythonWrapper.TGCountCounters_RxNeighborSolicitations_set
    __swig_getmethods__["RxNeighborSolicitations"] = _PythonWrapper.TGCountCounters_RxNeighborSolicitations_get
    if _newclass:
        RxNeighborSolicitations = _swig_property(_PythonWrapper.TGCountCounters_RxNeighborSolicitations_get, _PythonWrapper.TGCountCounters_RxNeighborSolicitations_set)
    __swig_setmethods__["RxNeighborAdvertisements"] = _PythonWrapper.TGCountCounters_RxNeighborAdvertisements_set
    __swig_getmethods__["RxNeighborAdvertisements"] = _PythonWrapper.TGCountCounters_RxNeighborAdvertisements_get
    if _newclass:
        RxNeighborAdvertisements = _swig_property(_PythonWrapper.TGCountCounters_RxNeighborAdvertisements_get, _PythonWrapper.TGCountCounters_RxNeighborAdvertisements_set)
    __swig_destroy__ = _PythonWrapper.delete_TGCountCounters
    __del__ = lambda self: None
TGCountCounters_swigregister = _PythonWrapper.TGCountCounters_swigregister
TGCountCounters_swigregister(TGCountCounters)

class TGRateCounters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGRateCounters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGRateCounters, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGRateCounters()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def ClearCounters(self):
        return _PythonWrapper.TGRateCounters_ClearCounters(self)
    __swig_setmethods__["RxFrames"] = _PythonWrapper.TGRateCounters_RxFrames_set
    __swig_getmethods__["RxFrames"] = _PythonWrapper.TGRateCounters_RxFrames_get
    if _newclass:
        RxFrames = _swig_property(_PythonWrapper.TGRateCounters_RxFrames_get, _PythonWrapper.TGRateCounters_RxFrames_set)
    __swig_setmethods__["TxFrames"] = _PythonWrapper.TGRateCounters_TxFrames_set
    __swig_getmethods__["TxFrames"] = _PythonWrapper.TGRateCounters_TxFrames_get
    if _newclass:
        TxFrames = _swig_property(_PythonWrapper.TGRateCounters_TxFrames_get, _PythonWrapper.TGRateCounters_TxFrames_set)
    __swig_setmethods__["Collisions"] = _PythonWrapper.TGRateCounters_Collisions_set
    __swig_getmethods__["Collisions"] = _PythonWrapper.TGRateCounters_Collisions_get
    if _newclass:
        Collisions = _swig_property(_PythonWrapper.TGRateCounters_Collisions_get, _PythonWrapper.TGRateCounters_Collisions_set)
    __swig_setmethods__["RxTriggers"] = _PythonWrapper.TGRateCounters_RxTriggers_set
    __swig_getmethods__["RxTriggers"] = _PythonWrapper.TGRateCounters_RxTriggers_get
    if _newclass:
        RxTriggers = _swig_property(_PythonWrapper.TGRateCounters_RxTriggers_get, _PythonWrapper.TGRateCounters_RxTriggers_set)
    __swig_setmethods__["RxBytes"] = _PythonWrapper.TGRateCounters_RxBytes_set
    __swig_getmethods__["RxBytes"] = _PythonWrapper.TGRateCounters_RxBytes_get
    if _newclass:
        RxBytes = _swig_property(_PythonWrapper.TGRateCounters_RxBytes_get, _PythonWrapper.TGRateCounters_RxBytes_set)
    __swig_setmethods__["CRCErrors"] = _PythonWrapper.TGRateCounters_CRCErrors_set
    __swig_getmethods__["CRCErrors"] = _PythonWrapper.TGRateCounters_CRCErrors_get
    if _newclass:
        CRCErrors = _swig_property(_PythonWrapper.TGRateCounters_CRCErrors_get, _PythonWrapper.TGRateCounters_CRCErrors_set)
    __swig_setmethods__["AlignErrors"] = _PythonWrapper.TGRateCounters_AlignErrors_set
    __swig_getmethods__["AlignErrors"] = _PythonWrapper.TGRateCounters_AlignErrors_get
    if _newclass:
        AlignErrors = _swig_property(_PythonWrapper.TGRateCounters_AlignErrors_get, _PythonWrapper.TGRateCounters_AlignErrors_set)
    __swig_setmethods__["Oversize"] = _PythonWrapper.TGRateCounters_Oversize_set
    __swig_getmethods__["Oversize"] = _PythonWrapper.TGRateCounters_Oversize_get
    if _newclass:
        Oversize = _swig_property(_PythonWrapper.TGRateCounters_Oversize_get, _PythonWrapper.TGRateCounters_Oversize_set)
    __swig_setmethods__["UnderSize"] = _PythonWrapper.TGRateCounters_UnderSize_set
    __swig_getmethods__["UnderSize"] = _PythonWrapper.TGRateCounters_UnderSize_get
    if _newclass:
        UnderSize = _swig_property(_PythonWrapper.TGRateCounters_UnderSize_get, _PythonWrapper.TGRateCounters_UnderSize_set)
    __swig_setmethods__["RxVLANFrames"] = _PythonWrapper.TGRateCounters_RxVLANFrames_set
    __swig_getmethods__["RxVLANFrames"] = _PythonWrapper.TGRateCounters_RxVLANFrames_get
    if _newclass:
        RxVLANFrames = _swig_property(_PythonWrapper.TGRateCounters_RxVLANFrames_get, _PythonWrapper.TGRateCounters_RxVLANFrames_set)
    __swig_setmethods__["RxIPFrames"] = _PythonWrapper.TGRateCounters_RxIPFrames_set
    __swig_getmethods__["RxIPFrames"] = _PythonWrapper.TGRateCounters_RxIPFrames_get
    if _newclass:
        RxIPFrames = _swig_property(_PythonWrapper.TGRateCounters_RxIPFrames_get, _PythonWrapper.TGRateCounters_RxIPFrames_set)
    __swig_setmethods__["RxIPChecksumErrors"] = _PythonWrapper.TGRateCounters_RxIPChecksumErrors_set
    __swig_getmethods__["RxIPChecksumErrors"] = _PythonWrapper.TGRateCounters_RxIPChecksumErrors_get
    if _newclass:
        RxIPChecksumErrors = _swig_property(_PythonWrapper.TGRateCounters_RxIPChecksumErrors_get, _PythonWrapper.TGRateCounters_RxIPChecksumErrors_set)
    __swig_setmethods__["RxDataIntegrirtyErrors"] = _PythonWrapper.TGRateCounters_RxDataIntegrirtyErrors_set
    __swig_getmethods__["RxDataIntegrirtyErrors"] = _PythonWrapper.TGRateCounters_RxDataIntegrirtyErrors_get
    if _newclass:
        RxDataIntegrirtyErrors = _swig_property(_PythonWrapper.TGRateCounters_RxDataIntegrirtyErrors_get, _PythonWrapper.TGRateCounters_RxDataIntegrirtyErrors_set)
    __swig_setmethods__["TxSignatureFrames"] = _PythonWrapper.TGRateCounters_TxSignatureFrames_set
    __swig_getmethods__["TxSignatureFrames"] = _PythonWrapper.TGRateCounters_TxSignatureFrames_get
    if _newclass:
        TxSignatureFrames = _swig_property(_PythonWrapper.TGRateCounters_TxSignatureFrames_get, _PythonWrapper.TGRateCounters_TxSignatureFrames_set)
    __swig_setmethods__["RxSignatureFrames"] = _PythonWrapper.TGRateCounters_RxSignatureFrames_set
    __swig_getmethods__["RxSignatureFrames"] = _PythonWrapper.TGRateCounters_RxSignatureFrames_get
    if _newclass:
        RxSignatureFrames = _swig_property(_PythonWrapper.TGRateCounters_RxSignatureFrames_get, _PythonWrapper.TGRateCounters_RxSignatureFrames_set)
    __swig_setmethods__["TxBytes"] = _PythonWrapper.TGRateCounters_TxBytes_set
    __swig_getmethods__["TxBytes"] = _PythonWrapper.TGRateCounters_TxBytes_get
    if _newclass:
        TxBytes = _swig_property(_PythonWrapper.TGRateCounters_TxBytes_get, _PythonWrapper.TGRateCounters_TxBytes_set)
    __swig_setmethods__["Fragments"] = _PythonWrapper.TGRateCounters_Fragments_set
    __swig_getmethods__["Fragments"] = _PythonWrapper.TGRateCounters_Fragments_get
    if _newclass:
        Fragments = _swig_property(_PythonWrapper.TGRateCounters_Fragments_get, _PythonWrapper.TGRateCounters_Fragments_set)
    __swig_setmethods__["RxFlowControlFrames"] = _PythonWrapper.TGRateCounters_RxFlowControlFrames_set
    __swig_getmethods__["RxFlowControlFrames"] = _PythonWrapper.TGRateCounters_RxFlowControlFrames_get
    if _newclass:
        RxFlowControlFrames = _swig_property(_PythonWrapper.TGRateCounters_RxFlowControlFrames_get, _PythonWrapper.TGRateCounters_RxFlowControlFrames_set)
    __swig_setmethods__["DribbleErrors"] = _PythonWrapper.TGRateCounters_DribbleErrors_set
    __swig_getmethods__["DribbleErrors"] = _PythonWrapper.TGRateCounters_DribbleErrors_get
    if _newclass:
        DribbleErrors = _swig_property(_PythonWrapper.TGRateCounters_DribbleErrors_get, _PythonWrapper.TGRateCounters_DribbleErrors_set)
    __swig_setmethods__["LateCollisions"] = _PythonWrapper.TGRateCounters_LateCollisions_set
    __swig_getmethods__["LateCollisions"] = _PythonWrapper.TGRateCounters_LateCollisions_get
    if _newclass:
        LateCollisions = _swig_property(_PythonWrapper.TGRateCounters_LateCollisions_get, _PythonWrapper.TGRateCounters_LateCollisions_set)
    __swig_setmethods__["CollisionFrames"] = _PythonWrapper.TGRateCounters_CollisionFrames_set
    __swig_getmethods__["CollisionFrames"] = _PythonWrapper.TGRateCounters_CollisionFrames_get
    if _newclass:
        CollisionFrames = _swig_property(_PythonWrapper.TGRateCounters_CollisionFrames_get, _PythonWrapper.TGRateCounters_CollisionFrames_set)
    __swig_setmethods__["ExcessiveCollisionFrames"] = _PythonWrapper.TGRateCounters_ExcessiveCollisionFrames_set
    __swig_getmethods__["ExcessiveCollisionFrames"] = _PythonWrapper.TGRateCounters_ExcessiveCollisionFrames_get
    if _newclass:
        ExcessiveCollisionFrames = _swig_property(_PythonWrapper.TGRateCounters_ExcessiveCollisionFrames_get, _PythonWrapper.TGRateCounters_ExcessiveCollisionFrames_set)
    __swig_setmethods__["OversizeAndCRC"] = _PythonWrapper.TGRateCounters_OversizeAndCRC_set
    __swig_getmethods__["OversizeAndCRC"] = _PythonWrapper.TGRateCounters_OversizeAndCRC_get
    if _newclass:
        OversizeAndCRC = _swig_property(_PythonWrapper.TGRateCounters_OversizeAndCRC_get, _PythonWrapper.TGRateCounters_OversizeAndCRC_set)
    __swig_setmethods__["UDS1"] = _PythonWrapper.TGRateCounters_UDS1_set
    __swig_getmethods__["UDS1"] = _PythonWrapper.TGRateCounters_UDS1_get
    if _newclass:
        UDS1 = _swig_property(_PythonWrapper.TGRateCounters_UDS1_get, _PythonWrapper.TGRateCounters_UDS1_set)
    __swig_setmethods__["UDS2"] = _PythonWrapper.TGRateCounters_UDS2_set
    __swig_getmethods__["UDS2"] = _PythonWrapper.TGRateCounters_UDS2_get
    if _newclass:
        UDS2 = _swig_property(_PythonWrapper.TGRateCounters_UDS2_get, _PythonWrapper.TGRateCounters_UDS2_set)
    __swig_setmethods__["UDS3"] = _PythonWrapper.TGRateCounters_UDS3_set
    __swig_getmethods__["UDS3"] = _PythonWrapper.TGRateCounters_UDS3_get
    if _newclass:
        UDS3 = _swig_property(_PythonWrapper.TGRateCounters_UDS3_get, _PythonWrapper.TGRateCounters_UDS3_set)
    __swig_setmethods__["UDS4"] = _PythonWrapper.TGRateCounters_UDS4_set
    __swig_getmethods__["UDS4"] = _PythonWrapper.TGRateCounters_UDS4_get
    if _newclass:
        UDS4 = _swig_property(_PythonWrapper.TGRateCounters_UDS4_get, _PythonWrapper.TGRateCounters_UDS4_set)
    __swig_setmethods__["ScheduledFramesSent"] = _PythonWrapper.TGRateCounters_ScheduledFramesSent_set
    __swig_getmethods__["ScheduledFramesSent"] = _PythonWrapper.TGRateCounters_ScheduledFramesSent_get
    if _newclass:
        ScheduledFramesSent = _swig_property(_PythonWrapper.TGRateCounters_ScheduledFramesSent_get, _PythonWrapper.TGRateCounters_ScheduledFramesSent_set)
    __swig_setmethods__["AsynchronousFramesSent"] = _PythonWrapper.TGRateCounters_AsynchronousFramesSent_set
    __swig_getmethods__["AsynchronousFramesSent"] = _PythonWrapper.TGRateCounters_AsynchronousFramesSent_get
    if _newclass:
        AsynchronousFramesSent = _swig_property(_PythonWrapper.TGRateCounters_AsynchronousFramesSent_get, _PythonWrapper.TGRateCounters_AsynchronousFramesSent_set)
    __swig_setmethods__["TxBits"] = _PythonWrapper.TGRateCounters_TxBits_set
    __swig_getmethods__["TxBits"] = _PythonWrapper.TGRateCounters_TxBits_get
    if _newclass:
        TxBits = _swig_property(_PythonWrapper.TGRateCounters_TxBits_get, _PythonWrapper.TGRateCounters_TxBits_set)
    __swig_setmethods__["RxBits"] = _PythonWrapper.TGRateCounters_RxBits_set
    __swig_getmethods__["RxBits"] = _PythonWrapper.TGRateCounters_RxBits_get
    if _newclass:
        RxBits = _swig_property(_PythonWrapper.TGRateCounters_RxBits_get, _PythonWrapper.TGRateCounters_RxBits_set)
    __swig_destroy__ = _PythonWrapper.delete_TGRateCounters
    __del__ = lambda self: None
TGRateCounters_swigregister = _PythonWrapper.TGRateCounters_swigregister
TGRateCounters_swigregister(TGRateCounters)

class TGPortStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortStatistics, name)
    __repr__ = _swig_repr
    __swig_getmethods__["count"] = _PythonWrapper.TGPortStatistics_count_get
    if _newclass:
        count = _swig_property(_PythonWrapper.TGPortStatistics_count_get)
    __swig_getmethods__["rate"] = _PythonWrapper.TGPortStatistics_rate_get
    if _newclass:
        rate = _swig_property(_PythonWrapper.TGPortStatistics_rate_get)

    def __init__(self, *args):
        this = _PythonWrapper.new_TGPortStatistics(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_TGPortStatistics
    __del__ = lambda self: None
TGPortStatistics_swigregister = _PythonWrapper.TGPortStatistics_swigregister
TGPortStatistics_swigregister(TGPortStatistics)

class TGPortCapturePackets(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortCapturePackets, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortCapturePackets, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGPortCapturePackets()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_getmethods__["packets"] = _PythonWrapper.TGPortCapturePackets_packets_get
    if _newclass:
        packets = _swig_property(_PythonWrapper.TGPortCapturePackets_packets_get)

    def GetCapturedPackets(self):
        return _PythonWrapper.TGPortCapturePackets_GetCapturedPackets(self)
    __swig_destroy__ = _PythonWrapper.delete_TGPortCapturePackets
    __del__ = lambda self: None
TGPortCapturePackets_swigregister = _PythonWrapper.TGPortCapturePackets_swigregister
TGPortCapturePackets_swigregister(TGPortCapturePackets)

ramDisabled = _PythonWrapper.ramDisabled
ramEnabledResolve = _PythonWrapper.ramEnabledResolve
ramEnabledLearn = _PythonWrapper.ramEnabledLearn
ramEnabledBoth = _PythonWrapper.ramEnabledBoth
ramUndefined = _PythonWrapper.ramUndefined
class RouterInterfaceIpv4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouterInterfaceIpv4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouterInterfaceIpv4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _PythonWrapper.RouterInterfaceIpv4_Address_set
    __swig_getmethods__["Address"] = _PythonWrapper.RouterInterfaceIpv4_Address_get
    if _newclass:
        Address = _swig_property(_PythonWrapper.RouterInterfaceIpv4_Address_get, _PythonWrapper.RouterInterfaceIpv4_Address_set)
    __swig_setmethods__["Gateway"] = _PythonWrapper.RouterInterfaceIpv4_Gateway_set
    __swig_getmethods__["Gateway"] = _PythonWrapper.RouterInterfaceIpv4_Gateway_get
    if _newclass:
        Gateway = _swig_property(_PythonWrapper.RouterInterfaceIpv4_Gateway_get, _PythonWrapper.RouterInterfaceIpv4_Gateway_set)

    def __init__(self):
        this = _PythonWrapper.new_RouterInterfaceIpv4()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_RouterInterfaceIpv4
    __del__ = lambda self: None
RouterInterfaceIpv4_swigregister = _PythonWrapper.RouterInterfaceIpv4_swigregister
RouterInterfaceIpv4_swigregister(RouterInterfaceIpv4)

class RouterInterfaceIpv6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouterInterfaceIpv6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouterInterfaceIpv6, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _PythonWrapper.RouterInterfaceIpv6_Address_set
    __swig_getmethods__["Address"] = _PythonWrapper.RouterInterfaceIpv6_Address_get
    if _newclass:
        Address = _swig_property(_PythonWrapper.RouterInterfaceIpv6_Address_get, _PythonWrapper.RouterInterfaceIpv6_Address_set)
    __swig_setmethods__["Gateway"] = _PythonWrapper.RouterInterfaceIpv6_Gateway_set
    __swig_getmethods__["Gateway"] = _PythonWrapper.RouterInterfaceIpv6_Gateway_get
    if _newclass:
        Gateway = _swig_property(_PythonWrapper.RouterInterfaceIpv6_Gateway_get, _PythonWrapper.RouterInterfaceIpv6_Gateway_set)

    def __init__(self):
        this = _PythonWrapper.new_RouterInterfaceIpv6()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_RouterInterfaceIpv6
    __del__ = lambda self: None
RouterInterfaceIpv6_swigregister = _PythonWrapper.RouterInterfaceIpv6_swigregister
RouterInterfaceIpv6_swigregister(RouterInterfaceIpv6)

class RouterInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouterInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouterInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_RouterInterface()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["state"] = _PythonWrapper.RouterInterface_state_set
    __swig_getmethods__["state"] = _PythonWrapper.RouterInterface_state_get
    if _newclass:
        state = _swig_property(_PythonWrapper.RouterInterface_state_get, _PythonWrapper.RouterInterface_state_set)
    __swig_setmethods__["MAC"] = _PythonWrapper.RouterInterface_MAC_set
    __swig_getmethods__["MAC"] = _PythonWrapper.RouterInterface_MAC_get
    if _newclass:
        MAC = _swig_property(_PythonWrapper.RouterInterface_MAC_get, _PythonWrapper.RouterInterface_MAC_set)
    __swig_setmethods__["IPv4Interface"] = _PythonWrapper.RouterInterface_IPv4Interface_set
    __swig_getmethods__["IPv4Interface"] = _PythonWrapper.RouterInterface_IPv4Interface_get
    if _newclass:
        IPv4Interface = _swig_property(_PythonWrapper.RouterInterface_IPv4Interface_get, _PythonWrapper.RouterInterface_IPv4Interface_set)
    __swig_setmethods__["IPv6Interface"] = _PythonWrapper.RouterInterface_IPv6Interface_set
    __swig_getmethods__["IPv6Interface"] = _PythonWrapper.RouterInterface_IPv6Interface_get
    if _newclass:
        IPv6Interface = _swig_property(_PythonWrapper.RouterInterface_IPv6Interface_get, _PythonWrapper.RouterInterface_IPv6Interface_set)

    def RemoveIpv4Interface(self):
        return _PythonWrapper.RouterInterface_RemoveIpv4Interface(self)

    def RemoveIpv6Interface(self):
        return _PythonWrapper.RouterInterface_RemoveIpv6Interface(self)
    __swig_destroy__ = _PythonWrapper.delete_RouterInterface
    __del__ = lambda self: None
RouterInterface_swigregister = _PythonWrapper.RouterInterface_swigregister
RouterInterface_swigregister(RouterInterface)

class TGPortPropertiesClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortPropertiesClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortPropertiesClient, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGPortPropertiesClient()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Init(self, devId, portId):
        return _PythonWrapper.TGPortPropertiesClient_Init(self, devId, portId)

    def DiscoverSupportedLinkModes(self):
        return _PythonWrapper.TGPortPropertiesClient_DiscoverSupportedLinkModes(self)

    def SetLoopbackState(self, state):
        return _PythonWrapper.TGPortPropertiesClient_SetLoopbackState(self, state)

    def GetLoopbackState(self):
        return _PythonWrapper.TGPortPropertiesClient_GetLoopbackState(self)

    def SetCableDissconnectState(self, state):
        return _PythonWrapper.TGPortPropertiesClient_SetCableDissconnectState(self, state)

    def GetCableDissconnectState(self):
        return _PythonWrapper.TGPortPropertiesClient_GetCableDissconnectState(self)

    def SetPortEnableStatus(self, state):
        return _PythonWrapper.TGPortPropertiesClient_SetPortEnableStatus(self, state)

    def GetPortEnableStatus(self):
        return _PythonWrapper.TGPortPropertiesClient_GetPortEnableStatus(self)

    def GetPortLinkStatus(self, waitSec=0):
        return _PythonWrapper.TGPortPropertiesClient_GetPortLinkStatus(self, waitSec)

    def SetPortPhyMode(self, mode):
        return _PythonWrapper.TGPortPropertiesClient_SetPortPhyMode(self, mode)

    def GetPortPhyMode(self):
        return _PythonWrapper.TGPortPropertiesClient_GetPortPhyMode(self)
    __swig_setmethods__["autoNeg"] = _PythonWrapper.TGPortPropertiesClient_autoNeg_set
    __swig_getmethods__["autoNeg"] = _PythonWrapper.TGPortPropertiesClient_autoNeg_get
    if _newclass:
        autoNeg = _swig_property(_PythonWrapper.TGPortPropertiesClient_autoNeg_get, _PythonWrapper.TGPortPropertiesClient_autoNeg_set)
    __swig_setmethods__["flowControl"] = _PythonWrapper.TGPortPropertiesClient_flowControl_set
    __swig_getmethods__["flowControl"] = _PythonWrapper.TGPortPropertiesClient_flowControl_get
    if _newclass:
        flowControl = _swig_property(_PythonWrapper.TGPortPropertiesClient_flowControl_get, _PythonWrapper.TGPortPropertiesClient_flowControl_set)
    __swig_setmethods__["transmitMode"] = _PythonWrapper.TGPortPropertiesClient_transmitMode_set
    __swig_getmethods__["transmitMode"] = _PythonWrapper.TGPortPropertiesClient_transmitMode_get
    if _newclass:
        transmitMode = _swig_property(_PythonWrapper.TGPortPropertiesClient_transmitMode_get, _PythonWrapper.TGPortPropertiesClient_transmitMode_set)
    __swig_destroy__ = _PythonWrapper.delete_TGPortPropertiesClient
    __del__ = lambda self: None
TGPortPropertiesClient_swigregister = _PythonWrapper.TGPortPropertiesClient_swigregister
TGPortPropertiesClient_swigregister(TGPortPropertiesClient)

class AutoNegConfig(AutoNegProperties):
    __swig_setmethods__ = {}
    for _s in [AutoNegProperties]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoNegConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [AutoNegProperties]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AutoNegConfig, name)
    __repr__ = _swig_repr

    def Init(self, impl):
        return _PythonWrapper.AutoNegConfig_Init(self, impl)

    def Apply(self):
        return _PythonWrapper.AutoNegConfig_Apply(self)

    def Read(self):
        return _PythonWrapper.AutoNegConfig_Read(self)

    def RestartAutoNegotiation(self):
        return _PythonWrapper.AutoNegConfig_RestartAutoNegotiation(self)

    def ResetMiiDefaults(self):
        return _PythonWrapper.AutoNegConfig_ResetMiiDefaults(self)

    def __init__(self):
        this = _PythonWrapper.new_AutoNegConfig()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_AutoNegConfig
    __del__ = lambda self: None
AutoNegConfig_swigregister = _PythonWrapper.AutoNegConfig_swigregister
AutoNegConfig_swigregister(AutoNegConfig)

class FlowControlConfig(FlowControlProperties):
    __swig_setmethods__ = {}
    for _s in [FlowControlProperties]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowControlConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [FlowControlProperties]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlowControlConfig, name)
    __repr__ = _swig_repr

    def Init(self, impl):
        return _PythonWrapper.FlowControlConfig_Init(self, impl)

    def Apply(self):
        return _PythonWrapper.FlowControlConfig_Apply(self)

    def Read(self):
        return _PythonWrapper.FlowControlConfig_Read(self)

    def RestartAutoNegotiation(self):
        return _PythonWrapper.FlowControlConfig_RestartAutoNegotiation(self)

    def __init__(self):
        this = _PythonWrapper.new_FlowControlConfig()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_FlowControlConfig
    __del__ = lambda self: None
FlowControlConfig_swigregister = _PythonWrapper.FlowControlConfig_swigregister
FlowControlConfig_swigregister(FlowControlConfig)

class TransmitModeConfig(TransmitModeProperties):
    __swig_setmethods__ = {}
    for _s in [TransmitModeProperties]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransmitModeConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [TransmitModeProperties]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransmitModeConfig, name)
    __repr__ = _swig_repr

    def Init(self, impl):
        return _PythonWrapper.TransmitModeConfig_Init(self, impl)

    def Apply(self):
        return _PythonWrapper.TransmitModeConfig_Apply(self)

    def Read(self):
        return _PythonWrapper.TransmitModeConfig_Read(self)

    def __init__(self):
        this = _PythonWrapper.new_TransmitModeConfig()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_TransmitModeConfig
    __del__ = lambda self: None
TransmitModeConfig_swigregister = _PythonWrapper.TransmitModeConfig_swigregister
TransmitModeConfig_swigregister(TransmitModeConfig)

MAX_UDF_NUMBER = _PythonWrapper.MAX_UDF_NUMBER
beUndefined = _PythonWrapper.beUndefined
beFalse = _PythonWrapper.beFalse
beTrue = _PythonWrapper.beTrue
sv10 = _PythonWrapper.sv10
sv100 = _PythonWrapper.sv100
sv1000 = _PythonWrapper.sv1000
sv10G = _PythonWrapper.sv10G
svUndefined = _PythonWrapper.svUndefined
HALF = _PythonWrapper.HALF
FULL = _PythonWrapper.FULL
dvUndefined = _PythonWrapper.dvUndefined
ON = _PythonWrapper.ON
OFF = _PythonWrapper.OFF
NO_LINK = _PythonWrapper.NO_LINK
LINK = _PythonWrapper.LINK
LOOPBACK = _PythonWrapper.LOOPBACK
RESTART_AUTO_NEG = _PythonWrapper.RESTART_AUTO_NEG
anENABLED = _PythonWrapper.anENABLED
anDISABLED = _PythonWrapper.anDISABLED
anUndefined = _PythonWrapper.anUndefined
pmCopper = _PythonWrapper.pmCopper
pmFiber = _PythonWrapper.pmFiber
fcNone = _PythonWrapper.fcNone
fcAssymetric = _PythonWrapper.fcAssymetric
fcSymetric = _PythonWrapper.fcSymetric
fcBoth = _PythonWrapper.fcBoth
fcUndefined = _PythonWrapper.fcUndefined
class PortConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["speed"] = _PythonWrapper.PortConfiguration_speed_set
    __swig_getmethods__["speed"] = _PythonWrapper.PortConfiguration_speed_get
    if _newclass:
        speed = _swig_property(_PythonWrapper.PortConfiguration_speed_get, _PythonWrapper.PortConfiguration_speed_set)
    __swig_setmethods__["duplex"] = _PythonWrapper.PortConfiguration_duplex_set
    __swig_getmethods__["duplex"] = _PythonWrapper.PortConfiguration_duplex_get
    if _newclass:
        duplex = _swig_property(_PythonWrapper.PortConfiguration_duplex_get, _PythonWrapper.PortConfiguration_duplex_set)
    __swig_setmethods__["flowControl"] = _PythonWrapper.PortConfiguration_flowControl_set
    __swig_getmethods__["flowControl"] = _PythonWrapper.PortConfiguration_flowControl_get
    if _newclass:
        flowControl = _swig_property(_PythonWrapper.PortConfiguration_flowControl_get, _PythonWrapper.PortConfiguration_flowControl_set)
    __swig_setmethods__["autoNegotiation"] = _PythonWrapper.PortConfiguration_autoNegotiation_set
    __swig_getmethods__["autoNegotiation"] = _PythonWrapper.PortConfiguration_autoNegotiation_get
    if _newclass:
        autoNegotiation = _swig_property(_PythonWrapper.PortConfiguration_autoNegotiation_get, _PythonWrapper.PortConfiguration_autoNegotiation_set)

    def __init__(self):
        this = _PythonWrapper.new_PortConfiguration()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_PortConfiguration
    __del__ = lambda self: None
PortConfiguration_swigregister = _PythonWrapper.PortConfiguration_swigregister
PortConfiguration_swigregister(PortConfiguration)

class AdverCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdverCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdverCapabilities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["speed"] = _PythonWrapper.AdverCapabilities_speed_set
    __swig_getmethods__["speed"] = _PythonWrapper.AdverCapabilities_speed_get
    if _newclass:
        speed = _swig_property(_PythonWrapper.AdverCapabilities_speed_get, _PythonWrapper.AdverCapabilities_speed_set)
    __swig_setmethods__["duplex"] = _PythonWrapper.AdverCapabilities_duplex_set
    __swig_getmethods__["duplex"] = _PythonWrapper.AdverCapabilities_duplex_get
    if _newclass:
        duplex = _swig_property(_PythonWrapper.AdverCapabilities_duplex_get, _PythonWrapper.AdverCapabilities_duplex_set)

    def __eq__(self, other):
        return _PythonWrapper.AdverCapabilities___eq__(self, other)

    def __init__(self):
        this = _PythonWrapper.new_AdverCapabilities()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_AdverCapabilities
    __del__ = lambda self: None
AdverCapabilities_swigregister = _PythonWrapper.AdverCapabilities_swigregister
AdverCapabilities_swigregister(AdverCapabilities)

class PortANCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortANCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortANCapabilities, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def DiscoverSupportedLinkModes(self):
        return _PythonWrapper.PortANCapabilities_DiscoverSupportedLinkModes(self)
    __swig_destroy__ = _PythonWrapper.delete_PortANCapabilities
    __del__ = lambda self: None
PortANCapabilities_swigregister = _PythonWrapper.PortANCapabilities_swigregister
PortANCapabilities_swigregister(PortANCapabilities)

class RateLimit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateLimit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RateLimit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_RateLimit()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_setmethods__["Rate"] = _PythonWrapper.RateLimit_Rate_set
    __swig_getmethods__["Rate"] = _PythonWrapper.RateLimit_Rate_get
    if _newclass:
        Rate = _swig_property(_PythonWrapper.RateLimit_Rate_get, _PythonWrapper.RateLimit_Rate_set)
    __swig_setmethods__["BucketSize"] = _PythonWrapper.RateLimit_BucketSize_set
    __swig_getmethods__["BucketSize"] = _PythonWrapper.RateLimit_BucketSize_get
    if _newclass:
        BucketSize = _swig_property(_PythonWrapper.RateLimit_BucketSize_get, _PythonWrapper.RateLimit_BucketSize_set)
    __swig_destroy__ = _PythonWrapper.delete_RateLimit
    __del__ = lambda self: None
RateLimit_swigregister = _PythonWrapper.RateLimit_swigregister
RateLimit_swigregister(RateLimit)

class Byte(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Byte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Byte, name)
    __repr__ = _swig_repr

    def __init__(self, value, format=10):
        this = _PythonWrapper.new_Byte(value, format)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Incr(self):
        return _PythonWrapper.Byte_Incr(self)

    def Decr(self):
        return _PythonWrapper.Byte_Decr(self)

    def GetValue(self):
        return _PythonWrapper.Byte_GetValue(self)
    __swig_destroy__ = _PythonWrapper.delete_Byte
    __del__ = lambda self: None
Byte_swigregister = _PythonWrapper.Byte_swigregister
Byte_swigregister(Byte)

class IByteContainerInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IByteContainerInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IByteContainerInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PythonWrapper.delete_IByteContainerInterface
    __del__ = lambda self: None
IByteContainerInterface_swigregister = _PythonWrapper.IByteContainerInterface_swigregister
IByteContainerInterface_swigregister(IByteContainerInterface)

class MacAddress(IByteContainerInterface):
    __swig_setmethods__ = {}
    for _s in [IByteContainerInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MacAddress, name, value)
    __swig_getmethods__ = {}
    for _s in [IByteContainerInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MacAddress, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_MacAddress(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def CreateMacAddress(self, *args):
        return _PythonWrapper.MacAddress_CreateMacAddress(self, *args)

    def MacAddressByte(self, idx):
        return _PythonWrapper.MacAddress_MacAddressByte(self, idx)

    def ToString(self):
        return _PythonWrapper.MacAddress_ToString(self)

    def Incr(self, idx=5):
        return _PythonWrapper.MacAddress_Incr(self, idx)

    def Decr(self, idx=5):
        return _PythonWrapper.MacAddress_Decr(self, idx)

    def SetAddress(self, address):
        return _PythonWrapper.MacAddress_SetAddress(self, address)

    def IsEmpty(self, *args):
        return _PythonWrapper.MacAddress_IsEmpty(self, *args)
    __swig_destroy__ = _PythonWrapper.delete_MacAddress
    __del__ = lambda self: None
MacAddress_swigregister = _PythonWrapper.MacAddress_swigregister
MacAddress_swigregister(MacAddress)

class IPv4Address(IByteContainerInterface):
    __swig_setmethods__ = {}
    for _s in [IByteContainerInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4Address, name, value)
    __swig_getmethods__ = {}
    for _s in [IByteContainerInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4Address, name)
    __repr__ = _swig_repr
    CLASS_A = _PythonWrapper.IPv4Address_CLASS_A
    CLASS_B = _PythonWrapper.IPv4Address_CLASS_B
    CLASS_C = _PythonWrapper.IPv4Address_CLASS_C

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4Address(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def CreateIPv4Address(self, *args):
        return _PythonWrapper.IPv4Address_CreateIPv4Address(self, *args)

    def IPv4AddressByte(self, idx):
        return _PythonWrapper.IPv4Address_IPv4AddressByte(self, idx)

    def IPv4AddressIncStep(self, step):
        return _PythonWrapper.IPv4Address_IPv4AddressIncStep(self, step)

    def IPv4AddressPostfixIncr(self, arg2):
        return _PythonWrapper.IPv4Address_IPv4AddressPostfixIncr(self, arg2)

    def IPv4AddressPrefixIncr(self):
        return _PythonWrapper.IPv4Address_IPv4AddressPrefixIncr(self)

    def IncrHost(self, *args):
        return _PythonWrapper.IPv4Address_IncrHost(self, *args)

    def DecrHost(self, *args):
        return _PythonWrapper.IPv4Address_DecrHost(self, *args)

    def IncrNet(self):
        return _PythonWrapper.IPv4Address_IncrNet(self)

    def DecrNet(self):
        return _PythonWrapper.IPv4Address_DecrNet(self)

    def ToString(self):
        return _PythonWrapper.IPv4Address_ToString(self)

    def ToStringWithPrefix(self):
        return _PythonWrapper.IPv4Address_ToStringWithPrefix(self)

    def SetAddress(self, *args):
        return _PythonWrapper.IPv4Address_SetAddress(self, *args)

    def IsEmpty(self):
        return _PythonWrapper.IPv4Address_IsEmpty(self)

    def GetPrefix(self):
        return _PythonWrapper.IPv4Address_GetPrefix(self)
    __swig_destroy__ = _PythonWrapper.delete_IPv4Address
    __del__ = lambda self: None
IPv4Address_swigregister = _PythonWrapper.IPv4Address_swigregister
IPv4Address_swigregister(IPv4Address)

class IPv6Address(IByteContainerInterface):
    __swig_setmethods__ = {}
    for _s in [IByteContainerInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6Address, name, value)
    __swig_getmethods__ = {}
    for _s in [IByteContainerInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6Address, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6Address(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def SetNewAddress(self, *args):
        return _PythonWrapper.IPv6Address_SetNewAddress(self, *args)

    def ToString(self):
        return _PythonWrapper.IPv6Address_ToString(self)

    def ToStringWithPrefix(self):
        return _PythonWrapper.IPv6Address_ToStringWithPrefix(self)

    def ToShortString(self):
        return _PythonWrapper.IPv6Address_ToShortString(self)

    def ToShortStringWithPrefix(self):
        return _PythonWrapper.IPv6Address_ToShortStringWithPrefix(self)

    def ToCEnvFormatString(self):
        return _PythonWrapper.IPv6Address_ToCEnvFormatString(self)

    def IncrAddress(self, *args):
        return _PythonWrapper.IPv6Address_IncrAddress(self, *args)

    def DecrAddress(self, *args):
        return _PythonWrapper.IPv6Address_DecrAddress(self, *args)

    def IsEmpty(self):
        return _PythonWrapper.IPv6Address_IsEmpty(self)

    def GetPrefix(self):
        return _PythonWrapper.IPv6Address_GetPrefix(self)

    def IPv6AddressByte(self, idx):
        return _PythonWrapper.IPv6Address_IPv6AddressByte(self, idx)

    def CreateIPv6Address(self, rhs):
        return _PythonWrapper.IPv6Address_CreateIPv6Address(self, rhs)

    def IPv6AddressIncStep(self, step):
        return _PythonWrapper.IPv6Address_IPv6AddressIncStep(self, step)

    def IPv6AddressPrefixIncr(self):
        return _PythonWrapper.IPv6Address_IPv6AddressPrefixIncr(self)

    def IPv6AddressPostfixIncr(self, arg2):
        return _PythonWrapper.IPv6Address_IPv6AddressPostfixIncr(self, arg2)
    __swig_destroy__ = _PythonWrapper.delete_IPv6Address
    __del__ = lambda self: None
IPv6Address_swigregister = _PythonWrapper.IPv6Address_swigregister
IPv6Address_swigregister(IPv6Address)

class PacketInfoUpdate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacketInfoUpdate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PacketInfoUpdate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FieldType"] = _PythonWrapper.PacketInfoUpdate_FieldType_set
    __swig_getmethods__["FieldType"] = _PythonWrapper.PacketInfoUpdate_FieldType_get
    if _newclass:
        FieldType = _swig_property(_PythonWrapper.PacketInfoUpdate_FieldType_get, _PythonWrapper.PacketInfoUpdate_FieldType_set)
    __swig_setmethods__["FieldName"] = _PythonWrapper.PacketInfoUpdate_FieldName_set
    __swig_getmethods__["FieldName"] = _PythonWrapper.PacketInfoUpdate_FieldName_get
    if _newclass:
        FieldName = _swig_property(_PythonWrapper.PacketInfoUpdate_FieldName_get, _PythonWrapper.PacketInfoUpdate_FieldName_set)
    __swig_setmethods__["FieldValue"] = _PythonWrapper.PacketInfoUpdate_FieldValue_set
    __swig_getmethods__["FieldValue"] = _PythonWrapper.PacketInfoUpdate_FieldValue_get
    if _newclass:
        FieldValue = _swig_property(_PythonWrapper.PacketInfoUpdate_FieldValue_get, _PythonWrapper.PacketInfoUpdate_FieldValue_set)

    def __init__(self):
        this = _PythonWrapper.new_PacketInfoUpdate()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_PacketInfoUpdate
    __del__ = lambda self: None
PacketInfoUpdate_swigregister = _PythonWrapper.PacketInfoUpdate_swigregister
PacketInfoUpdate_swigregister(PacketInfoUpdate)

class PacketInfoUpdateDataReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacketInfoUpdateDataReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PacketInfoUpdateDataReader, name)
    __repr__ = _swig_repr

    def __init__(self, path):
        this = _PythonWrapper.new_PacketInfoUpdateDataReader(path)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_PacketInfoUpdateDataReader
    __del__ = lambda self: None
PacketInfoUpdateDataReader_swigregister = _PythonWrapper.PacketInfoUpdateDataReader_swigregister
PacketInfoUpdateDataReader_swigregister(PacketInfoUpdateDataReader)

class PacketInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacketInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PacketInfo, name)
    __repr__ = _swig_repr

    def __init__(self, path):
        this = _PythonWrapper.new_PacketInfo(path)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Update(self, *args):
        return _PythonWrapper.PacketInfo_Update(self, *args)

    def ResetPacket(self):
        return _PythonWrapper.PacketInfo_ResetPacket(self)

    def GetValue(self, fieldType, fieldName):
        return _PythonWrapper.PacketInfo_GetValue(self, fieldType, fieldName)

    def GetDefaultValue(self, fieldType, fieldName):
        return _PythonWrapper.PacketInfo_GetDefaultValue(self, fieldType, fieldName)

    def ResetPacketField(self, fieldType, fieldName):
        return _PythonWrapper.PacketInfo_ResetPacketField(self, fieldType, fieldName)

    def GetPacket(self, resetAutomaticFields=True):
        return _PythonWrapper.PacketInfo_GetPacket(self, resetAutomaticFields)
    __swig_destroy__ = _PythonWrapper.delete_PacketInfo
    __del__ = lambda self: None
PacketInfo_swigregister = _PythonWrapper.PacketInfo_swigregister
PacketInfo_swigregister(PacketInfo)

class NonCopyable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonCopyable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NonCopyable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
NonCopyable_swigregister = _PythonWrapper.NonCopyable_swigregister
NonCopyable_swigregister(NonCopyable)

class TGPortReceiveModeClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortReceiveModeClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortReceiveModeClient, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGPortReceiveModeClient()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Init(self, devId, portId):
        return _PythonWrapper.TGPortReceiveModeClient_Init(self, devId, portId)
    __swig_setmethods__["capture"] = _PythonWrapper.TGPortReceiveModeClient_capture_set
    __swig_getmethods__["capture"] = _PythonWrapper.TGPortReceiveModeClient_capture_get
    if _newclass:
        capture = _swig_property(_PythonWrapper.TGPortReceiveModeClient_capture_get, _PythonWrapper.TGPortReceiveModeClient_capture_set)
    __swig_setmethods__["packetGroupSequence"] = _PythonWrapper.TGPortReceiveModeClient_packetGroupSequence_set
    __swig_getmethods__["packetGroupSequence"] = _PythonWrapper.TGPortReceiveModeClient_packetGroupSequence_get
    if _newclass:
        packetGroupSequence = _swig_property(_PythonWrapper.TGPortReceiveModeClient_packetGroupSequence_get, _PythonWrapper.TGPortReceiveModeClient_packetGroupSequence_set)
    __swig_setmethods__["dataIntegrity"] = _PythonWrapper.TGPortReceiveModeClient_dataIntegrity_set
    __swig_getmethods__["dataIntegrity"] = _PythonWrapper.TGPortReceiveModeClient_dataIntegrity_get
    if _newclass:
        dataIntegrity = _swig_property(_PythonWrapper.TGPortReceiveModeClient_dataIntegrity_get, _PythonWrapper.TGPortReceiveModeClient_dataIntegrity_set)
    __swig_setmethods__["automaticInstrumentation"] = _PythonWrapper.TGPortReceiveModeClient_automaticInstrumentation_set
    __swig_getmethods__["automaticInstrumentation"] = _PythonWrapper.TGPortReceiveModeClient_automaticInstrumentation_get
    if _newclass:
        automaticInstrumentation = _swig_property(_PythonWrapper.TGPortReceiveModeClient_automaticInstrumentation_get, _PythonWrapper.TGPortReceiveModeClient_automaticInstrumentation_set)

    def Apply(self):
        return _PythonWrapper.TGPortReceiveModeClient_Apply(self)

    def Read(self):
        return _PythonWrapper.TGPortReceiveModeClient_Read(self)

    def Clear(self):
        return _PythonWrapper.TGPortReceiveModeClient_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_TGPortReceiveModeClient
    __del__ = lambda self: None
TGPortReceiveModeClient_swigregister = _PythonWrapper.TGPortReceiveModeClient_swigregister
TGPortReceiveModeClient_swigregister(TGPortReceiveModeClient)

class TGPortTriggersClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortTriggersClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortTriggersClient, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGPortTriggersClient()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Init(self, devId, portId):
        return _PythonWrapper.TGPortTriggersClient_Init(self, devId, portId)
    __swig_setmethods__["commonProperties"] = _PythonWrapper.TGPortTriggersClient_commonProperties_set
    __swig_getmethods__["commonProperties"] = _PythonWrapper.TGPortTriggersClient_commonProperties_get
    if _newclass:
        commonProperties = _swig_property(_PythonWrapper.TGPortTriggersClient_commonProperties_get, _PythonWrapper.TGPortTriggersClient_commonProperties_set)
    __swig_setmethods__["trigger1"] = _PythonWrapper.TGPortTriggersClient_trigger1_set
    __swig_getmethods__["trigger1"] = _PythonWrapper.TGPortTriggersClient_trigger1_get
    if _newclass:
        trigger1 = _swig_property(_PythonWrapper.TGPortTriggersClient_trigger1_get, _PythonWrapper.TGPortTriggersClient_trigger1_set)
    __swig_setmethods__["trigger2"] = _PythonWrapper.TGPortTriggersClient_trigger2_set
    __swig_getmethods__["trigger2"] = _PythonWrapper.TGPortTriggersClient_trigger2_get
    if _newclass:
        trigger2 = _swig_property(_PythonWrapper.TGPortTriggersClient_trigger2_get, _PythonWrapper.TGPortTriggersClient_trigger2_set)
    __swig_setmethods__["trigger3"] = _PythonWrapper.TGPortTriggersClient_trigger3_set
    __swig_getmethods__["trigger3"] = _PythonWrapper.TGPortTriggersClient_trigger3_get
    if _newclass:
        trigger3 = _swig_property(_PythonWrapper.TGPortTriggersClient_trigger3_get, _PythonWrapper.TGPortTriggersClient_trigger3_set)
    __swig_setmethods__["trigger4"] = _PythonWrapper.TGPortTriggersClient_trigger4_set
    __swig_getmethods__["trigger4"] = _PythonWrapper.TGPortTriggersClient_trigger4_get
    if _newclass:
        trigger4 = _swig_property(_PythonWrapper.TGPortTriggersClient_trigger4_get, _PythonWrapper.TGPortTriggersClient_trigger4_set)

    def Clear(self):
        return _PythonWrapper.TGPortTriggersClient_Clear(self)

    def Read(self):
        return _PythonWrapper.TGPortTriggersClient_Read(self)

    def Apply(self):
        return _PythonWrapper.TGPortTriggersClient_Apply(self)

    def ResetToDefault(self):
        return _PythonWrapper.TGPortTriggersClient_ResetToDefault(self)
    __swig_destroy__ = _PythonWrapper.delete_TGPortTriggersClient
    __del__ = lambda self: None
TGPortTriggersClient_swigregister = _PythonWrapper.TGPortTriggersClient_swigregister
TGPortTriggersClient_swigregister(TGPortTriggersClient)

class TGPortStreamsClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortStreamsClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortStreamsClient, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGPortStreamsClient()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Init(self, devId, portId):
        return _PythonWrapper.TGPortStreamsClient_Init(self, devId, portId)

    def Get(self, idx):
        return _PythonWrapper.TGPortStreamsClient_Get(self, idx)

    def NewStream(self):
        return _PythonWrapper.TGPortStreamsClient_NewStream(self)

    def DeleteStream(self, streamId):
        return _PythonWrapper.TGPortStreamsClient_DeleteStream(self, streamId)

    def Clear(self):
        return _PythonWrapper.TGPortStreamsClient_Clear(self)

    def Apply(self):
        return _PythonWrapper.TGPortStreamsClient_Apply(self)

    def Read(self):
        return _PythonWrapper.TGPortStreamsClient_Read(self)

    def IsStreamExist(self, idx):
        return _PythonWrapper.TGPortStreamsClient_IsStreamExist(self, idx)

    def GetStreamsStatistics(self):
        return _PythonWrapper.TGPortStreamsClient_GetStreamsStatistics(self)

    def ClearStreamsStatistics(self):
        return _PythonWrapper.TGPortStreamsClient_ClearStreamsStatistics(self)
    __swig_destroy__ = _PythonWrapper.delete_TGPortStreamsClient
    __del__ = lambda self: None
TGPortStreamsClient_swigregister = _PythonWrapper.TGPortStreamsClient_swigregister
TGPortStreamsClient_swigregister(TGPortStreamsClient)

class TGPortRouterClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortRouterClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortRouterClient, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_TGPortRouterClient()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Init(self, devId, portId):
        return _PythonWrapper.TGPortRouterClient_Init(self, devId, portId)

    def Get(self, id):
        return _PythonWrapper.TGPortRouterClient_Get(self, id)
    __swig_setmethods__["ArpMode"] = _PythonWrapper.TGPortRouterClient_ArpMode_set
    __swig_getmethods__["ArpMode"] = _PythonWrapper.TGPortRouterClient_ArpMode_get
    if _newclass:
        ArpMode = _swig_property(_PythonWrapper.TGPortRouterClient_ArpMode_get, _PythonWrapper.TGPortRouterClient_ArpMode_set)
    __swig_setmethods__["IPv4PingMode"] = _PythonWrapper.TGPortRouterClient_IPv4PingMode_set
    __swig_getmethods__["IPv4PingMode"] = _PythonWrapper.TGPortRouterClient_IPv4PingMode_get
    if _newclass:
        IPv4PingMode = _swig_property(_PythonWrapper.TGPortRouterClient_IPv4PingMode_get, _PythonWrapper.TGPortRouterClient_IPv4PingMode_set)

    def AddInterface(self):
        return _PythonWrapper.TGPortRouterClient_AddInterface(self)

    def RemoveInterface(self, id):
        return _PythonWrapper.TGPortRouterClient_RemoveInterface(self, id)

    def IsInterfaceExists(self, id):
        return _PythonWrapper.TGPortRouterClient_IsInterfaceExists(self, id)

    def Apply(self):
        return _PythonWrapper.TGPortRouterClient_Apply(self)

    def Read(self):
        return _PythonWrapper.TGPortRouterClient_Read(self)

    def Clear(self):
        return _PythonWrapper.TGPortRouterClient_Clear(self)
    __swig_destroy__ = _PythonWrapper.delete_TGPortRouterClient
    __del__ = lambda self: None
TGPortRouterClient_swigregister = _PythonWrapper.TGPortRouterClient_swigregister
TGPortRouterClient_swigregister(TGPortRouterClient)

class TGStreamClient(NonCopyable):
    __swig_setmethods__ = {}
    for _s in [NonCopyable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGStreamClient, name, value)
    __swig_getmethods__ = {}
    for _s in [NonCopyable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TGStreamClient, name)
    __repr__ = _swig_repr

    def __init__(self, devId, portId):
        this = _PythonWrapper.new_TGStreamClient(devId, portId)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_TGStreamClient
    __del__ = lambda self: None

    def Set(self, config, isLastEntry):
        return _PythonWrapper.TGStreamClient_Set(self, config, isLastEntry)

    def Get(self, config):
        return _PythonWrapper.TGStreamClient_Get(self, config)

    def Delete(self, streamId):
        return _PythonWrapper.TGStreamClient_Delete(self, streamId)
    __swig_setmethods__["Name"] = _PythonWrapper.TGStreamClient_Name_set
    __swig_getmethods__["Name"] = _PythonWrapper.TGStreamClient_Name_get
    if _newclass:
        Name = _swig_property(_PythonWrapper.TGStreamClient_Name_get, _PythonWrapper.TGStreamClient_Name_set)
    __swig_setmethods__["FrameData"] = _PythonWrapper.TGStreamClient_FrameData_set
    __swig_getmethods__["FrameData"] = _PythonWrapper.TGStreamClient_FrameData_get
    if _newclass:
        FrameData = _swig_property(_PythonWrapper.TGStreamClient_FrameData_get, _PythonWrapper.TGStreamClient_FrameData_set)
    __swig_setmethods__["Control"] = _PythonWrapper.TGStreamClient_Control_set
    __swig_getmethods__["Control"] = _PythonWrapper.TGStreamClient_Control_get
    if _newclass:
        Control = _swig_property(_PythonWrapper.TGStreamClient_Control_get, _PythonWrapper.TGStreamClient_Control_set)
    __swig_setmethods__["TxStatistics"] = _PythonWrapper.TGStreamClient_TxStatistics_set
    __swig_getmethods__["TxStatistics"] = _PythonWrapper.TGStreamClient_TxStatistics_get
    if _newclass:
        TxStatistics = _swig_property(_PythonWrapper.TGStreamClient_TxStatistics_get, _PythonWrapper.TGStreamClient_TxStatistics_set)
TGStreamClient_swigregister = _PythonWrapper.TGStreamClient_swigregister
TGStreamClient_swigregister(TGStreamClient)

class PGIDStatisticsTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PGIDStatisticsTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PGIDStatisticsTable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get(self, idx):
        return _PythonWrapper.PGIDStatisticsTable_Get(self, idx)

    def GetPgidStatistics(self, groups):
        return _PythonWrapper.PGIDStatisticsTable_GetPgidStatistics(self, groups)

    def ClearPgidStatistics(self):
        return _PythonWrapper.PGIDStatisticsTable_ClearPgidStatistics(self)

    def StartCollectingPgidMetrics(self):
        return _PythonWrapper.PGIDStatisticsTable_StartCollectingPgidMetrics(self)

    def StopCollectingPgidMetrics(self):
        return _PythonWrapper.PGIDStatisticsTable_StopCollectingPgidMetrics(self)

    def IsGroupExist(self, pgid):
        return _PythonWrapper.PGIDStatisticsTable_IsGroupExist(self, pgid)
    __swig_destroy__ = _PythonWrapper.delete_PGIDStatisticsTable
    __del__ = lambda self: None
PGIDStatisticsTable_swigregister = _PythonWrapper.PGIDStatisticsTable_swigregister
PGIDStatisticsTable_swigregister(PGIDStatisticsTable)

class TGPortClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortClient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ResetPortFactoryDefaults(self):
        return _PythonWrapper.TGPortClient_ResetPortFactoryDefaults(self)

    def StartTx(self, waitTillTxDone=True):
        return _PythonWrapper.TGPortClient_StartTx(self, waitTillTxDone)

    def StopTx(self):
        return _PythonWrapper.TGPortClient_StopTx(self)

    def WaitForLinkUp(self, timeOutSeconds=20):
        return _PythonWrapper.TGPortClient_WaitForLinkUp(self, timeOutSeconds)

    def GetCounters(self):
        return _PythonWrapper.TGPortClient_GetCounters(self)

    def ClearCounters(self):
        return _PythonWrapper.TGPortClient_ClearCounters(self)

    def AddToGroup(self):
        return _PythonWrapper.TGPortClient_AddToGroup(self)

    def RemoveFromGroup(self):
        return _PythonWrapper.TGPortClient_RemoveFromGroup(self)

    def StartCapture(self):
        return _PythonWrapper.TGPortClient_StartCapture(self)

    def StopCapture(self):
        return _PythonWrapper.TGPortClient_StopCapture(self)
    __swig_setmethods__["Triggers"] = _PythonWrapper.TGPortClient_Triggers_set
    __swig_getmethods__["Triggers"] = _PythonWrapper.TGPortClient_Triggers_get
    if _newclass:
        Triggers = _swig_property(_PythonWrapper.TGPortClient_Triggers_get, _PythonWrapper.TGPortClient_Triggers_set)
    __swig_setmethods__["Properties"] = _PythonWrapper.TGPortClient_Properties_set
    __swig_getmethods__["Properties"] = _PythonWrapper.TGPortClient_Properties_get
    if _newclass:
        Properties = _swig_property(_PythonWrapper.TGPortClient_Properties_get, _PythonWrapper.TGPortClient_Properties_set)
    __swig_setmethods__["ReceiveMode"] = _PythonWrapper.TGPortClient_ReceiveMode_set
    __swig_getmethods__["ReceiveMode"] = _PythonWrapper.TGPortClient_ReceiveMode_get
    if _newclass:
        ReceiveMode = _swig_property(_PythonWrapper.TGPortClient_ReceiveMode_get, _PythonWrapper.TGPortClient_ReceiveMode_set)
    __swig_setmethods__["Streams"] = _PythonWrapper.TGPortClient_Streams_set
    __swig_getmethods__["Streams"] = _PythonWrapper.TGPortClient_Streams_get
    if _newclass:
        Streams = _swig_property(_PythonWrapper.TGPortClient_Streams_get, _PythonWrapper.TGPortClient_Streams_set)
    __swig_setmethods__["Router"] = _PythonWrapper.TGPortClient_Router_set
    __swig_getmethods__["Router"] = _PythonWrapper.TGPortClient_Router_get
    if _newclass:
        Router = _swig_property(_PythonWrapper.TGPortClient_Router_get, _PythonWrapper.TGPortClient_Router_set)
    __swig_getmethods__["Statistic"] = _PythonWrapper.TGPortClient_Statistic_get
    if _newclass:
        Statistic = _swig_property(_PythonWrapper.TGPortClient_Statistic_get)
    __swig_setmethods__["PGIDStats"] = _PythonWrapper.TGPortClient_PGIDStats_set
    __swig_getmethods__["PGIDStats"] = _PythonWrapper.TGPortClient_PGIDStats_get
    if _newclass:
        PGIDStats = _swig_property(_PythonWrapper.TGPortClient_PGIDStats_get, _PythonWrapper.TGPortClient_PGIDStats_set)
    __swig_getmethods__["CaptureResult"] = _PythonWrapper.TGPortClient_CaptureResult_get
    if _newclass:
        CaptureResult = _swig_property(_PythonWrapper.TGPortClient_CaptureResult_get)
    __swig_destroy__ = _PythonWrapper.delete_TGPortClient
    __del__ = lambda self: None
TGPortClient_swigregister = _PythonWrapper.TGPortClient_swigregister
TGPortClient_swigregister(TGPortClient)

class TGPortManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortManager, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PythonWrapper.TGPortManager_Create)
    else:
        Create = _PythonWrapper.TGPortManager_Create

    def __init__(self):
        this = _PythonWrapper.new_TGPortManager()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_TGPortManager
    __del__ = lambda self: None
TGPortManager_swigregister = _PythonWrapper.TGPortManager_swigregister
TGPortManager_swigregister(TGPortManager)

def TGPortManager_Create(devId, portId):
    return _PythonWrapper.TGPortManager_Create(devId, portId)
TGPortManager_Create = _PythonWrapper.TGPortManager_Create

class TGPortsGroupClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TGPortsGroupClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGPortsGroupClient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        StartTransmit = staticmethod(_PythonWrapper.TGPortsGroupClient_StartTransmit)
    else:
        StartTransmit = _PythonWrapper.TGPortsGroupClient_StartTransmit
    if _newclass:
        StopTransmit = staticmethod(_PythonWrapper.TGPortsGroupClient_StopTransmit)
    else:
        StopTransmit = _PythonWrapper.TGPortsGroupClient_StopTransmit
    if _newclass:
        AddPort = staticmethod(_PythonWrapper.TGPortsGroupClient_AddPort)
    else:
        AddPort = _PythonWrapper.TGPortsGroupClient_AddPort
    if _newclass:
        RemovePort = staticmethod(_PythonWrapper.TGPortsGroupClient_RemovePort)
    else:
        RemovePort = _PythonWrapper.TGPortsGroupClient_RemovePort
    __swig_destroy__ = _PythonWrapper.delete_TGPortsGroupClient
    __del__ = lambda self: None
TGPortsGroupClient_swigregister = _PythonWrapper.TGPortsGroupClient_swigregister
TGPortsGroupClient_swigregister(TGPortsGroupClient)

def TGPortsGroupClient_StartTransmit():
    return _PythonWrapper.TGPortsGroupClient_StartTransmit()
TGPortsGroupClient_StartTransmit = _PythonWrapper.TGPortsGroupClient_StartTransmit

def TGPortsGroupClient_StopTransmit():
    return _PythonWrapper.TGPortsGroupClient_StopTransmit()
TGPortsGroupClient_StopTransmit = _PythonWrapper.TGPortsGroupClient_StopTransmit

def TGPortsGroupClient_AddPort(port):
    return _PythonWrapper.TGPortsGroupClient_AddPort(port)
TGPortsGroupClient_AddPort = _PythonWrapper.TGPortsGroupClient_AddPort

def TGPortsGroupClient_RemovePort(port):
    return _PythonWrapper.TGPortsGroupClient_RemovePort(port)
TGPortsGroupClient_RemovePort = _PythonWrapper.TGPortsGroupClient_RemovePort

class CommonManagement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommonManagement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommonManagement, name)
    __repr__ = _swig_repr
    if _newclass:
        Initialize = staticmethod(_PythonWrapper.CommonManagement_Initialize)
    else:
        Initialize = _PythonWrapper.CommonManagement_Initialize
    if _newclass:
        Connect = staticmethod(_PythonWrapper.CommonManagement_Connect)
    else:
        Connect = _PythonWrapper.CommonManagement_Connect
    if _newclass:
        Disconnect = staticmethod(_PythonWrapper.CommonManagement_Disconnect)
    else:
        Disconnect = _PythonWrapper.CommonManagement_Disconnect
    if _newclass:
        SendTerminalString = staticmethod(_PythonWrapper.CommonManagement_SendTerminalString)
    else:
        SendTerminalString = _PythonWrapper.CommonManagement_SendTerminalString
    if _newclass:
        GetSerialBuffer = staticmethod(_PythonWrapper.CommonManagement_GetSerialBuffer)
    else:
        GetSerialBuffer = _PythonWrapper.CommonManagement_GetSerialBuffer
    if _newclass:
        SendCommandAndGetBuffer = staticmethod(_PythonWrapper.CommonManagement_SendCommandAndGetBuffer)
    else:
        SendCommandAndGetBuffer = _PythonWrapper.CommonManagement_SendCommandAndGetBuffer
    if _newclass:
        GetSerialBufferTillPrompt = staticmethod(_PythonWrapper.CommonManagement_GetSerialBufferTillPrompt)
    else:
        GetSerialBufferTillPrompt = _PythonWrapper.CommonManagement_GetSerialBufferTillPrompt
    if _newclass:
        GetSerialBufferTillIdle = staticmethod(_PythonWrapper.CommonManagement_GetSerialBufferTillIdle)
    else:
        GetSerialBufferTillIdle = _PythonWrapper.CommonManagement_GetSerialBufferTillIdle
    if _newclass:
        SetShellPrompt = staticmethod(_PythonWrapper.CommonManagement_SetShellPrompt)
    else:
        SetShellPrompt = _PythonWrapper.CommonManagement_SetShellPrompt
    __swig_setmethods__["m_UserName"] = _PythonWrapper.CommonManagement_m_UserName_set
    __swig_getmethods__["m_UserName"] = _PythonWrapper.CommonManagement_m_UserName_get
    if _newclass:
        m_UserName = _swig_property(_PythonWrapper.CommonManagement_m_UserName_get, _PythonWrapper.CommonManagement_m_UserName_set)
    __swig_setmethods__["m_Password"] = _PythonWrapper.CommonManagement_m_Password_set
    __swig_getmethods__["m_Password"] = _PythonWrapper.CommonManagement_m_Password_get
    if _newclass:
        m_Password = _swig_property(_PythonWrapper.CommonManagement_m_Password_get, _PythonWrapper.CommonManagement_m_Password_set)
    __swig_setmethods__["m_LoginPrompt"] = _PythonWrapper.CommonManagement_m_LoginPrompt_set
    __swig_getmethods__["m_LoginPrompt"] = _PythonWrapper.CommonManagement_m_LoginPrompt_get
    if _newclass:
        m_LoginPrompt = _swig_property(_PythonWrapper.CommonManagement_m_LoginPrompt_get, _PythonWrapper.CommonManagement_m_LoginPrompt_set)
    __swig_setmethods__["m_PasswordPrompt"] = _PythonWrapper.CommonManagement_m_PasswordPrompt_set
    __swig_getmethods__["m_PasswordPrompt"] = _PythonWrapper.CommonManagement_m_PasswordPrompt_get
    if _newclass:
        m_PasswordPrompt = _swig_property(_PythonWrapper.CommonManagement_m_PasswordPrompt_get, _PythonWrapper.CommonManagement_m_PasswordPrompt_set)
    __swig_setmethods__["m_ShellPrompt"] = _PythonWrapper.CommonManagement_m_ShellPrompt_set
    __swig_getmethods__["m_ShellPrompt"] = _PythonWrapper.CommonManagement_m_ShellPrompt_get
    if _newclass:
        m_ShellPrompt = _swig_property(_PythonWrapper.CommonManagement_m_ShellPrompt_get, _PythonWrapper.CommonManagement_m_ShellPrompt_set)
    __swig_setmethods__["m_UbootPrompt"] = _PythonWrapper.CommonManagement_m_UbootPrompt_set
    __swig_getmethods__["m_UbootPrompt"] = _PythonWrapper.CommonManagement_m_UbootPrompt_get
    if _newclass:
        m_UbootPrompt = _swig_property(_PythonWrapper.CommonManagement_m_UbootPrompt_get, _PythonWrapper.CommonManagement_m_UbootPrompt_set)
    __swig_setmethods__["m_LoginTimeOutMinutes"] = _PythonWrapper.CommonManagement_m_LoginTimeOutMinutes_set
    __swig_getmethods__["m_LoginTimeOutMinutes"] = _PythonWrapper.CommonManagement_m_LoginTimeOutMinutes_get
    if _newclass:
        m_LoginTimeOutMinutes = _swig_property(_PythonWrapper.CommonManagement_m_LoginTimeOutMinutes_get, _PythonWrapper.CommonManagement_m_LoginTimeOutMinutes_set)
    __swig_setmethods__["m_RebootTimeOutMinutes"] = _PythonWrapper.CommonManagement_m_RebootTimeOutMinutes_set
    __swig_getmethods__["m_RebootTimeOutMinutes"] = _PythonWrapper.CommonManagement_m_RebootTimeOutMinutes_get
    if _newclass:
        m_RebootTimeOutMinutes = _swig_property(_PythonWrapper.CommonManagement_m_RebootTimeOutMinutes_get, _PythonWrapper.CommonManagement_m_RebootTimeOutMinutes_set)

    def __init__(self):
        this = _PythonWrapper.new_CommonManagement()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_CommonManagement
    __del__ = lambda self: None
CommonManagement_swigregister = _PythonWrapper.CommonManagement_swigregister
CommonManagement_swigregister(CommonManagement)

def CommonManagement_Initialize():
    return _PythonWrapper.CommonManagement_Initialize()
CommonManagement_Initialize = _PythonWrapper.CommonManagement_Initialize

def CommonManagement_Connect(*args):
    return _PythonWrapper.CommonManagement_Connect(*args)
CommonManagement_Connect = _PythonWrapper.CommonManagement_Connect

def CommonManagement_Disconnect():
    return _PythonWrapper.CommonManagement_Disconnect()
CommonManagement_Disconnect = _PythonWrapper.CommonManagement_Disconnect

def CommonManagement_SendTerminalString(command, waitForPrompt=True):
    return _PythonWrapper.CommonManagement_SendTerminalString(command, waitForPrompt)
CommonManagement_SendTerminalString = _PythonWrapper.CommonManagement_SendTerminalString

def CommonManagement_GetSerialBuffer(milisec):
    return _PythonWrapper.CommonManagement_GetSerialBuffer(milisec)
CommonManagement_GetSerialBuffer = _PythonWrapper.CommonManagement_GetSerialBuffer

def CommonManagement_SendCommandAndGetBuffer(command, timeOutSeconds=10):
    return _PythonWrapper.CommonManagement_SendCommandAndGetBuffer(command, timeOutSeconds)
CommonManagement_SendCommandAndGetBuffer = _PythonWrapper.CommonManagement_SendCommandAndGetBuffer

def CommonManagement_GetSerialBufferTillPrompt(timeOutSeconds=10):
    return _PythonWrapper.CommonManagement_GetSerialBufferTillPrompt(timeOutSeconds)
CommonManagement_GetSerialBufferTillPrompt = _PythonWrapper.CommonManagement_GetSerialBufferTillPrompt

def CommonManagement_GetSerialBufferTillIdle(idleTimeMili=250, timeOutSec=5):
    return _PythonWrapper.CommonManagement_GetSerialBufferTillIdle(idleTimeMili, timeOutSec)
CommonManagement_GetSerialBufferTillIdle = _PythonWrapper.CommonManagement_GetSerialBufferTillIdle

def CommonManagement_SetShellPrompt(shellPrompt):
    return _PythonWrapper.CommonManagement_SetShellPrompt(shellPrompt)
CommonManagement_SetShellPrompt = _PythonWrapper.CommonManagement_SetShellPrompt

class ARPHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARPHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARPHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hardwareType"] = _PythonWrapper.ARPHeader_hardwareType_set
    __swig_getmethods__["hardwareType"] = _PythonWrapper.ARPHeader_hardwareType_get
    if _newclass:
        hardwareType = _swig_property(_PythonWrapper.ARPHeader_hardwareType_get, _PythonWrapper.ARPHeader_hardwareType_set)
    __swig_setmethods__["protocolType"] = _PythonWrapper.ARPHeader_protocolType_set
    __swig_getmethods__["protocolType"] = _PythonWrapper.ARPHeader_protocolType_get
    if _newclass:
        protocolType = _swig_property(_PythonWrapper.ARPHeader_protocolType_get, _PythonWrapper.ARPHeader_protocolType_set)
    __swig_setmethods__["hwAddressLength"] = _PythonWrapper.ARPHeader_hwAddressLength_set
    __swig_getmethods__["hwAddressLength"] = _PythonWrapper.ARPHeader_hwAddressLength_get
    if _newclass:
        hwAddressLength = _swig_property(_PythonWrapper.ARPHeader_hwAddressLength_get, _PythonWrapper.ARPHeader_hwAddressLength_set)
    __swig_setmethods__["protocolAddressLength"] = _PythonWrapper.ARPHeader_protocolAddressLength_set
    __swig_getmethods__["protocolAddressLength"] = _PythonWrapper.ARPHeader_protocolAddressLength_get
    if _newclass:
        protocolAddressLength = _swig_property(_PythonWrapper.ARPHeader_protocolAddressLength_get, _PythonWrapper.ARPHeader_protocolAddressLength_set)
    __swig_setmethods__["opcode"] = _PythonWrapper.ARPHeader_opcode_set
    __swig_getmethods__["opcode"] = _PythonWrapper.ARPHeader_opcode_get
    if _newclass:
        opcode = _swig_property(_PythonWrapper.ARPHeader_opcode_get, _PythonWrapper.ARPHeader_opcode_set)
    __swig_setmethods__["sourceHwAddress"] = _PythonWrapper.ARPHeader_sourceHwAddress_set
    __swig_getmethods__["sourceHwAddress"] = _PythonWrapper.ARPHeader_sourceHwAddress_get
    if _newclass:
        sourceHwAddress = _swig_property(_PythonWrapper.ARPHeader_sourceHwAddress_get, _PythonWrapper.ARPHeader_sourceHwAddress_set)
    __swig_setmethods__["sourceProtocolAddress"] = _PythonWrapper.ARPHeader_sourceProtocolAddress_set
    __swig_getmethods__["sourceProtocolAddress"] = _PythonWrapper.ARPHeader_sourceProtocolAddress_get
    if _newclass:
        sourceProtocolAddress = _swig_property(_PythonWrapper.ARPHeader_sourceProtocolAddress_get, _PythonWrapper.ARPHeader_sourceProtocolAddress_set)
    __swig_setmethods__["destHwAddress"] = _PythonWrapper.ARPHeader_destHwAddress_set
    __swig_getmethods__["destHwAddress"] = _PythonWrapper.ARPHeader_destHwAddress_get
    if _newclass:
        destHwAddress = _swig_property(_PythonWrapper.ARPHeader_destHwAddress_get, _PythonWrapper.ARPHeader_destHwAddress_set)
    __swig_setmethods__["destProtocolAddress"] = _PythonWrapper.ARPHeader_destProtocolAddress_set
    __swig_getmethods__["destProtocolAddress"] = _PythonWrapper.ARPHeader_destProtocolAddress_get
    if _newclass:
        destProtocolAddress = _swig_property(_PythonWrapper.ARPHeader_destProtocolAddress_get, _PythonWrapper.ARPHeader_destProtocolAddress_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_ARPHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.ARPHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_ARPHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.ARPHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.ARPHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.ARPHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.ARPHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.ARPHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.ARPHeader_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.ARPHeader_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.ARPHeader_GetElementToolTip(self)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.ARPHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.ARPHeader_GetElementSize(self)
ARPHeader_swigregister = _PythonWrapper.ARPHeader_swigregister
ARPHeader_swigregister(ARPHeader)

class BFD_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BFD_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BFD_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Version"] = _PythonWrapper.BFD_Header_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.BFD_Header_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.BFD_Header_Version_get, _PythonWrapper.BFD_Header_Version_set)
    __swig_setmethods__["Diag"] = _PythonWrapper.BFD_Header_Diag_set
    __swig_getmethods__["Diag"] = _PythonWrapper.BFD_Header_Diag_get
    if _newclass:
        Diag = _swig_property(_PythonWrapper.BFD_Header_Diag_get, _PythonWrapper.BFD_Header_Diag_set)
    __swig_setmethods__["State"] = _PythonWrapper.BFD_Header_State_set
    __swig_getmethods__["State"] = _PythonWrapper.BFD_Header_State_get
    if _newclass:
        State = _swig_property(_PythonWrapper.BFD_Header_State_get, _PythonWrapper.BFD_Header_State_set)
    __swig_setmethods__["P"] = _PythonWrapper.BFD_Header_P_set
    __swig_getmethods__["P"] = _PythonWrapper.BFD_Header_P_get
    if _newclass:
        P = _swig_property(_PythonWrapper.BFD_Header_P_get, _PythonWrapper.BFD_Header_P_set)
    __swig_setmethods__["F"] = _PythonWrapper.BFD_Header_F_set
    __swig_getmethods__["F"] = _PythonWrapper.BFD_Header_F_get
    if _newclass:
        F = _swig_property(_PythonWrapper.BFD_Header_F_get, _PythonWrapper.BFD_Header_F_set)
    __swig_setmethods__["C"] = _PythonWrapper.BFD_Header_C_set
    __swig_getmethods__["C"] = _PythonWrapper.BFD_Header_C_get
    if _newclass:
        C = _swig_property(_PythonWrapper.BFD_Header_C_get, _PythonWrapper.BFD_Header_C_set)
    __swig_setmethods__["A"] = _PythonWrapper.BFD_Header_A_set
    __swig_getmethods__["A"] = _PythonWrapper.BFD_Header_A_get
    if _newclass:
        A = _swig_property(_PythonWrapper.BFD_Header_A_get, _PythonWrapper.BFD_Header_A_set)
    __swig_setmethods__["D"] = _PythonWrapper.BFD_Header_D_set
    __swig_getmethods__["D"] = _PythonWrapper.BFD_Header_D_get
    if _newclass:
        D = _swig_property(_PythonWrapper.BFD_Header_D_get, _PythonWrapper.BFD_Header_D_set)
    __swig_setmethods__["M"] = _PythonWrapper.BFD_Header_M_set
    __swig_getmethods__["M"] = _PythonWrapper.BFD_Header_M_get
    if _newclass:
        M = _swig_property(_PythonWrapper.BFD_Header_M_get, _PythonWrapper.BFD_Header_M_set)
    __swig_setmethods__["DetectMult"] = _PythonWrapper.BFD_Header_DetectMult_set
    __swig_getmethods__["DetectMult"] = _PythonWrapper.BFD_Header_DetectMult_get
    if _newclass:
        DetectMult = _swig_property(_PythonWrapper.BFD_Header_DetectMult_get, _PythonWrapper.BFD_Header_DetectMult_set)
    __swig_setmethods__["Length"] = _PythonWrapper.BFD_Header_Length_set
    __swig_getmethods__["Length"] = _PythonWrapper.BFD_Header_Length_get
    if _newclass:
        Length = _swig_property(_PythonWrapper.BFD_Header_Length_get, _PythonWrapper.BFD_Header_Length_set)
    __swig_setmethods__["MyDiscriminator"] = _PythonWrapper.BFD_Header_MyDiscriminator_set
    __swig_getmethods__["MyDiscriminator"] = _PythonWrapper.BFD_Header_MyDiscriminator_get
    if _newclass:
        MyDiscriminator = _swig_property(_PythonWrapper.BFD_Header_MyDiscriminator_get, _PythonWrapper.BFD_Header_MyDiscriminator_set)
    __swig_setmethods__["YourDiscriminator"] = _PythonWrapper.BFD_Header_YourDiscriminator_set
    __swig_getmethods__["YourDiscriminator"] = _PythonWrapper.BFD_Header_YourDiscriminator_get
    if _newclass:
        YourDiscriminator = _swig_property(_PythonWrapper.BFD_Header_YourDiscriminator_get, _PythonWrapper.BFD_Header_YourDiscriminator_set)
    __swig_setmethods__["DesiredMinTXInterval"] = _PythonWrapper.BFD_Header_DesiredMinTXInterval_set
    __swig_getmethods__["DesiredMinTXInterval"] = _PythonWrapper.BFD_Header_DesiredMinTXInterval_get
    if _newclass:
        DesiredMinTXInterval = _swig_property(_PythonWrapper.BFD_Header_DesiredMinTXInterval_get, _PythonWrapper.BFD_Header_DesiredMinTXInterval_set)
    __swig_setmethods__["RequiredMinRXInterval"] = _PythonWrapper.BFD_Header_RequiredMinRXInterval_set
    __swig_getmethods__["RequiredMinRXInterval"] = _PythonWrapper.BFD_Header_RequiredMinRXInterval_get
    if _newclass:
        RequiredMinRXInterval = _swig_property(_PythonWrapper.BFD_Header_RequiredMinRXInterval_get, _PythonWrapper.BFD_Header_RequiredMinRXInterval_set)
    __swig_setmethods__["RequiredMinEchoRXInterval"] = _PythonWrapper.BFD_Header_RequiredMinEchoRXInterval_set
    __swig_getmethods__["RequiredMinEchoRXInterval"] = _PythonWrapper.BFD_Header_RequiredMinEchoRXInterval_get
    if _newclass:
        RequiredMinEchoRXInterval = _swig_property(_PythonWrapper.BFD_Header_RequiredMinEchoRXInterval_get, _PythonWrapper.BFD_Header_RequiredMinEchoRXInterval_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_BFD_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.BFD_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_BFD_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.BFD_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.BFD_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.BFD_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.BFD_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.BFD_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.BFD_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.BFD_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.BFD_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.BFD_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.BFD_Header_GetElementToolTip(self)
BFD_Header_swigregister = _PythonWrapper.BFD_Header_swigregister
BFD_Header_swigregister(BFD_Header)

class BPE_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BPE_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BPE_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["E_PCP"] = _PythonWrapper.BPE_Header_E_PCP_set
    __swig_getmethods__["E_PCP"] = _PythonWrapper.BPE_Header_E_PCP_get
    if _newclass:
        E_PCP = _swig_property(_PythonWrapper.BPE_Header_E_PCP_get, _PythonWrapper.BPE_Header_E_PCP_set)
    __swig_setmethods__["E_DEI"] = _PythonWrapper.BPE_Header_E_DEI_set
    __swig_getmethods__["E_DEI"] = _PythonWrapper.BPE_Header_E_DEI_get
    if _newclass:
        E_DEI = _swig_property(_PythonWrapper.BPE_Header_E_DEI_get, _PythonWrapper.BPE_Header_E_DEI_set)
    __swig_setmethods__["Ingress_E_CID_base"] = _PythonWrapper.BPE_Header_Ingress_E_CID_base_set
    __swig_getmethods__["Ingress_E_CID_base"] = _PythonWrapper.BPE_Header_Ingress_E_CID_base_get
    if _newclass:
        Ingress_E_CID_base = _swig_property(_PythonWrapper.BPE_Header_Ingress_E_CID_base_get, _PythonWrapper.BPE_Header_Ingress_E_CID_base_set)
    __swig_setmethods__["Reserved"] = _PythonWrapper.BPE_Header_Reserved_set
    __swig_getmethods__["Reserved"] = _PythonWrapper.BPE_Header_Reserved_get
    if _newclass:
        Reserved = _swig_property(_PythonWrapper.BPE_Header_Reserved_get, _PythonWrapper.BPE_Header_Reserved_set)
    __swig_setmethods__["GRP"] = _PythonWrapper.BPE_Header_GRP_set
    __swig_getmethods__["GRP"] = _PythonWrapper.BPE_Header_GRP_get
    if _newclass:
        GRP = _swig_property(_PythonWrapper.BPE_Header_GRP_get, _PythonWrapper.BPE_Header_GRP_set)
    __swig_setmethods__["E_CID_base"] = _PythonWrapper.BPE_Header_E_CID_base_set
    __swig_getmethods__["E_CID_base"] = _PythonWrapper.BPE_Header_E_CID_base_get
    if _newclass:
        E_CID_base = _swig_property(_PythonWrapper.BPE_Header_E_CID_base_get, _PythonWrapper.BPE_Header_E_CID_base_set)
    __swig_setmethods__["Ingress_E_CID_ext"] = _PythonWrapper.BPE_Header_Ingress_E_CID_ext_set
    __swig_getmethods__["Ingress_E_CID_ext"] = _PythonWrapper.BPE_Header_Ingress_E_CID_ext_get
    if _newclass:
        Ingress_E_CID_ext = _swig_property(_PythonWrapper.BPE_Header_Ingress_E_CID_ext_get, _PythonWrapper.BPE_Header_Ingress_E_CID_ext_set)
    __swig_setmethods__["E_CID_ext"] = _PythonWrapper.BPE_Header_E_CID_ext_set
    __swig_getmethods__["E_CID_ext"] = _PythonWrapper.BPE_Header_E_CID_ext_get
    if _newclass:
        E_CID_ext = _swig_property(_PythonWrapper.BPE_Header_E_CID_ext_get, _PythonWrapper.BPE_Header_E_CID_ext_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_BPE_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.BPE_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_BPE_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.BPE_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.BPE_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.BPE_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.BPE_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.BPE_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.BPE_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.BPE_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.BPE_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.BPE_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.BPE_Header_GetElementToolTip(self)
BPE_Header_swigregister = _PythonWrapper.BPE_Header_swigregister
BPE_Header_swigregister(BPE_Header)

class BTAG_VLAN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BTAG_VLAN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BTAG_VLAN, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _PythonWrapper.BTAG_VLAN_Type_set
    __swig_getmethods__["Type"] = _PythonWrapper.BTAG_VLAN_Type_get
    if _newclass:
        Type = _swig_property(_PythonWrapper.BTAG_VLAN_Type_get, _PythonWrapper.BTAG_VLAN_Type_set)
    __swig_setmethods__["priority"] = _PythonWrapper.BTAG_VLAN_priority_set
    __swig_getmethods__["priority"] = _PythonWrapper.BTAG_VLAN_priority_get
    if _newclass:
        priority = _swig_property(_PythonWrapper.BTAG_VLAN_priority_get, _PythonWrapper.BTAG_VLAN_priority_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.BTAG_VLAN_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.BTAG_VLAN_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.BTAG_VLAN_CFI_get, _PythonWrapper.BTAG_VLAN_CFI_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.BTAG_VLAN_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.BTAG_VLAN_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.BTAG_VLAN_VlanID_get, _PythonWrapper.BTAG_VLAN_VlanID_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_BTAG_VLAN(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.BTAG_VLAN_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_BTAG_VLAN
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.BTAG_VLAN_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.BTAG_VLAN_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.BTAG_VLAN_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.BTAG_VLAN_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.BTAG_VLAN_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.BTAG_VLAN_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.BTAG_VLAN_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.BTAG_VLAN_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.BTAG_VLAN_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.BTAG_VLAN_GetElementToolTip(self)
BTAG_VLAN_swigregister = _PythonWrapper.BTAG_VLAN_swigregister
BTAG_VLAN_swigregister(BTAG_VLAN)

class CAPWAP_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAPWAP_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAPWAP_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CAPWAP_Preamble"] = _PythonWrapper.CAPWAP_Header_CAPWAP_Preamble_set
    __swig_getmethods__["CAPWAP_Preamble"] = _PythonWrapper.CAPWAP_Header_CAPWAP_Preamble_get
    if _newclass:
        CAPWAP_Preamble = _swig_property(_PythonWrapper.CAPWAP_Header_CAPWAP_Preamble_get, _PythonWrapper.CAPWAP_Header_CAPWAP_Preamble_set)
    __swig_setmethods__["HLEN"] = _PythonWrapper.CAPWAP_Header_HLEN_set
    __swig_getmethods__["HLEN"] = _PythonWrapper.CAPWAP_Header_HLEN_get
    if _newclass:
        HLEN = _swig_property(_PythonWrapper.CAPWAP_Header_HLEN_get, _PythonWrapper.CAPWAP_Header_HLEN_set)
    __swig_setmethods__["RID"] = _PythonWrapper.CAPWAP_Header_RID_set
    __swig_getmethods__["RID"] = _PythonWrapper.CAPWAP_Header_RID_get
    if _newclass:
        RID = _swig_property(_PythonWrapper.CAPWAP_Header_RID_get, _PythonWrapper.CAPWAP_Header_RID_set)
    __swig_setmethods__["WBID"] = _PythonWrapper.CAPWAP_Header_WBID_set
    __swig_getmethods__["WBID"] = _PythonWrapper.CAPWAP_Header_WBID_get
    if _newclass:
        WBID = _swig_property(_PythonWrapper.CAPWAP_Header_WBID_get, _PythonWrapper.CAPWAP_Header_WBID_set)
    __swig_setmethods__["T"] = _PythonWrapper.CAPWAP_Header_T_set
    __swig_getmethods__["T"] = _PythonWrapper.CAPWAP_Header_T_get
    if _newclass:
        T = _swig_property(_PythonWrapper.CAPWAP_Header_T_get, _PythonWrapper.CAPWAP_Header_T_set)
    __swig_setmethods__["F"] = _PythonWrapper.CAPWAP_Header_F_set
    __swig_getmethods__["F"] = _PythonWrapper.CAPWAP_Header_F_get
    if _newclass:
        F = _swig_property(_PythonWrapper.CAPWAP_Header_F_get, _PythonWrapper.CAPWAP_Header_F_set)
    __swig_setmethods__["L"] = _PythonWrapper.CAPWAP_Header_L_set
    __swig_getmethods__["L"] = _PythonWrapper.CAPWAP_Header_L_get
    if _newclass:
        L = _swig_property(_PythonWrapper.CAPWAP_Header_L_get, _PythonWrapper.CAPWAP_Header_L_set)
    __swig_setmethods__["W"] = _PythonWrapper.CAPWAP_Header_W_set
    __swig_getmethods__["W"] = _PythonWrapper.CAPWAP_Header_W_get
    if _newclass:
        W = _swig_property(_PythonWrapper.CAPWAP_Header_W_get, _PythonWrapper.CAPWAP_Header_W_set)
    __swig_setmethods__["M"] = _PythonWrapper.CAPWAP_Header_M_set
    __swig_getmethods__["M"] = _PythonWrapper.CAPWAP_Header_M_get
    if _newclass:
        M = _swig_property(_PythonWrapper.CAPWAP_Header_M_get, _PythonWrapper.CAPWAP_Header_M_set)
    __swig_setmethods__["K"] = _PythonWrapper.CAPWAP_Header_K_set
    __swig_getmethods__["K"] = _PythonWrapper.CAPWAP_Header_K_get
    if _newclass:
        K = _swig_property(_PythonWrapper.CAPWAP_Header_K_get, _PythonWrapper.CAPWAP_Header_K_set)
    __swig_setmethods__["Flags"] = _PythonWrapper.CAPWAP_Header_Flags_set
    __swig_getmethods__["Flags"] = _PythonWrapper.CAPWAP_Header_Flags_get
    if _newclass:
        Flags = _swig_property(_PythonWrapper.CAPWAP_Header_Flags_get, _PythonWrapper.CAPWAP_Header_Flags_set)
    __swig_setmethods__["FragmentID"] = _PythonWrapper.CAPWAP_Header_FragmentID_set
    __swig_getmethods__["FragmentID"] = _PythonWrapper.CAPWAP_Header_FragmentID_get
    if _newclass:
        FragmentID = _swig_property(_PythonWrapper.CAPWAP_Header_FragmentID_get, _PythonWrapper.CAPWAP_Header_FragmentID_set)
    __swig_setmethods__["FragmentOffset"] = _PythonWrapper.CAPWAP_Header_FragmentOffset_set
    __swig_getmethods__["FragmentOffset"] = _PythonWrapper.CAPWAP_Header_FragmentOffset_get
    if _newclass:
        FragmentOffset = _swig_property(_PythonWrapper.CAPWAP_Header_FragmentOffset_get, _PythonWrapper.CAPWAP_Header_FragmentOffset_set)
    __swig_setmethods__["Rsvd"] = _PythonWrapper.CAPWAP_Header_Rsvd_set
    __swig_getmethods__["Rsvd"] = _PythonWrapper.CAPWAP_Header_Rsvd_get
    if _newclass:
        Rsvd = _swig_property(_PythonWrapper.CAPWAP_Header_Rsvd_get, _PythonWrapper.CAPWAP_Header_Rsvd_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_CAPWAP_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.CAPWAP_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_CAPWAP_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.CAPWAP_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.CAPWAP_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.CAPWAP_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.CAPWAP_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.CAPWAP_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.CAPWAP_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.CAPWAP_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.CAPWAP_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.CAPWAP_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.CAPWAP_Header_GetElementToolTip(self)
CAPWAP_Header_swigregister = _PythonWrapper.CAPWAP_Header_swigregister
CAPWAP_Header_swigregister(CAPWAP_Header)

class RadioMACAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadioMACAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadioMACAddress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Length"] = _PythonWrapper.RadioMACAddress_Length_set
    __swig_getmethods__["Length"] = _PythonWrapper.RadioMACAddress_Length_get
    if _newclass:
        Length = _swig_property(_PythonWrapper.RadioMACAddress_Length_get, _PythonWrapper.RadioMACAddress_Length_set)
    __swig_setmethods__["mac_address"] = _PythonWrapper.RadioMACAddress_mac_address_set
    __swig_getmethods__["mac_address"] = _PythonWrapper.RadioMACAddress_mac_address_get
    if _newclass:
        mac_address = _swig_property(_PythonWrapper.RadioMACAddress_mac_address_get, _PythonWrapper.RadioMACAddress_mac_address_set)
    __swig_setmethods__["padding"] = _PythonWrapper.RadioMACAddress_padding_set
    __swig_getmethods__["padding"] = _PythonWrapper.RadioMACAddress_padding_get
    if _newclass:
        padding = _swig_property(_PythonWrapper.RadioMACAddress_padding_get, _PythonWrapper.RadioMACAddress_padding_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_RadioMACAddress(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.RadioMACAddress_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_RadioMACAddress
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.RadioMACAddress_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.RadioMACAddress_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.RadioMACAddress_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.RadioMACAddress_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.RadioMACAddress_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.RadioMACAddress_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.RadioMACAddress_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.RadioMACAddress_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.RadioMACAddress_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.RadioMACAddress_GetElementToolTip(self)
RadioMACAddress_swigregister = _PythonWrapper.RadioMACAddress_swigregister
RadioMACAddress_swigregister(RadioMACAddress)

class FrameInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Length"] = _PythonWrapper.FrameInfo_Length_set
    __swig_getmethods__["Length"] = _PythonWrapper.FrameInfo_Length_get
    if _newclass:
        Length = _swig_property(_PythonWrapper.FrameInfo_Length_get, _PythonWrapper.FrameInfo_Length_set)
    __swig_setmethods__["RSSI"] = _PythonWrapper.FrameInfo_RSSI_set
    __swig_getmethods__["RSSI"] = _PythonWrapper.FrameInfo_RSSI_get
    if _newclass:
        RSSI = _swig_property(_PythonWrapper.FrameInfo_RSSI_get, _PythonWrapper.FrameInfo_RSSI_set)
    __swig_setmethods__["SNR"] = _PythonWrapper.FrameInfo_SNR_set
    __swig_getmethods__["SNR"] = _PythonWrapper.FrameInfo_SNR_get
    if _newclass:
        SNR = _swig_property(_PythonWrapper.FrameInfo_SNR_get, _PythonWrapper.FrameInfo_SNR_set)
    __swig_setmethods__["DataRate"] = _PythonWrapper.FrameInfo_DataRate_set
    __swig_getmethods__["DataRate"] = _PythonWrapper.FrameInfo_DataRate_get
    if _newclass:
        DataRate = _swig_property(_PythonWrapper.FrameInfo_DataRate_get, _PythonWrapper.FrameInfo_DataRate_set)
    __swig_setmethods__["Reserved_24bits"] = _PythonWrapper.FrameInfo_Reserved_24bits_set
    __swig_getmethods__["Reserved_24bits"] = _PythonWrapper.FrameInfo_Reserved_24bits_get
    if _newclass:
        Reserved_24bits = _swig_property(_PythonWrapper.FrameInfo_Reserved_24bits_get, _PythonWrapper.FrameInfo_Reserved_24bits_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_FrameInfo(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.FrameInfo_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_FrameInfo
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.FrameInfo_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.FrameInfo_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.FrameInfo_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.FrameInfo_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.FrameInfo_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.FrameInfo_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.FrameInfo_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.FrameInfo_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.FrameInfo_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.FrameInfo_GetElementToolTip(self)
FrameInfo_swigregister = _PythonWrapper.FrameInfo_swigregister
FrameInfo_swigregister(FrameInfo)

class CCFCHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCFCHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCFCHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CNEType"] = _PythonWrapper.CCFCHeader_CNEType_set
    __swig_getmethods__["CNEType"] = _PythonWrapper.CCFCHeader_CNEType_get
    if _newclass:
        CNEType = _swig_property(_PythonWrapper.CCFCHeader_CNEType_get, _PythonWrapper.CCFCHeader_CNEType_set)
    __swig_setmethods__["Reserved4Bits"] = _PythonWrapper.CCFCHeader_Reserved4Bits_set
    __swig_getmethods__["Reserved4Bits"] = _PythonWrapper.CCFCHeader_Reserved4Bits_get
    if _newclass:
        Reserved4Bits = _swig_property(_PythonWrapper.CCFCHeader_Reserved4Bits_get, _PythonWrapper.CCFCHeader_Reserved4Bits_set)
    __swig_setmethods__["PortSpeedIndex"] = _PythonWrapper.CCFCHeader_PortSpeedIndex_set
    __swig_getmethods__["PortSpeedIndex"] = _PythonWrapper.CCFCHeader_PortSpeedIndex_get
    if _newclass:
        PortSpeedIndex = _swig_property(_PythonWrapper.CCFCHeader_PortSpeedIndex_get, _PythonWrapper.CCFCHeader_PortSpeedIndex_set)
    __swig_setmethods__["Reserved9Bits"] = _PythonWrapper.CCFCHeader_Reserved9Bits_set
    __swig_getmethods__["Reserved9Bits"] = _PythonWrapper.CCFCHeader_Reserved9Bits_get
    if _newclass:
        Reserved9Bits = _swig_property(_PythonWrapper.CCFCHeader_Reserved9Bits_get, _PythonWrapper.CCFCHeader_Reserved9Bits_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_CCFCHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.CCFCHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_CCFCHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.CCFCHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.CCFCHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.CCFCHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.CCFCHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.CCFCHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.CCFCHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.CCFCHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.CCFCHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.CCFCHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.CCFCHeader_GetElementToolTip(self)
CCFCHeader_swigregister = _PythonWrapper.CCFCHeader_swigregister
CCFCHeader_swigregister(CCFCHeader)

class CdpHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CdpHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CdpHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Version"] = _PythonWrapper.CdpHeader_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.CdpHeader_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.CdpHeader_Version_get, _PythonWrapper.CdpHeader_Version_set)
    __swig_setmethods__["TTL"] = _PythonWrapper.CdpHeader_TTL_set
    __swig_getmethods__["TTL"] = _PythonWrapper.CdpHeader_TTL_get
    if _newclass:
        TTL = _swig_property(_PythonWrapper.CdpHeader_TTL_get, _PythonWrapper.CdpHeader_TTL_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.CdpHeader_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.CdpHeader_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.CdpHeader_Checksum_get, _PythonWrapper.CdpHeader_Checksum_set)
    __swig_destroy__ = _PythonWrapper.delete_CdpHeader
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _PythonWrapper.new_CdpHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.CdpHeader_Clone(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.CdpHeader_SetDefaultData(self, pktSize)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.CdpHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def ResetAutomaticFields(self):
        return _PythonWrapper.CdpHeader_ResetAutomaticFields(self)

    def GetElementSize(self):
        return _PythonWrapper.CdpHeader_GetElementSize(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.CdpHeader_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.CdpHeader_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.CdpHeader_SetElementFieldsStringData(self, sDataVec)

    def UpdateStructFields(self):
        return _PythonWrapper.CdpHeader_UpdateStructFields(self)

    def GetElementToolTip(self):
        return _PythonWrapper.CdpHeader_GetElementToolTip(self)

    def ToString(self):
        return _PythonWrapper.CdpHeader_ToString(self)
CdpHeader_swigregister = _PythonWrapper.CdpHeader_swigregister
CdpHeader_swigregister(CdpHeader)

class CEX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CEX, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_CEX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def SetData(self, offset, length, lengthShift, etherType, etherTypeShift, nBitsForEthertype, bOverwrite2FirstBytes, i2FirstBytesData=0):
        return _PythonWrapper.CEX_SetData(self, offset, length, lengthShift, etherType, etherTypeShift, nBitsForEthertype, bOverwrite2FirstBytes, i2FirstBytesData)

    def GetChosenWord(self):
        return _PythonWrapper.CEX_GetChosenWord(self)

    def Clone(self):
        return _PythonWrapper.CEX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_CEX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.CEX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.CEX_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.CEX_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.CEX_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.CEX_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.CEX_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.CEX_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.CEX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.CEX_GetElementToolTip(self)
    __swig_setmethods__["dataBeforeChosenWord"] = _PythonWrapper.CEX_dataBeforeChosenWord_set
    __swig_getmethods__["dataBeforeChosenWord"] = _PythonWrapper.CEX_dataBeforeChosenWord_get
    if _newclass:
        dataBeforeChosenWord = _swig_property(_PythonWrapper.CEX_dataBeforeChosenWord_get, _PythonWrapper.CEX_dataBeforeChosenWord_set)
    __swig_setmethods__["chosenWord"] = _PythonWrapper.CEX_chosenWord_set
    __swig_getmethods__["chosenWord"] = _PythonWrapper.CEX_chosenWord_get
    if _newclass:
        chosenWord = _swig_property(_PythonWrapper.CEX_chosenWord_get, _PythonWrapper.CEX_chosenWord_set)
    __swig_setmethods__["dataAfterChosenWord"] = _PythonWrapper.CEX_dataAfterChosenWord_set
    __swig_getmethods__["dataAfterChosenWord"] = _PythonWrapper.CEX_dataAfterChosenWord_get
    if _newclass:
        dataAfterChosenWord = _swig_property(_PythonWrapper.CEX_dataAfterChosenWord_get, _PythonWrapper.CEX_dataAfterChosenWord_set)
CEX_swigregister = _PythonWrapper.CEX_swigregister
CEX_swigregister(CEX)

class CFM_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFM_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFM_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MD_Level"] = _PythonWrapper.CFM_Header_MD_Level_set
    __swig_getmethods__["MD_Level"] = _PythonWrapper.CFM_Header_MD_Level_get
    if _newclass:
        MD_Level = _swig_property(_PythonWrapper.CFM_Header_MD_Level_get, _PythonWrapper.CFM_Header_MD_Level_set)
    __swig_setmethods__["Version"] = _PythonWrapper.CFM_Header_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.CFM_Header_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.CFM_Header_Version_get, _PythonWrapper.CFM_Header_Version_set)
    __swig_setmethods__["Opcode"] = _PythonWrapper.CFM_Header_Opcode_set
    __swig_getmethods__["Opcode"] = _PythonWrapper.CFM_Header_Opcode_get
    if _newclass:
        Opcode = _swig_property(_PythonWrapper.CFM_Header_Opcode_get, _PythonWrapper.CFM_Header_Opcode_set)
    __swig_setmethods__["Flags"] = _PythonWrapper.CFM_Header_Flags_set
    __swig_getmethods__["Flags"] = _PythonWrapper.CFM_Header_Flags_get
    if _newclass:
        Flags = _swig_property(_PythonWrapper.CFM_Header_Flags_get, _PythonWrapper.CFM_Header_Flags_set)
    __swig_setmethods__["FirstTLVOffset"] = _PythonWrapper.CFM_Header_FirstTLVOffset_set
    __swig_getmethods__["FirstTLVOffset"] = _PythonWrapper.CFM_Header_FirstTLVOffset_get
    if _newclass:
        FirstTLVOffset = _swig_property(_PythonWrapper.CFM_Header_FirstTLVOffset_get, _PythonWrapper.CFM_Header_FirstTLVOffset_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_CFM_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.CFM_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_CFM_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.CFM_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.CFM_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.CFM_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.CFM_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.CFM_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.CFM_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.CFM_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.CFM_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.CFM_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.CFM_Header_GetElementToolTip(self)
CFM_Header_swigregister = _PythonWrapper.CFM_Header_swigregister
CFM_Header_swigregister(CFM_Header)

class CTag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_CTag(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.CTag_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_CTag
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.CTag_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.CTag_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.CTag_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.CTag_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.CTag_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.CTag_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.CTag_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.CTag_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.CTag_GetElementToolTip(self)
    __swig_setmethods__["reserved_bits_14_31"] = _PythonWrapper.CTag_reserved_bits_14_31_set
    __swig_getmethods__["reserved_bits_14_31"] = _PythonWrapper.CTag_reserved_bits_14_31_get
    if _newclass:
        reserved_bits_14_31 = _swig_property(_PythonWrapper.CTag_reserved_bits_14_31_get, _PythonWrapper.CTag_reserved_bits_14_31_set)
    __swig_setmethods__["reserved_bit_13"] = _PythonWrapper.CTag_reserved_bit_13_set
    __swig_getmethods__["reserved_bit_13"] = _PythonWrapper.CTag_reserved_bit_13_get
    if _newclass:
        reserved_bit_13 = _swig_property(_PythonWrapper.CTag_reserved_bit_13_get, _PythonWrapper.CTag_reserved_bit_13_set)
    __swig_setmethods__["securityIndex"] = _PythonWrapper.CTag_securityIndex_set
    __swig_getmethods__["securityIndex"] = _PythonWrapper.CTag_securityIndex_get
    if _newclass:
        securityIndex = _swig_property(_PythonWrapper.CTag_securityIndex_get, _PythonWrapper.CTag_securityIndex_set)
    __swig_setmethods__["reserved_bits_0_7"] = _PythonWrapper.CTag_reserved_bits_0_7_set
    __swig_getmethods__["reserved_bits_0_7"] = _PythonWrapper.CTag_reserved_bits_0_7_get
    if _newclass:
        reserved_bits_0_7 = _swig_property(_PythonWrapper.CTag_reserved_bits_0_7_get, _PythonWrapper.CTag_reserved_bits_0_7_set)
CTag_swigregister = _PythonWrapper.CTag_swigregister
CTag_swigregister(CTag)

class CustomElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_CustomElement(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.CustomElement_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_CustomElement
    __del__ = lambda self: None

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.CustomElement_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.CustomElement_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.CustomElement_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.CustomElement_ToString(self)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.CustomElement_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.CustomElement_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.CustomElement_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.CustomElement_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.CustomElement_GetElementSize(self)

    def SetPattern(self, *args):
        return _PythonWrapper.CustomElement_SetPattern(self, *args)
    __swig_setmethods__["data"] = _PythonWrapper.CustomElement_data_set
    __swig_getmethods__["data"] = _PythonWrapper.CustomElement_data_get
    if _newclass:
        data = _swig_property(_PythonWrapper.CustomElement_data_get, _PythonWrapper.CustomElement_data_set)
CustomElement_swigregister = _PythonWrapper.CustomElement_swigregister
CustomElement_swigregister(CustomElement)

class DHCPHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DHCPHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DHCPHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Opcode"] = _PythonWrapper.DHCPHeader_Opcode_set
    __swig_getmethods__["Opcode"] = _PythonWrapper.DHCPHeader_Opcode_get
    if _newclass:
        Opcode = _swig_property(_PythonWrapper.DHCPHeader_Opcode_get, _PythonWrapper.DHCPHeader_Opcode_set)
    __swig_setmethods__["HwType"] = _PythonWrapper.DHCPHeader_HwType_set
    __swig_getmethods__["HwType"] = _PythonWrapper.DHCPHeader_HwType_get
    if _newclass:
        HwType = _swig_property(_PythonWrapper.DHCPHeader_HwType_get, _PythonWrapper.DHCPHeader_HwType_set)
    __swig_setmethods__["HwAddressLength"] = _PythonWrapper.DHCPHeader_HwAddressLength_set
    __swig_getmethods__["HwAddressLength"] = _PythonWrapper.DHCPHeader_HwAddressLength_get
    if _newclass:
        HwAddressLength = _swig_property(_PythonWrapper.DHCPHeader_HwAddressLength_get, _PythonWrapper.DHCPHeader_HwAddressLength_set)
    __swig_setmethods__["HopCount"] = _PythonWrapper.DHCPHeader_HopCount_set
    __swig_getmethods__["HopCount"] = _PythonWrapper.DHCPHeader_HopCount_get
    if _newclass:
        HopCount = _swig_property(_PythonWrapper.DHCPHeader_HopCount_get, _PythonWrapper.DHCPHeader_HopCount_set)
    __swig_setmethods__["TransactionID"] = _PythonWrapper.DHCPHeader_TransactionID_set
    __swig_getmethods__["TransactionID"] = _PythonWrapper.DHCPHeader_TransactionID_get
    if _newclass:
        TransactionID = _swig_property(_PythonWrapper.DHCPHeader_TransactionID_get, _PythonWrapper.DHCPHeader_TransactionID_set)
    __swig_setmethods__["NumberOfSeconds"] = _PythonWrapper.DHCPHeader_NumberOfSeconds_set
    __swig_getmethods__["NumberOfSeconds"] = _PythonWrapper.DHCPHeader_NumberOfSeconds_get
    if _newclass:
        NumberOfSeconds = _swig_property(_PythonWrapper.DHCPHeader_NumberOfSeconds_get, _PythonWrapper.DHCPHeader_NumberOfSeconds_set)
    __swig_setmethods__["Flags"] = _PythonWrapper.DHCPHeader_Flags_set
    __swig_getmethods__["Flags"] = _PythonWrapper.DHCPHeader_Flags_get
    if _newclass:
        Flags = _swig_property(_PythonWrapper.DHCPHeader_Flags_get, _PythonWrapper.DHCPHeader_Flags_set)
    __swig_setmethods__["ClientIP"] = _PythonWrapper.DHCPHeader_ClientIP_set
    __swig_getmethods__["ClientIP"] = _PythonWrapper.DHCPHeader_ClientIP_get
    if _newclass:
        ClientIP = _swig_property(_PythonWrapper.DHCPHeader_ClientIP_get, _PythonWrapper.DHCPHeader_ClientIP_set)
    __swig_setmethods__["YourIP"] = _PythonWrapper.DHCPHeader_YourIP_set
    __swig_getmethods__["YourIP"] = _PythonWrapper.DHCPHeader_YourIP_get
    if _newclass:
        YourIP = _swig_property(_PythonWrapper.DHCPHeader_YourIP_get, _PythonWrapper.DHCPHeader_YourIP_set)
    __swig_setmethods__["ServerIP"] = _PythonWrapper.DHCPHeader_ServerIP_set
    __swig_getmethods__["ServerIP"] = _PythonWrapper.DHCPHeader_ServerIP_get
    if _newclass:
        ServerIP = _swig_property(_PythonWrapper.DHCPHeader_ServerIP_get, _PythonWrapper.DHCPHeader_ServerIP_set)
    __swig_setmethods__["GatewayIP"] = _PythonWrapper.DHCPHeader_GatewayIP_set
    __swig_getmethods__["GatewayIP"] = _PythonWrapper.DHCPHeader_GatewayIP_get
    if _newclass:
        GatewayIP = _swig_property(_PythonWrapper.DHCPHeader_GatewayIP_get, _PythonWrapper.DHCPHeader_GatewayIP_set)
    __swig_setmethods__["ClientHwAddress"] = _PythonWrapper.DHCPHeader_ClientHwAddress_set
    __swig_getmethods__["ClientHwAddress"] = _PythonWrapper.DHCPHeader_ClientHwAddress_get
    if _newclass:
        ClientHwAddress = _swig_property(_PythonWrapper.DHCPHeader_ClientHwAddress_get, _PythonWrapper.DHCPHeader_ClientHwAddress_set)
    __swig_setmethods__["ServerHostName"] = _PythonWrapper.DHCPHeader_ServerHostName_set
    __swig_getmethods__["ServerHostName"] = _PythonWrapper.DHCPHeader_ServerHostName_get
    if _newclass:
        ServerHostName = _swig_property(_PythonWrapper.DHCPHeader_ServerHostName_get, _PythonWrapper.DHCPHeader_ServerHostName_set)
    __swig_setmethods__["BootFilename"] = _PythonWrapper.DHCPHeader_BootFilename_set
    __swig_getmethods__["BootFilename"] = _PythonWrapper.DHCPHeader_BootFilename_get
    if _newclass:
        BootFilename = _swig_property(_PythonWrapper.DHCPHeader_BootFilename_get, _PythonWrapper.DHCPHeader_BootFilename_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_DHCPHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.DHCPHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_DHCPHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.DHCPHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.DHCPHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.DHCPHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.DHCPHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.DHCPHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.DHCPHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.DHCPHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.DHCPHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.DHCPHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.DHCPHeader_GetElementToolTip(self)
DHCPHeader_swigregister = _PythonWrapper.DHCPHeader_swigregister
DHCPHeader_swigregister(DHCPHeader)

class DHCPOptionsData(CustomElement):
    __swig_setmethods__ = {}
    for _s in [CustomElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DHCPOptionsData, name, value)
    __swig_getmethods__ = {}
    for _s in [CustomElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DHCPOptionsData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_DHCPOptionsData(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.DHCPOptionsData_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_DHCPOptionsData
    __del__ = lambda self: None

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.DHCPOptionsData_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.DHCPOptionsData_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.DHCPOptionsData_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.DHCPOptionsData_ToString(self)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.DHCPOptionsData_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.DHCPOptionsData_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.DHCPOptionsData_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.DHCPOptionsData_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.DHCPOptionsData_GetElementSize(self)

    def SetPattern(self, dataLengthInChars, ePtrnType, strPtrn):
        return _PythonWrapper.DHCPOptionsData_SetPattern(self, dataLengthInChars, ePtrnType, strPtrn)
DHCPOptionsData_swigregister = _PythonWrapper.DHCPOptionsData_swigregister
DHCPOptionsData_swigregister(DHCPOptionsData)

class DsaTagToCpu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DsaTagToCpu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DsaTagToCpu, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_DsaTagToCpu(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.DsaTagToCpu_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_DsaTagToCpu
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.DsaTagToCpu_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.DsaTagToCpu_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.DsaTagToCpu_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.DsaTagToCpu_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.DsaTagToCpu_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.DsaTagToCpu_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.DsaTagToCpu_SetElementFieldsStringData(self, sDataVec)

    def GetElementToolTip(self):
        return _PythonWrapper.DsaTagToCpu_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.DsaTagToCpu_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.DsaTagToCpu_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.DsaTagToCpu_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.DsaTagToCpu_TagCommand_get, _PythonWrapper.DsaTagToCpu_TagCommand_set)
    __swig_setmethods__["SrcTagged"] = _PythonWrapper.DsaTagToCpu_SrcTagged_set
    __swig_getmethods__["SrcTagged"] = _PythonWrapper.DsaTagToCpu_SrcTagged_get
    if _newclass:
        SrcTagged = _swig_property(_PythonWrapper.DsaTagToCpu_SrcTagged_get, _PythonWrapper.DsaTagToCpu_SrcTagged_set)
    __swig_setmethods__["SrcDev"] = _PythonWrapper.DsaTagToCpu_SrcDev_set
    __swig_getmethods__["SrcDev"] = _PythonWrapper.DsaTagToCpu_SrcDev_get
    if _newclass:
        SrcDev = _swig_property(_PythonWrapper.DsaTagToCpu_SrcDev_get, _PythonWrapper.DsaTagToCpu_SrcDev_set)
    __swig_setmethods__["SrcPort"] = _PythonWrapper.DsaTagToCpu_SrcPort_set
    __swig_getmethods__["SrcPort"] = _PythonWrapper.DsaTagToCpu_SrcPort_get
    if _newclass:
        SrcPort = _swig_property(_PythonWrapper.DsaTagToCpu_SrcPort_get, _PythonWrapper.DsaTagToCpu_SrcPort_set)
    __swig_setmethods__["CpuCode_1_3"] = _PythonWrapper.DsaTagToCpu_CpuCode_1_3_set
    __swig_getmethods__["CpuCode_1_3"] = _PythonWrapper.DsaTagToCpu_CpuCode_1_3_get
    if _newclass:
        CpuCode_1_3 = _swig_property(_PythonWrapper.DsaTagToCpu_CpuCode_1_3_get, _PythonWrapper.DsaTagToCpu_CpuCode_1_3_set)
    __swig_setmethods__["UP"] = _PythonWrapper.DsaTagToCpu_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.DsaTagToCpu_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.DsaTagToCpu_UP_get, _PythonWrapper.DsaTagToCpu_UP_set)
    __swig_setmethods__["CpuCode_0"] = _PythonWrapper.DsaTagToCpu_CpuCode_0_set
    __swig_getmethods__["CpuCode_0"] = _PythonWrapper.DsaTagToCpu_CpuCode_0_get
    if _newclass:
        CpuCode_0 = _swig_property(_PythonWrapper.DsaTagToCpu_CpuCode_0_get, _PythonWrapper.DsaTagToCpu_CpuCode_0_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.DsaTagToCpu_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.DsaTagToCpu_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.DsaTagToCpu_VlanID_get, _PythonWrapper.DsaTagToCpu_VlanID_set)
DsaTagToCpu_swigregister = _PythonWrapper.DsaTagToCpu_swigregister
DsaTagToCpu_swigregister(DsaTagToCpu)

class Puma1DsaTagToCpuExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Puma1DsaTagToCpuExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Puma1DsaTagToCpuExt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Puma1DsaTagToCpuExt(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Puma1DsaTagToCpuExt_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_Puma1DsaTagToCpuExt
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.Puma1DsaTagToCpuExt_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Puma1DsaTagToCpuExt_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.Puma1DsaTagToCpuExt_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Puma1DsaTagToCpuExt_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Puma1DsaTagToCpuExt_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Puma1DsaTagToCpuExt_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Puma1DsaTagToCpuExt_SetElementFieldsStringData(self, sDataVec)

    def GetElementToolTip(self):
        return _PythonWrapper.Puma1DsaTagToCpuExt_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.Puma1DsaTagToCpuExt_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.Puma1DsaTagToCpuExt_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.Puma1DsaTagToCpuExt_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_TagCommand_get, _PythonWrapper.Puma1DsaTagToCpuExt_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgTagged_get, _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgTagged_set)
    __swig_setmethods__["SrcTrgDev_0_4"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgDev_0_4_set
    __swig_getmethods__["SrcTrgDev_0_4"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgDev_0_4_get
    if _newclass:
        SrcTrgDev_0_4 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgDev_0_4_get, _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgDev_0_4_set)
    __swig_setmethods__["SrcTrgPort_0_4"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgPort_0_4_set
    __swig_getmethods__["SrcTrgPort_0_4"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgPort_0_4_get
    if _newclass:
        SrcTrgPort_0_4 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgPort_0_4_get, _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgPort_0_4_set)
    __swig_setmethods__["CpuCode_1_3"] = _PythonWrapper.Puma1DsaTagToCpuExt_CpuCode_1_3_set
    __swig_getmethods__["CpuCode_1_3"] = _PythonWrapper.Puma1DsaTagToCpuExt_CpuCode_1_3_get
    if _newclass:
        CpuCode_1_3 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_CpuCode_1_3_get, _PythonWrapper.Puma1DsaTagToCpuExt_CpuCode_1_3_set)
    __swig_setmethods__["UP"] = _PythonWrapper.Puma1DsaTagToCpuExt_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.Puma1DsaTagToCpuExt_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_UP_get, _PythonWrapper.Puma1DsaTagToCpuExt_UP_set)
    __swig_setmethods__["CpuCode_0"] = _PythonWrapper.Puma1DsaTagToCpuExt_CpuCode_0_set
    __swig_getmethods__["CpuCode_0"] = _PythonWrapper.Puma1DsaTagToCpuExt_CpuCode_0_get
    if _newclass:
        CpuCode_0 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_CpuCode_0_get, _PythonWrapper.Puma1DsaTagToCpuExt_CpuCode_0_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.Puma1DsaTagToCpuExt_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.Puma1DsaTagToCpuExt_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_VlanID_get, _PythonWrapper.Puma1DsaTagToCpuExt_VlanID_set)
    __swig_setmethods__["Extend"] = _PythonWrapper.Puma1DsaTagToCpuExt_Extend_set
    __swig_getmethods__["Extend"] = _PythonWrapper.Puma1DsaTagToCpuExt_Extend_get
    if _newclass:
        Extend = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_Extend_get, _PythonWrapper.Puma1DsaTagToCpuExt_Extend_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.Puma1DsaTagToCpuExt_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.Puma1DsaTagToCpuExt_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_CFI_get, _PythonWrapper.Puma1DsaTagToCpuExt_CFI_set)
    __swig_setmethods__["FlowID_14_16"] = _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_14_16_set
    __swig_getmethods__["FlowID_14_16"] = _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_14_16_get
    if _newclass:
        FlowID_14_16 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_FlowID_14_16_get, _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_14_16_set)
    __swig_setmethods__["Truncated"] = _PythonWrapper.Puma1DsaTagToCpuExt_Truncated_set
    __swig_getmethods__["Truncated"] = _PythonWrapper.Puma1DsaTagToCpuExt_Truncated_get
    if _newclass:
        Truncated = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_Truncated_get, _PythonWrapper.Puma1DsaTagToCpuExt_Truncated_set)
    __swig_setmethods__["FlowID_6_13"] = _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_6_13_set
    __swig_getmethods__["FlowID_6_13"] = _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_6_13_get
    if _newclass:
        FlowID_6_13 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_FlowID_6_13_get, _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_6_13_set)
    __swig_setmethods__["SrcTrgDev_5_6"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgDev_5_6_set
    __swig_getmethods__["SrcTrgDev_5_6"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgDev_5_6_get
    if _newclass:
        SrcTrgDev_5_6 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgDev_5_6_get, _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgDev_5_6_set)
    __swig_setmethods__["FlowID_1_5"] = _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_1_5_set
    __swig_getmethods__["FlowID_1_5"] = _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_1_5_get
    if _newclass:
        FlowID_1_5 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_FlowID_1_5_get, _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_1_5_set)
    __swig_setmethods__["SrcTrgPort_5"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgPort_5_set
    __swig_getmethods__["SrcTrgPort_5"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgPort_5_get
    if _newclass:
        SrcTrgPort_5 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgPort_5_get, _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrgPort_5_set)
    __swig_setmethods__["FlowID_0"] = _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_0_set
    __swig_getmethods__["FlowID_0"] = _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_0_get
    if _newclass:
        FlowID_0 = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_FlowID_0_get, _PythonWrapper.Puma1DsaTagToCpuExt_FlowID_0_set)
    __swig_setmethods__["SrcTrg"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrg_set
    __swig_getmethods__["SrcTrg"] = _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrg_get
    if _newclass:
        SrcTrg = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_SrcTrg_get, _PythonWrapper.Puma1DsaTagToCpuExt_SrcTrg_set)
    __swig_setmethods__["LongCpuCode"] = _PythonWrapper.Puma1DsaTagToCpuExt_LongCpuCode_set
    __swig_getmethods__["LongCpuCode"] = _PythonWrapper.Puma1DsaTagToCpuExt_LongCpuCode_get
    if _newclass:
        LongCpuCode = _swig_property(_PythonWrapper.Puma1DsaTagToCpuExt_LongCpuCode_get, _PythonWrapper.Puma1DsaTagToCpuExt_LongCpuCode_set)
Puma1DsaTagToCpuExt_swigregister = _PythonWrapper.Puma1DsaTagToCpuExt_swigregister
Puma1DsaTagToCpuExt_swigregister(Puma1DsaTagToCpuExt)

class DsaTagFromCpu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DsaTagFromCpu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DsaTagFromCpu, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_DsaTagFromCpu(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.DsaTagFromCpu_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_DsaTagFromCpu
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.DsaTagFromCpu_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.DsaTagFromCpu_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.DsaTagFromCpu_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.DsaTagFromCpu_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.DsaTagFromCpu_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.DsaTagFromCpu_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.DsaTagFromCpu_SetElementFieldsStringData(self, sDataVec)

    def GetElementToolTip(self):
        return _PythonWrapper.DsaTagFromCpu_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.DsaTagFromCpu_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.DsaTagFromCpu_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.DsaTagFromCpu_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.DsaTagFromCpu_TagCommand_get, _PythonWrapper.DsaTagFromCpu_TagCommand_set)
    __swig_setmethods__["TrgTagged"] = _PythonWrapper.DsaTagFromCpu_TrgTagged_set
    __swig_getmethods__["TrgTagged"] = _PythonWrapper.DsaTagFromCpu_TrgTagged_get
    if _newclass:
        TrgTagged = _swig_property(_PythonWrapper.DsaTagFromCpu_TrgTagged_get, _PythonWrapper.DsaTagFromCpu_TrgTagged_set)
    __swig_setmethods__["TrgDev_0_4"] = _PythonWrapper.DsaTagFromCpu_TrgDev_0_4_set
    __swig_getmethods__["TrgDev_0_4"] = _PythonWrapper.DsaTagFromCpu_TrgDev_0_4_get
    if _newclass:
        TrgDev_0_4 = _swig_property(_PythonWrapper.DsaTagFromCpu_TrgDev_0_4_get, _PythonWrapper.DsaTagFromCpu_TrgDev_0_4_set)
    __swig_setmethods__["TrgPort_0_4"] = _PythonWrapper.DsaTagFromCpu_TrgPort_0_4_set
    __swig_getmethods__["TrgPort_0_4"] = _PythonWrapper.DsaTagFromCpu_TrgPort_0_4_get
    if _newclass:
        TrgPort_0_4 = _swig_property(_PythonWrapper.DsaTagFromCpu_TrgPort_0_4_get, _PythonWrapper.DsaTagFromCpu_TrgPort_0_4_set)
    __swig_setmethods__["use_vidx"] = _PythonWrapper.DsaTagFromCpu_use_vidx_set
    __swig_getmethods__["use_vidx"] = _PythonWrapper.DsaTagFromCpu_use_vidx_get
    if _newclass:
        use_vidx = _swig_property(_PythonWrapper.DsaTagFromCpu_use_vidx_get, _PythonWrapper.DsaTagFromCpu_use_vidx_set)
    __swig_setmethods__["TC_0_1"] = _PythonWrapper.DsaTagFromCpu_TC_0_1_set
    __swig_getmethods__["TC_0_1"] = _PythonWrapper.DsaTagFromCpu_TC_0_1_get
    if _newclass:
        TC_0_1 = _swig_property(_PythonWrapper.DsaTagFromCpu_TC_0_1_get, _PythonWrapper.DsaTagFromCpu_TC_0_1_set)
    __swig_setmethods__["UP"] = _PythonWrapper.DsaTagFromCpu_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.DsaTagFromCpu_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.DsaTagFromCpu_UP_get, _PythonWrapper.DsaTagFromCpu_UP_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.DsaTagFromCpu_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.DsaTagFromCpu_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.DsaTagFromCpu_Extended_get, _PythonWrapper.DsaTagFromCpu_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.DsaTagFromCpu_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.DsaTagFromCpu_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.DsaTagFromCpu_VlanID_get, _PythonWrapper.DsaTagFromCpu_VlanID_set)
DsaTagFromCpu_swigregister = _PythonWrapper.DsaTagFromCpu_swigregister
DsaTagFromCpu_swigregister(DsaTagFromCpu)

class DsaTagFromCpuUseVidx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DsaTagFromCpuUseVidx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DsaTagFromCpuUseVidx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_DsaTagFromCpuUseVidx(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.DsaTagFromCpuUseVidx_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_DsaTagFromCpuUseVidx
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.DsaTagFromCpuUseVidx_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.DsaTagFromCpuUseVidx_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.DsaTagFromCpuUseVidx_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.DsaTagFromCpuUseVidx_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.DsaTagFromCpuUseVidx_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.DsaTagFromCpuUseVidx_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.DsaTagFromCpuUseVidx_GetElementSize(self)

    def ToString(self):
        return _PythonWrapper.DsaTagFromCpuUseVidx_ToString(self)

    def GetElementToolTip(self):
        return _PythonWrapper.DsaTagFromCpuUseVidx_GetElementToolTip(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.DsaTagFromCpuUseVidx_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.DsaTagFromCpuUseVidx_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidx_TagCommand_get, _PythonWrapper.DsaTagFromCpuUseVidx_TagCommand_set)
    __swig_setmethods__["TrgTagged"] = _PythonWrapper.DsaTagFromCpuUseVidx_TrgTagged_set
    __swig_getmethods__["TrgTagged"] = _PythonWrapper.DsaTagFromCpuUseVidx_TrgTagged_get
    if _newclass:
        TrgTagged = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidx_TrgTagged_get, _PythonWrapper.DsaTagFromCpuUseVidx_TrgTagged_set)
    __swig_setmethods__["vidx_0_9"] = _PythonWrapper.DsaTagFromCpuUseVidx_vidx_0_9_set
    __swig_getmethods__["vidx_0_9"] = _PythonWrapper.DsaTagFromCpuUseVidx_vidx_0_9_get
    if _newclass:
        vidx_0_9 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidx_vidx_0_9_get, _PythonWrapper.DsaTagFromCpuUseVidx_vidx_0_9_set)
    __swig_setmethods__["use_vidx"] = _PythonWrapper.DsaTagFromCpuUseVidx_use_vidx_set
    __swig_getmethods__["use_vidx"] = _PythonWrapper.DsaTagFromCpuUseVidx_use_vidx_get
    if _newclass:
        use_vidx = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidx_use_vidx_get, _PythonWrapper.DsaTagFromCpuUseVidx_use_vidx_set)
    __swig_setmethods__["TC_0_1"] = _PythonWrapper.DsaTagFromCpuUseVidx_TC_0_1_set
    __swig_getmethods__["TC_0_1"] = _PythonWrapper.DsaTagFromCpuUseVidx_TC_0_1_get
    if _newclass:
        TC_0_1 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidx_TC_0_1_get, _PythonWrapper.DsaTagFromCpuUseVidx_TC_0_1_set)
    __swig_setmethods__["UP"] = _PythonWrapper.DsaTagFromCpuUseVidx_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.DsaTagFromCpuUseVidx_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidx_UP_get, _PythonWrapper.DsaTagFromCpuUseVidx_UP_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.DsaTagFromCpuUseVidx_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.DsaTagFromCpuUseVidx_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidx_Extended_get, _PythonWrapper.DsaTagFromCpuUseVidx_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.DsaTagFromCpuUseVidx_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.DsaTagFromCpuUseVidx_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidx_VlanID_get, _PythonWrapper.DsaTagFromCpuUseVidx_VlanID_set)
DsaTagFromCpuUseVidx_swigregister = _PythonWrapper.DsaTagFromCpuUseVidx_swigregister
DsaTagFromCpuUseVidx_swigregister(DsaTagFromCpuUseVidx)

class Puma1DsaTagFromCpuExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Puma1DsaTagFromCpuExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Puma1DsaTagFromCpuExt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Puma1DsaTagFromCpuExt(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_Puma1DsaTagFromCpuExt
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_SetElementFieldsStringData(self, sDataVec)

    def GetElementToolTip(self):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.Puma1DsaTagFromCpuExt_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_TagCommand_get, _PythonWrapper.Puma1DsaTagFromCpuExt_TagCommand_set)
    __swig_setmethods__["TrgTagged"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgTagged_set
    __swig_getmethods__["TrgTagged"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgTagged_get
    if _newclass:
        TrgTagged = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_TrgTagged_get, _PythonWrapper.Puma1DsaTagFromCpuExt_TrgTagged_set)
    __swig_setmethods__["TrgDev_0_4"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgDev_0_4_set
    __swig_getmethods__["TrgDev_0_4"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgDev_0_4_get
    if _newclass:
        TrgDev_0_4 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_TrgDev_0_4_get, _PythonWrapper.Puma1DsaTagFromCpuExt_TrgDev_0_4_set)
    __swig_setmethods__["TrgPort_0_4"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgPort_0_4_set
    __swig_getmethods__["TrgPort_0_4"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgPort_0_4_get
    if _newclass:
        TrgPort_0_4 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_TrgPort_0_4_get, _PythonWrapper.Puma1DsaTagFromCpuExt_TrgPort_0_4_set)
    __swig_setmethods__["use_vidx"] = _PythonWrapper.Puma1DsaTagFromCpuExt_use_vidx_set
    __swig_getmethods__["use_vidx"] = _PythonWrapper.Puma1DsaTagFromCpuExt_use_vidx_get
    if _newclass:
        use_vidx = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_use_vidx_get, _PythonWrapper.Puma1DsaTagFromCpuExt_use_vidx_set)
    __swig_setmethods__["TC_0"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TC_0_set
    __swig_getmethods__["TC_0"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TC_0_get
    if _newclass:
        TC_0 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_TC_0_get, _PythonWrapper.Puma1DsaTagFromCpuExt_TC_0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.Puma1DsaTagFromCpuExt_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.Puma1DsaTagFromCpuExt_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_CFI_get, _PythonWrapper.Puma1DsaTagFromCpuExt_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.Puma1DsaTagFromCpuExt_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.Puma1DsaTagFromCpuExt_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_UP_get, _PythonWrapper.Puma1DsaTagFromCpuExt_UP_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_Extended_get, _PythonWrapper.Puma1DsaTagFromCpuExt_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.Puma1DsaTagFromCpuExt_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.Puma1DsaTagFromCpuExt_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_VlanID_get, _PythonWrapper.Puma1DsaTagFromCpuExt_VlanID_set)
    __swig_setmethods__["Extend"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Extend_set
    __swig_getmethods__["Extend"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Extend_get
    if _newclass:
        Extend = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_Extend_get, _PythonWrapper.Puma1DsaTagFromCpuExt_Extend_set)
    __swig_setmethods__["EgressFilterEn"] = _PythonWrapper.Puma1DsaTagFromCpuExt_EgressFilterEn_set
    __swig_getmethods__["EgressFilterEn"] = _PythonWrapper.Puma1DsaTagFromCpuExt_EgressFilterEn_get
    if _newclass:
        EgressFilterEn = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_EgressFilterEn_get, _PythonWrapper.Puma1DsaTagFromCpuExt_EgressFilterEn_set)
    __swig_setmethods__["CascadeControl"] = _PythonWrapper.Puma1DsaTagFromCpuExt_CascadeControl_set
    __swig_getmethods__["CascadeControl"] = _PythonWrapper.Puma1DsaTagFromCpuExt_CascadeControl_get
    if _newclass:
        CascadeControl = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_CascadeControl_get, _PythonWrapper.Puma1DsaTagFromCpuExt_CascadeControl_set)
    __swig_setmethods__["EgressFilterReg"] = _PythonWrapper.Puma1DsaTagFromCpuExt_EgressFilterReg_set
    __swig_getmethods__["EgressFilterReg"] = _PythonWrapper.Puma1DsaTagFromCpuExt_EgressFilterReg_get
    if _newclass:
        EgressFilterReg = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_EgressFilterReg_get, _PythonWrapper.Puma1DsaTagFromCpuExt_EgressFilterReg_set)
    __swig_setmethods__["TC_2"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TC_2_set
    __swig_getmethods__["TC_2"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TC_2_get
    if _newclass:
        TC_2 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_TC_2_get, _PythonWrapper.Puma1DsaTagFromCpuExt_TC_2_set)
    __swig_setmethods__["DP_0_1"] = _PythonWrapper.Puma1DsaTagFromCpuExt_DP_0_1_set
    __swig_getmethods__["DP_0_1"] = _PythonWrapper.Puma1DsaTagFromCpuExt_DP_0_1_get
    if _newclass:
        DP_0_1 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_DP_0_1_get, _PythonWrapper.Puma1DsaTagFromCpuExt_DP_0_1_set)
    __swig_setmethods__["SST_ID"] = _PythonWrapper.Puma1DsaTagFromCpuExt_SST_ID_set
    __swig_getmethods__["SST_ID"] = _PythonWrapper.Puma1DsaTagFromCpuExt_SST_ID_get
    if _newclass:
        SST_ID = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_SST_ID_get, _PythonWrapper.Puma1DsaTagFromCpuExt_SST_ID_set)
    __swig_setmethods__["TrgDev_5_6"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgDev_5_6_set
    __swig_getmethods__["TrgDev_5_6"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgDev_5_6_get
    if _newclass:
        TrgDev_5_6 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_TrgDev_5_6_get, _PythonWrapper.Puma1DsaTagFromCpuExt_TrgDev_5_6_set)
    __swig_setmethods__["Reserved_MLL_Ptr"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_MLL_Ptr_set
    __swig_getmethods__["Reserved_MLL_Ptr"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_MLL_Ptr_get
    if _newclass:
        Reserved_MLL_Ptr = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_MLL_Ptr_get, _PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_MLL_Ptr_set)
    __swig_setmethods__["IsMLL"] = _PythonWrapper.Puma1DsaTagFromCpuExt_IsMLL_set
    __swig_getmethods__["IsMLL"] = _PythonWrapper.Puma1DsaTagFromCpuExt_IsMLL_get
    if _newclass:
        IsMLL = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_IsMLL_get, _PythonWrapper.Puma1DsaTagFromCpuExt_IsMLL_set)
    __swig_setmethods__["TC_1"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TC_1_set
    __swig_getmethods__["TC_1"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TC_1_get
    if _newclass:
        TC_1 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_TC_1_get, _PythonWrapper.Puma1DsaTagFromCpuExt_TC_1_set)
    __swig_setmethods__["MailBoxToNeighborCPU"] = _PythonWrapper.Puma1DsaTagFromCpuExt_MailBoxToNeighborCPU_set
    __swig_getmethods__["MailBoxToNeighborCPU"] = _PythonWrapper.Puma1DsaTagFromCpuExt_MailBoxToNeighborCPU_get
    if _newclass:
        MailBoxToNeighborCPU = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_MailBoxToNeighborCPU_get, _PythonWrapper.Puma1DsaTagFromCpuExt_MailBoxToNeighborCPU_set)
    __swig_setmethods__["Reserved_w1_bits11_12"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_w1_bits11_12_set
    __swig_getmethods__["Reserved_w1_bits11_12"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_w1_bits11_12_get
    if _newclass:
        Reserved_w1_bits11_12 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_w1_bits11_12_get, _PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_w1_bits11_12_set)
    __swig_setmethods__["TrgPort_5"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgPort_5_set
    __swig_getmethods__["TrgPort_5"] = _PythonWrapper.Puma1DsaTagFromCpuExt_TrgPort_5_get
    if _newclass:
        TrgPort_5 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_TrgPort_5_get, _PythonWrapper.Puma1DsaTagFromCpuExt_TrgPort_5_set)
    __swig_setmethods__["Reserved_w1_bits0_9"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_w1_bits0_9_set
    __swig_getmethods__["Reserved_w1_bits0_9"] = _PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_w1_bits0_9_get
    if _newclass:
        Reserved_w1_bits0_9 = _swig_property(_PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_w1_bits0_9_get, _PythonWrapper.Puma1DsaTagFromCpuExt_Reserved_w1_bits0_9_set)
Puma1DsaTagFromCpuExt_swigregister = _PythonWrapper.Puma1DsaTagFromCpuExt_swigregister
Puma1DsaTagFromCpuExt_swigregister(Puma1DsaTagFromCpuExt)

class DsaTagFromCpuUseVidxExtended(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DsaTagFromCpuUseVidxExtended, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DsaTagFromCpuUseVidxExtended, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_DsaTagFromCpuUseVidxExtended(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_DsaTagFromCpuUseVidxExtended
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_GetElementToolTip(self)

    def ToString(self):
        return _PythonWrapper.DsaTagFromCpuUseVidxExtended_ToString(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_TagCommand_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_TagCommand_set)
    __swig_setmethods__["TrgTagged"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgTagged_set
    __swig_getmethods__["TrgTagged"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgTagged_get
    if _newclass:
        TrgTagged = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgTagged_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgTagged_set)
    __swig_setmethods__["TrgDev_0_4"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgDev_0_4_set
    __swig_getmethods__["TrgDev_0_4"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgDev_0_4_get
    if _newclass:
        TrgDev_0_4 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgDev_0_4_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgDev_0_4_set)
    __swig_setmethods__["TrgPort_0_4"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgPort_0_4_set
    __swig_getmethods__["TrgPort_0_4"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgPort_0_4_get
    if _newclass:
        TrgPort_0_4 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgPort_0_4_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgPort_0_4_set)
    __swig_setmethods__["use_vidx"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_use_vidx_set
    __swig_getmethods__["use_vidx"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_use_vidx_get
    if _newclass:
        use_vidx = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_use_vidx_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_use_vidx_set)
    __swig_setmethods__["TC_0"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_0_set
    __swig_getmethods__["TC_0"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_0_get
    if _newclass:
        TC_0 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_0_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_CFI_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_UP_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_UP_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_Extended_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_VlanID_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_VlanID_set)
    __swig_setmethods__["Extend"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Extend_set
    __swig_getmethods__["Extend"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Extend_get
    if _newclass:
        Extend = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_Extend_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_Extend_set)
    __swig_setmethods__["EgressFilterEn"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_EgressFilterEn_set
    __swig_getmethods__["EgressFilterEn"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_EgressFilterEn_get
    if _newclass:
        EgressFilterEn = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_EgressFilterEn_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_EgressFilterEn_set)
    __swig_setmethods__["CascadeControl"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_CascadeControl_set
    __swig_getmethods__["CascadeControl"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_CascadeControl_get
    if _newclass:
        CascadeControl = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_CascadeControl_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_CascadeControl_set)
    __swig_setmethods__["EgressFilterReg"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_EgressFilterReg_set
    __swig_getmethods__["EgressFilterReg"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_EgressFilterReg_get
    if _newclass:
        EgressFilterReg = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_EgressFilterReg_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_EgressFilterReg_set)
    __swig_setmethods__["TC_2"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_2_set
    __swig_getmethods__["TC_2"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_2_get
    if _newclass:
        TC_2 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_2_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_2_set)
    __swig_setmethods__["DP_0_1"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_DP_0_1_set
    __swig_getmethods__["DP_0_1"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_DP_0_1_get
    if _newclass:
        DP_0_1 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_DP_0_1_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_DP_0_1_set)
    __swig_setmethods__["SST_ID"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_SST_ID_set
    __swig_getmethods__["SST_ID"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_SST_ID_get
    if _newclass:
        SST_ID = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_SST_ID_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_SST_ID_set)
    __swig_setmethods__["TrgDev_5_6"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgDev_5_6_set
    __swig_getmethods__["TrgDev_5_6"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgDev_5_6_get
    if _newclass:
        TrgDev_5_6 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgDev_5_6_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_TrgDev_5_6_set)
    __swig_setmethods__["Reserved_MLL_Ptr"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_MLL_Ptr_set
    __swig_getmethods__["Reserved_MLL_Ptr"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_MLL_Ptr_get
    if _newclass:
        Reserved_MLL_Ptr = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_MLL_Ptr_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_MLL_Ptr_set)
    __swig_setmethods__["IsMLL"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_IsMLL_set
    __swig_getmethods__["IsMLL"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_IsMLL_get
    if _newclass:
        IsMLL = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_IsMLL_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_IsMLL_set)
    __swig_setmethods__["TC_1"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_1_set
    __swig_getmethods__["TC_1"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_1_get
    if _newclass:
        TC_1 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_1_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_TC_1_set)
    __swig_setmethods__["vidx_10_11"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_vidx_10_11_set
    __swig_getmethods__["vidx_10_11"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_vidx_10_11_get
    if _newclass:
        vidx_10_11 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_vidx_10_11_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_vidx_10_11_set)
    __swig_setmethods__["ExcludeIsTrunk"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_ExcludeIsTrunk_set
    __swig_getmethods__["ExcludeIsTrunk"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_ExcludeIsTrunk_get
    if _newclass:
        ExcludeIsTrunk = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_ExcludeIsTrunk_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_ExcludeIsTrunk_set)
    __swig_setmethods__["data_w1_bits_0_10"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_data_w1_bits_0_10_set
    __swig_getmethods__["data_w1_bits_0_10"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_data_w1_bits_0_10_get
    if _newclass:
        data_w1_bits_0_10 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_data_w1_bits_0_10_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_data_w1_bits_0_10_set)
    __swig_setmethods__["MirrorToAllCPUs"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_MirrorToAllCPUs_set
    __swig_getmethods__["MirrorToAllCPUs"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_MirrorToAllCPUs_get
    if _newclass:
        MirrorToAllCPUs = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_MirrorToAllCPUs_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_MirrorToAllCPUs_set)
    __swig_setmethods__["Reserved_w1_bits_8_9"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_w1_bits_8_9_set
    __swig_getmethods__["Reserved_w1_bits_8_9"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_w1_bits_8_9_get
    if _newclass:
        Reserved_w1_bits_8_9 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_w1_bits_8_9_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_w1_bits_8_9_set)
    __swig_setmethods__["ExcludedTrunk_0_7"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_ExcludedTrunk_0_7_set
    __swig_getmethods__["ExcludedTrunk_0_7"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_ExcludedTrunk_0_7_get
    if _newclass:
        ExcludedTrunk_0_7 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_ExcludedTrunk_0_7_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_ExcludedTrunk_0_7_set)
    __swig_setmethods__["Reserved_w1_bits_0_10"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_w1_bits_0_10_set
    __swig_getmethods__["Reserved_w1_bits_0_10"] = _PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_w1_bits_0_10_get
    if _newclass:
        Reserved_w1_bits_0_10 = _swig_property(_PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_w1_bits_0_10_get, _PythonWrapper.DsaTagFromCpuUseVidxExtended_Reserved_w1_bits_0_10_set)
DsaTagFromCpuUseVidxExtended_swigregister = _PythonWrapper.DsaTagFromCpuUseVidxExtended_swigregister
DsaTagFromCpuUseVidxExtended_swigregister(DsaTagFromCpuUseVidxExtended)

class DsaTagSniffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DsaTagSniffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DsaTagSniffer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_DsaTagSniffer(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.DsaTagSniffer_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_DsaTagSniffer
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.DsaTagSniffer_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.DsaTagSniffer_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.DsaTagSniffer_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.DsaTagSniffer_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.DsaTagSniffer_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.DsaTagSniffer_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.DsaTagSniffer_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.DsaTagSniffer_GetElementToolTip(self)

    def ToString(self):
        return _PythonWrapper.DsaTagSniffer_ToString(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.DsaTagSniffer_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.DsaTagSniffer_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.DsaTagSniffer_TagCommand_get, _PythonWrapper.DsaTagSniffer_TagCommand_set)
    __swig_setmethods__["SrcDestTagged"] = _PythonWrapper.DsaTagSniffer_SrcDestTagged_set
    __swig_getmethods__["SrcDestTagged"] = _PythonWrapper.DsaTagSniffer_SrcDestTagged_get
    if _newclass:
        SrcDestTagged = _swig_property(_PythonWrapper.DsaTagSniffer_SrcDestTagged_get, _PythonWrapper.DsaTagSniffer_SrcDestTagged_set)
    __swig_setmethods__["SrcDev"] = _PythonWrapper.DsaTagSniffer_SrcDev_set
    __swig_getmethods__["SrcDev"] = _PythonWrapper.DsaTagSniffer_SrcDev_get
    if _newclass:
        SrcDev = _swig_property(_PythonWrapper.DsaTagSniffer_SrcDev_get, _PythonWrapper.DsaTagSniffer_SrcDev_set)
    __swig_setmethods__["SrcPort"] = _PythonWrapper.DsaTagSniffer_SrcPort_set
    __swig_getmethods__["SrcPort"] = _PythonWrapper.DsaTagSniffer_SrcPort_get
    if _newclass:
        SrcPort = _swig_property(_PythonWrapper.DsaTagSniffer_SrcPort_get, _PythonWrapper.DsaTagSniffer_SrcPort_set)
    __swig_setmethods__["RxSniffer"] = _PythonWrapper.DsaTagSniffer_RxSniffer_set
    __swig_getmethods__["RxSniffer"] = _PythonWrapper.DsaTagSniffer_RxSniffer_get
    if _newclass:
        RxSniffer = _swig_property(_PythonWrapper.DsaTagSniffer_RxSniffer_get, _PythonWrapper.DsaTagSniffer_RxSniffer_set)
    __swig_setmethods__["Reserved"] = _PythonWrapper.DsaTagSniffer_Reserved_set
    __swig_getmethods__["Reserved"] = _PythonWrapper.DsaTagSniffer_Reserved_get
    if _newclass:
        Reserved = _swig_property(_PythonWrapper.DsaTagSniffer_Reserved_get, _PythonWrapper.DsaTagSniffer_Reserved_set)
    __swig_setmethods__["PktVpt"] = _PythonWrapper.DsaTagSniffer_PktVpt_set
    __swig_getmethods__["PktVpt"] = _PythonWrapper.DsaTagSniffer_PktVpt_get
    if _newclass:
        PktVpt = _swig_property(_PythonWrapper.DsaTagSniffer_PktVpt_get, _PythonWrapper.DsaTagSniffer_PktVpt_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.DsaTagSniffer_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.DsaTagSniffer_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.DsaTagSniffer_Extended_get, _PythonWrapper.DsaTagSniffer_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.DsaTagSniffer_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.DsaTagSniffer_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.DsaTagSniffer_VlanID_get, _PythonWrapper.DsaTagSniffer_VlanID_set)
DsaTagSniffer_swigregister = _PythonWrapper.DsaTagSniffer_swigregister
DsaTagSniffer_swigregister(DsaTagSniffer)

class Puma1DsaTagSnifferExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Puma1DsaTagSnifferExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Puma1DsaTagSnifferExt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Puma1DsaTagSnifferExt(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Puma1DsaTagSnifferExt_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_Puma1DsaTagSnifferExt
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.Puma1DsaTagSnifferExt_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Puma1DsaTagSnifferExt_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.Puma1DsaTagSnifferExt_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Puma1DsaTagSnifferExt_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Puma1DsaTagSnifferExt_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Puma1DsaTagSnifferExt_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Puma1DsaTagSnifferExt_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.Puma1DsaTagSnifferExt_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.Puma1DsaTagSnifferExt_GetElementToolTip(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.Puma1DsaTagSnifferExt_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.Puma1DsaTagSnifferExt_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_TagCommand_get, _PythonWrapper.Puma1DsaTagSnifferExt_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgTagged_get, _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgTagged_set)
    __swig_setmethods__["SrcTrgDev_0_4"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgDev_0_4_set
    __swig_getmethods__["SrcTrgDev_0_4"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgDev_0_4_get
    if _newclass:
        SrcTrgDev_0_4 = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgDev_0_4_get, _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgDev_0_4_set)
    __swig_setmethods__["SrcTrgPort_0_4"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgPort_0_4_set
    __swig_getmethods__["SrcTrgPort_0_4"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgPort_0_4_get
    if _newclass:
        SrcTrgPort_0_4 = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgPort_0_4_get, _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgPort_0_4_set)
    __swig_setmethods__["RxSniffer"] = _PythonWrapper.Puma1DsaTagSnifferExt_RxSniffer_set
    __swig_getmethods__["RxSniffer"] = _PythonWrapper.Puma1DsaTagSnifferExt_RxSniffer_get
    if _newclass:
        RxSniffer = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_RxSniffer_get, _PythonWrapper.Puma1DsaTagSnifferExt_RxSniffer_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.Puma1DsaTagSnifferExt_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.Puma1DsaTagSnifferExt_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_Reserved1_get, _PythonWrapper.Puma1DsaTagSnifferExt_Reserved1_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.Puma1DsaTagSnifferExt_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.Puma1DsaTagSnifferExt_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_CFI_get, _PythonWrapper.Puma1DsaTagSnifferExt_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.Puma1DsaTagSnifferExt_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.Puma1DsaTagSnifferExt_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_UP_get, _PythonWrapper.Puma1DsaTagSnifferExt_UP_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.Puma1DsaTagSnifferExt_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.Puma1DsaTagSnifferExt_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_Extended_get, _PythonWrapper.Puma1DsaTagSnifferExt_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.Puma1DsaTagSnifferExt_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.Puma1DsaTagSnifferExt_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_VlanID_get, _PythonWrapper.Puma1DsaTagSnifferExt_VlanID_set)
    __swig_setmethods__["Extend"] = _PythonWrapper.Puma1DsaTagSnifferExt_Extend_set
    __swig_getmethods__["Extend"] = _PythonWrapper.Puma1DsaTagSnifferExt_Extend_get
    if _newclass:
        Extend = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_Extend_get, _PythonWrapper.Puma1DsaTagSnifferExt_Extend_set)
    __swig_setmethods__["Reserved2"] = _PythonWrapper.Puma1DsaTagSnifferExt_Reserved2_set
    __swig_getmethods__["Reserved2"] = _PythonWrapper.Puma1DsaTagSnifferExt_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_Reserved2_get, _PythonWrapper.Puma1DsaTagSnifferExt_Reserved2_set)
    __swig_setmethods__["SrcTrgDev_5_6"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgDev_5_6_set
    __swig_getmethods__["SrcTrgDev_5_6"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgDev_5_6_get
    if _newclass:
        SrcTrgDev_5_6 = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgDev_5_6_get, _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgDev_5_6_set)
    __swig_setmethods__["Reserved3"] = _PythonWrapper.Puma1DsaTagSnifferExt_Reserved3_set
    __swig_getmethods__["Reserved3"] = _PythonWrapper.Puma1DsaTagSnifferExt_Reserved3_get
    if _newclass:
        Reserved3 = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_Reserved3_get, _PythonWrapper.Puma1DsaTagSnifferExt_Reserved3_set)
    __swig_setmethods__["SrcTrgPort_5"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgPort_5_set
    __swig_getmethods__["SrcTrgPort_5"] = _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgPort_5_get
    if _newclass:
        SrcTrgPort_5 = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgPort_5_get, _PythonWrapper.Puma1DsaTagSnifferExt_SrcTrgPort_5_set)
    __swig_setmethods__["Reserved4"] = _PythonWrapper.Puma1DsaTagSnifferExt_Reserved4_set
    __swig_getmethods__["Reserved4"] = _PythonWrapper.Puma1DsaTagSnifferExt_Reserved4_get
    if _newclass:
        Reserved4 = _swig_property(_PythonWrapper.Puma1DsaTagSnifferExt_Reserved4_get, _PythonWrapper.Puma1DsaTagSnifferExt_Reserved4_set)
Puma1DsaTagSnifferExt_swigregister = _PythonWrapper.Puma1DsaTagSnifferExt_swigregister
Puma1DsaTagSnifferExt_swigregister(Puma1DsaTagSnifferExt)

class DsaTagForward(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DsaTagForward, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DsaTagForward, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_DsaTagForward(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.DsaTagForward_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_DsaTagForward
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.DsaTagForward_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.DsaTagForward_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.DsaTagForward_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.DsaTagForward_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.DsaTagForward_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.DsaTagForward_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.DsaTagForward_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.DsaTagForward_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.DsaTagForward_GetElementToolTip(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.DsaTagForward_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.DsaTagForward_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.DsaTagForward_TagCommand_get, _PythonWrapper.DsaTagForward_TagCommand_set)
    __swig_setmethods__["SrcTagged"] = _PythonWrapper.DsaTagForward_SrcTagged_set
    __swig_getmethods__["SrcTagged"] = _PythonWrapper.DsaTagForward_SrcTagged_get
    if _newclass:
        SrcTagged = _swig_property(_PythonWrapper.DsaTagForward_SrcTagged_get, _PythonWrapper.DsaTagForward_SrcTagged_set)
    __swig_setmethods__["SrcDev"] = _PythonWrapper.DsaTagForward_SrcDev_set
    __swig_getmethods__["SrcDev"] = _PythonWrapper.DsaTagForward_SrcDev_get
    if _newclass:
        SrcDev = _swig_property(_PythonWrapper.DsaTagForward_SrcDev_get, _PythonWrapper.DsaTagForward_SrcDev_set)
    __swig_setmethods__["SrcPortTrunk"] = _PythonWrapper.DsaTagForward_SrcPortTrunk_set
    __swig_getmethods__["SrcPortTrunk"] = _PythonWrapper.DsaTagForward_SrcPortTrunk_get
    if _newclass:
        SrcPortTrunk = _swig_property(_PythonWrapper.DsaTagForward_SrcPortTrunk_get, _PythonWrapper.DsaTagForward_SrcPortTrunk_set)
    __swig_setmethods__["IsTrunk"] = _PythonWrapper.DsaTagForward_IsTrunk_set
    __swig_getmethods__["IsTrunk"] = _PythonWrapper.DsaTagForward_IsTrunk_get
    if _newclass:
        IsTrunk = _swig_property(_PythonWrapper.DsaTagForward_IsTrunk_get, _PythonWrapper.DsaTagForward_IsTrunk_set)
    __swig_setmethods__["Reserved"] = _PythonWrapper.DsaTagForward_Reserved_set
    __swig_getmethods__["Reserved"] = _PythonWrapper.DsaTagForward_Reserved_get
    if _newclass:
        Reserved = _swig_property(_PythonWrapper.DsaTagForward_Reserved_get, _PythonWrapper.DsaTagForward_Reserved_set)
    __swig_setmethods__["PktVpt"] = _PythonWrapper.DsaTagForward_PktVpt_set
    __swig_getmethods__["PktVpt"] = _PythonWrapper.DsaTagForward_PktVpt_get
    if _newclass:
        PktVpt = _swig_property(_PythonWrapper.DsaTagForward_PktVpt_get, _PythonWrapper.DsaTagForward_PktVpt_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.DsaTagForward_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.DsaTagForward_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.DsaTagForward_Extended_get, _PythonWrapper.DsaTagForward_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.DsaTagForward_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.DsaTagForward_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.DsaTagForward_VlanID_get, _PythonWrapper.DsaTagForward_VlanID_set)
DsaTagForward_swigregister = _PythonWrapper.DsaTagForward_swigregister
DsaTagForward_swigregister(DsaTagForward)

class Puma1DsaTagForwardExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Puma1DsaTagForwardExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Puma1DsaTagForwardExt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Puma1DsaTagForwardExt(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Puma1DsaTagForwardExt_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_Puma1DsaTagForwardExt
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.Puma1DsaTagForwardExt_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Puma1DsaTagForwardExt_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.Puma1DsaTagForwardExt_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Puma1DsaTagForwardExt_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Puma1DsaTagForwardExt_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Puma1DsaTagForwardExt_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Puma1DsaTagForwardExt_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.Puma1DsaTagForwardExt_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.Puma1DsaTagForwardExt_GetElementToolTip(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.Puma1DsaTagForwardExt_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.Puma1DsaTagForwardExt_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_TagCommand_get, _PythonWrapper.Puma1DsaTagForwardExt_TagCommand_set)
    __swig_setmethods__["SrcTagged"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcTagged_set
    __swig_getmethods__["SrcTagged"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcTagged_get
    if _newclass:
        SrcTagged = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_SrcTagged_get, _PythonWrapper.Puma1DsaTagForwardExt_SrcTagged_set)
    __swig_setmethods__["SrcDev"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcDev_set
    __swig_getmethods__["SrcDev"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcDev_get
    if _newclass:
        SrcDev = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_SrcDev_get, _PythonWrapper.Puma1DsaTagForwardExt_SrcDev_set)
    __swig_setmethods__["SrcPortTrunk_0_4"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcPortTrunk_0_4_set
    __swig_getmethods__["SrcPortTrunk_0_4"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcPortTrunk_0_4_get
    if _newclass:
        SrcPortTrunk_0_4 = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_SrcPortTrunk_0_4_get, _PythonWrapper.Puma1DsaTagForwardExt_SrcPortTrunk_0_4_set)
    __swig_setmethods__["IsTrunk"] = _PythonWrapper.Puma1DsaTagForwardExt_IsTrunk_set
    __swig_getmethods__["IsTrunk"] = _PythonWrapper.Puma1DsaTagForwardExt_IsTrunk_get
    if _newclass:
        IsTrunk = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_IsTrunk_get, _PythonWrapper.Puma1DsaTagForwardExt_IsTrunk_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.Puma1DsaTagForwardExt_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.Puma1DsaTagForwardExt_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_Reserved1_get, _PythonWrapper.Puma1DsaTagForwardExt_Reserved1_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.Puma1DsaTagForwardExt_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.Puma1DsaTagForwardExt_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_CFI_get, _PythonWrapper.Puma1DsaTagForwardExt_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.Puma1DsaTagForwardExt_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.Puma1DsaTagForwardExt_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_UP_get, _PythonWrapper.Puma1DsaTagForwardExt_UP_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.Puma1DsaTagForwardExt_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.Puma1DsaTagForwardExt_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_Extended_get, _PythonWrapper.Puma1DsaTagForwardExt_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.Puma1DsaTagForwardExt_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.Puma1DsaTagForwardExt_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_VlanID_get, _PythonWrapper.Puma1DsaTagForwardExt_VlanID_set)
    __swig_setmethods__["Extend"] = _PythonWrapper.Puma1DsaTagForwardExt_Extend_set
    __swig_getmethods__["Extend"] = _PythonWrapper.Puma1DsaTagForwardExt_Extend_get
    if _newclass:
        Extend = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_Extend_get, _PythonWrapper.Puma1DsaTagForwardExt_Extend_set)
    __swig_setmethods__["SrcTrunk_5_6_ResSrcPort5"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcTrunk_5_6_ResSrcPort5_set
    __swig_getmethods__["SrcTrunk_5_6_ResSrcPort5"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcTrunk_5_6_ResSrcPort5_get
    if _newclass:
        SrcTrunk_5_6_ResSrcPort5 = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_SrcTrunk_5_6_ResSrcPort5_get, _PythonWrapper.Puma1DsaTagForwardExt_SrcTrunk_5_6_ResSrcPort5_set)
    __swig_setmethods__["EgressFilterReg"] = _PythonWrapper.Puma1DsaTagForwardExt_EgressFilterReg_set
    __swig_getmethods__["EgressFilterReg"] = _PythonWrapper.Puma1DsaTagForwardExt_EgressFilterReg_get
    if _newclass:
        EgressFilterReg = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_EgressFilterReg_get, _PythonWrapper.Puma1DsaTagForwardExt_EgressFilterReg_set)
    __swig_setmethods__["Reserved2"] = _PythonWrapper.Puma1DsaTagForwardExt_Reserved2_set
    __swig_getmethods__["Reserved2"] = _PythonWrapper.Puma1DsaTagForwardExt_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_Reserved2_get, _PythonWrapper.Puma1DsaTagForwardExt_Reserved2_set)
    __swig_setmethods__["Routed"] = _PythonWrapper.Puma1DsaTagForwardExt_Routed_set
    __swig_getmethods__["Routed"] = _PythonWrapper.Puma1DsaTagForwardExt_Routed_get
    if _newclass:
        Routed = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_Routed_get, _PythonWrapper.Puma1DsaTagForwardExt_Routed_set)
    __swig_setmethods__["SrcID"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcID_set
    __swig_getmethods__["SrcID"] = _PythonWrapper.Puma1DsaTagForwardExt_SrcID_get
    if _newclass:
        SrcID = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_SrcID_get, _PythonWrapper.Puma1DsaTagForwardExt_SrcID_set)
    __swig_setmethods__["Bits_19_13"] = _PythonWrapper.Puma1DsaTagForwardExt_Bits_19_13_set
    __swig_getmethods__["Bits_19_13"] = _PythonWrapper.Puma1DsaTagForwardExt_Bits_19_13_get
    if _newclass:
        Bits_19_13 = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_Bits_19_13_get, _PythonWrapper.Puma1DsaTagForwardExt_Bits_19_13_set)
    __swig_setmethods__["UseVidx"] = _PythonWrapper.Puma1DsaTagForwardExt_UseVidx_set
    __swig_getmethods__["UseVidx"] = _PythonWrapper.Puma1DsaTagForwardExt_UseVidx_get
    if _newclass:
        UseVidx = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_UseVidx_get, _PythonWrapper.Puma1DsaTagForwardExt_UseVidx_set)
    __swig_setmethods__["Bits_11_0"] = _PythonWrapper.Puma1DsaTagForwardExt_Bits_11_0_set
    __swig_getmethods__["Bits_11_0"] = _PythonWrapper.Puma1DsaTagForwardExt_Bits_11_0_get
    if _newclass:
        Bits_11_0 = _swig_property(_PythonWrapper.Puma1DsaTagForwardExt_Bits_11_0_get, _PythonWrapper.Puma1DsaTagForwardExt_Bits_11_0_set)
Puma1DsaTagForwardExt_swigregister = _PythonWrapper.Puma1DsaTagForwardExt_swigregister
Puma1DsaTagForwardExt_swigregister(Puma1DsaTagForwardExt)

class CiscoTag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CiscoTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CiscoTag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_CiscoTag(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.CiscoTag_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_CiscoTag
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.CiscoTag_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.CiscoTag_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.CiscoTag_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.CiscoTag_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.CiscoTag_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.CiscoTag_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.CiscoTag_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.CiscoTag_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.CiscoTag_GetElementToolTip(self)
    __swig_setmethods__["PktLength_0_13"] = _PythonWrapper.CiscoTag_PktLength_0_13_set
    __swig_getmethods__["PktLength_0_13"] = _PythonWrapper.CiscoTag_PktLength_0_13_get
    if _newclass:
        PktLength_0_13 = _swig_property(_PythonWrapper.CiscoTag_PktLength_0_13_get, _PythonWrapper.CiscoTag_PktLength_0_13_set)
    __swig_setmethods__["PktIsBPDU"] = _PythonWrapper.CiscoTag_PktIsBPDU_set
    __swig_getmethods__["PktIsBPDU"] = _PythonWrapper.CiscoTag_PktIsBPDU_get
    if _newclass:
        PktIsBPDU = _swig_property(_PythonWrapper.CiscoTag_PktIsBPDU_get, _PythonWrapper.CiscoTag_PktIsBPDU_set)
    __swig_setmethods__["Pkt1QEncap"] = _PythonWrapper.CiscoTag_Pkt1QEncap_set
    __swig_getmethods__["Pkt1QEncap"] = _PythonWrapper.CiscoTag_Pkt1QEncap_get
    if _newclass:
        Pkt1QEncap = _swig_property(_PythonWrapper.CiscoTag_Pkt1QEncap_get, _PythonWrapper.CiscoTag_Pkt1QEncap_set)
    __swig_setmethods__["Pkt1QoS_0_2"] = _PythonWrapper.CiscoTag_Pkt1QoS_0_2_set
    __swig_getmethods__["Pkt1QoS_0_2"] = _PythonWrapper.CiscoTag_Pkt1QoS_0_2_get
    if _newclass:
        Pkt1QoS_0_2 = _swig_property(_PythonWrapper.CiscoTag_Pkt1QoS_0_2_get, _PythonWrapper.CiscoTag_Pkt1QoS_0_2_set)
    __swig_setmethods__["Reserved"] = _PythonWrapper.CiscoTag_Reserved_set
    __swig_getmethods__["Reserved"] = _PythonWrapper.CiscoTag_Reserved_get
    if _newclass:
        Reserved = _swig_property(_PythonWrapper.CiscoTag_Reserved_get, _PythonWrapper.CiscoTag_Reserved_set)
    __swig_setmethods__["CpuCode"] = _PythonWrapper.CiscoTag_CpuCode_set
    __swig_getmethods__["CpuCode"] = _PythonWrapper.CiscoTag_CpuCode_get
    if _newclass:
        CpuCode = _swig_property(_PythonWrapper.CiscoTag_CpuCode_get, _PythonWrapper.CiscoTag_CpuCode_set)
CiscoTag_swigregister = _PythonWrapper.CiscoTag_swigregister
CiscoTag_swigregister(CiscoTag)

class Ch3DsaTagToCpuExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ch3DsaTagToCpuExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ch3DsaTagToCpuExt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Ch3DsaTagToCpuExt(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Ch3DsaTagToCpuExt_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_Ch3DsaTagToCpuExt
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.Ch3DsaTagToCpuExt_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Ch3DsaTagToCpuExt_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.Ch3DsaTagToCpuExt_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Ch3DsaTagToCpuExt_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Ch3DsaTagToCpuExt_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Ch3DsaTagToCpuExt_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Ch3DsaTagToCpuExt_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.Ch3DsaTagToCpuExt_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.Ch3DsaTagToCpuExt_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.Ch3DsaTagToCpuExt_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.Ch3DsaTagToCpuExt_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_TagCommand_get, _PythonWrapper.Ch3DsaTagToCpuExt_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_SrcTrgTagged_get, _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrgTagged_set)
    __swig_setmethods__["SrcTrgDev"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrgDev_set
    __swig_getmethods__["SrcTrgDev"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrgDev_get
    if _newclass:
        SrcTrgDev = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_SrcTrgDev_get, _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrgDev_set)
    __swig_setmethods__["SrcPortSrcTrunkTrgPort_0_4"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcPortSrcTrunkTrgPort_0_4_set
    __swig_getmethods__["SrcPortSrcTrunkTrgPort_0_4"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcPortSrcTrunkTrgPort_0_4_get
    if _newclass:
        SrcPortSrcTrunkTrgPort_0_4 = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_SrcPortSrcTrunkTrgPort_0_4_get, _PythonWrapper.Ch3DsaTagToCpuExt_SrcPortSrcTrunkTrgPort_0_4_set)
    __swig_setmethods__["CpuCode_1_3"] = _PythonWrapper.Ch3DsaTagToCpuExt_CpuCode_1_3_set
    __swig_getmethods__["CpuCode_1_3"] = _PythonWrapper.Ch3DsaTagToCpuExt_CpuCode_1_3_get
    if _newclass:
        CpuCode_1_3 = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_CpuCode_1_3_get, _PythonWrapper.Ch3DsaTagToCpuExt_CpuCode_1_3_set)
    __swig_setmethods__["UP"] = _PythonWrapper.Ch3DsaTagToCpuExt_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.Ch3DsaTagToCpuExt_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_UP_get, _PythonWrapper.Ch3DsaTagToCpuExt_UP_set)
    __swig_setmethods__["CpuCode_0"] = _PythonWrapper.Ch3DsaTagToCpuExt_CpuCode_0_set
    __swig_getmethods__["CpuCode_0"] = _PythonWrapper.Ch3DsaTagToCpuExt_CpuCode_0_get
    if _newclass:
        CpuCode_0 = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_CpuCode_0_get, _PythonWrapper.Ch3DsaTagToCpuExt_CpuCode_0_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.Ch3DsaTagToCpuExt_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.Ch3DsaTagToCpuExt_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_VlanID_get, _PythonWrapper.Ch3DsaTagToCpuExt_VlanID_set)
    __swig_setmethods__["Extend"] = _PythonWrapper.Ch3DsaTagToCpuExt_Extend_set
    __swig_getmethods__["Extend"] = _PythonWrapper.Ch3DsaTagToCpuExt_Extend_get
    if _newclass:
        Extend = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_Extend_get, _PythonWrapper.Ch3DsaTagToCpuExt_Extend_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.Ch3DsaTagToCpuExt_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.Ch3DsaTagToCpuExt_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_CFI_get, _PythonWrapper.Ch3DsaTagToCpuExt_CFI_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.Ch3DsaTagToCpuExt_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.Ch3DsaTagToCpuExt_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_DropOnSource_get, _PythonWrapper.Ch3DsaTagToCpuExt_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.Ch3DsaTagToCpuExt_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.Ch3DsaTagToCpuExt_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_PacketIsLooped_get, _PythonWrapper.Ch3DsaTagToCpuExt_PacketIsLooped_set)
    __swig_setmethods__["OrigIsTrunk"] = _PythonWrapper.Ch3DsaTagToCpuExt_OrigIsTrunk_set
    __swig_getmethods__["OrigIsTrunk"] = _PythonWrapper.Ch3DsaTagToCpuExt_OrigIsTrunk_get
    if _newclass:
        OrigIsTrunk = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_OrigIsTrunk_get, _PythonWrapper.Ch3DsaTagToCpuExt_OrigIsTrunk_set)
    __swig_setmethods__["Truncated"] = _PythonWrapper.Ch3DsaTagToCpuExt_Truncated_set
    __swig_getmethods__["Truncated"] = _PythonWrapper.Ch3DsaTagToCpuExt_Truncated_get
    if _newclass:
        Truncated = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_Truncated_get, _PythonWrapper.Ch3DsaTagToCpuExt_Truncated_set)
    __swig_setmethods__["PktOrigBC"] = _PythonWrapper.Ch3DsaTagToCpuExt_PktOrigBC_set
    __swig_getmethods__["PktOrigBC"] = _PythonWrapper.Ch3DsaTagToCpuExt_PktOrigBC_get
    if _newclass:
        PktOrigBC = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_PktOrigBC_get, _PythonWrapper.Ch3DsaTagToCpuExt_PktOrigBC_set)
    __swig_setmethods__["SrcTrunk_6"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrunk_6_set
    __swig_getmethods__["SrcTrunk_6"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrunk_6_get
    if _newclass:
        SrcTrunk_6 = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_SrcTrunk_6_get, _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrunk_6_set)
    __swig_setmethods__["SrcPortSrcTrunkTrgPort_5"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcPortSrcTrunkTrgPort_5_set
    __swig_getmethods__["SrcPortSrcTrunkTrgPort_5"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcPortSrcTrunkTrgPort_5_get
    if _newclass:
        SrcPortSrcTrunkTrgPort_5 = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_SrcPortSrcTrunkTrgPort_5_get, _PythonWrapper.Ch3DsaTagToCpuExt_SrcPortSrcTrunkTrgPort_5_set)
    __swig_setmethods__["Reserved"] = _PythonWrapper.Ch3DsaTagToCpuExt_Reserved_set
    __swig_getmethods__["Reserved"] = _PythonWrapper.Ch3DsaTagToCpuExt_Reserved_get
    if _newclass:
        Reserved = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_Reserved_get, _PythonWrapper.Ch3DsaTagToCpuExt_Reserved_set)
    __swig_setmethods__["SrcTrg"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrg_set
    __swig_getmethods__["SrcTrg"] = _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrg_get
    if _newclass:
        SrcTrg = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_SrcTrg_get, _PythonWrapper.Ch3DsaTagToCpuExt_SrcTrg_set)
    __swig_setmethods__["LongCpuCode"] = _PythonWrapper.Ch3DsaTagToCpuExt_LongCpuCode_set
    __swig_getmethods__["LongCpuCode"] = _PythonWrapper.Ch3DsaTagToCpuExt_LongCpuCode_get
    if _newclass:
        LongCpuCode = _swig_property(_PythonWrapper.Ch3DsaTagToCpuExt_LongCpuCode_get, _PythonWrapper.Ch3DsaTagToCpuExt_LongCpuCode_set)
Ch3DsaTagToCpuExt_swigregister = _PythonWrapper.Ch3DsaTagToCpuExt_swigregister
Ch3DsaTagToCpuExt_swigregister(Ch3DsaTagToCpuExt)

class Ch3DsaTagToAnalyzerExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ch3DsaTagToAnalyzerExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ch3DsaTagToAnalyzerExt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Ch3DsaTagToAnalyzerExt(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_Ch3DsaTagToAnalyzerExt
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.Ch3DsaTagToAnalyzerExt_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_TagCommand_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcTrgTagged_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcTrgTagged_set)
    __swig_setmethods__["SrcTrgDev"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcTrgDev_set
    __swig_getmethods__["SrcTrgDev"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcTrgDev_get
    if _newclass:
        SrcTrgDev = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcTrgDev_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcTrgDev_set)
    __swig_setmethods__["SrcPortTrgPort_0_4"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcPortTrgPort_0_4_set
    __swig_getmethods__["SrcPortTrgPort_0_4"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcPortTrgPort_0_4_get
    if _newclass:
        SrcPortTrgPort_0_4 = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcPortTrgPort_0_4_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcPortTrgPort_0_4_set)
    __swig_setmethods__["rx_sniff"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_rx_sniff_set
    __swig_getmethods__["rx_sniff"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_rx_sniff_get
    if _newclass:
        rx_sniff = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_rx_sniff_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_rx_sniff_set)
    __swig_setmethods__["Reserved_w0"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w0_set
    __swig_getmethods__["Reserved_w0"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w0_get
    if _newclass:
        Reserved_w0 = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w0_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_CFI_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_UP_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_UP_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_Extended_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_VlanID_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_VlanID_set)
    __swig_setmethods__["Extend"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Extend_set
    __swig_getmethods__["Extend"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Extend_get
    if _newclass:
        Extend = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_Extend_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_Extend_set)
    __swig_setmethods__["Reserved_w1_bit30"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bit30_set
    __swig_getmethods__["Reserved_w1_bit30"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bit30_get
    if _newclass:
        Reserved_w1_bit30 = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bit30_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bit30_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_DropOnSource_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_PacketIsLooped_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_PacketIsLooped_set)
    __swig_setmethods__["Reserved_w1_bits11_27"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bits11_27_set
    __swig_getmethods__["Reserved_w1_bits11_27"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bits11_27_get
    if _newclass:
        Reserved_w1_bits11_27 = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bits11_27_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bits11_27_set)
    __swig_setmethods__["SrcPortTrgPort_5"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcPortTrgPort_5_set
    __swig_getmethods__["SrcPortTrgPort_5"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcPortTrgPort_5_get
    if _newclass:
        SrcPortTrgPort_5 = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcPortTrgPort_5_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_SrcPortTrgPort_5_set)
    __swig_setmethods__["Reserved_w1_bits54_63"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bits54_63_set
    __swig_getmethods__["Reserved_w1_bits54_63"] = _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bits54_63_get
    if _newclass:
        Reserved_w1_bits54_63 = _swig_property(_PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bits54_63_get, _PythonWrapper.Ch3DsaTagToAnalyzerExt_Reserved_w1_bits54_63_set)
Ch3DsaTagToAnalyzerExt_swigregister = _PythonWrapper.Ch3DsaTagToAnalyzerExt_swigregister
Ch3DsaTagToAnalyzerExt_swigregister(Ch3DsaTagToAnalyzerExt)

class Ch3DsaTagFromCpuExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ch3DsaTagFromCpuExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ch3DsaTagFromCpuExt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Ch3DsaTagFromCpuExt(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_Ch3DsaTagFromCpuExt
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.Ch3DsaTagFromCpuExt_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_TagCommand_get, _PythonWrapper.Ch3DsaTagFromCpuExt_TagCommand_set)
    __swig_setmethods__["TrgTagged"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TrgTagged_set
    __swig_getmethods__["TrgTagged"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TrgTagged_get
    if _newclass:
        TrgTagged = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_TrgTagged_get, _PythonWrapper.Ch3DsaTagFromCpuExt_TrgTagged_set)
    __swig_setmethods__["data_w0_bits_19_28"] = _PythonWrapper.Ch3DsaTagFromCpuExt_data_w0_bits_19_28_set
    __swig_getmethods__["data_w0_bits_19_28"] = _PythonWrapper.Ch3DsaTagFromCpuExt_data_w0_bits_19_28_get
    if _newclass:
        data_w0_bits_19_28 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_data_w0_bits_19_28_get, _PythonWrapper.Ch3DsaTagFromCpuExt_data_w0_bits_19_28_set)
    __swig_setmethods__["vidx_0_9"] = _PythonWrapper.Ch3DsaTagFromCpuExt_vidx_0_9_set
    __swig_getmethods__["vidx_0_9"] = _PythonWrapper.Ch3DsaTagFromCpuExt_vidx_0_9_get
    if _newclass:
        vidx_0_9 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_vidx_0_9_get, _PythonWrapper.Ch3DsaTagFromCpuExt_vidx_0_9_set)
    __swig_setmethods__["TrgDev"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TrgDev_set
    __swig_getmethods__["TrgDev"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TrgDev_get
    if _newclass:
        TrgDev = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_TrgDev_get, _PythonWrapper.Ch3DsaTagFromCpuExt_TrgDev_set)
    __swig_setmethods__["TrgPort_0_4"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TrgPort_0_4_set
    __swig_getmethods__["TrgPort_0_4"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TrgPort_0_4_get
    if _newclass:
        TrgPort_0_4 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_TrgPort_0_4_get, _PythonWrapper.Ch3DsaTagFromCpuExt_TrgPort_0_4_set)
    __swig_setmethods__["use_vidx"] = _PythonWrapper.Ch3DsaTagFromCpuExt_use_vidx_set
    __swig_getmethods__["use_vidx"] = _PythonWrapper.Ch3DsaTagFromCpuExt_use_vidx_get
    if _newclass:
        use_vidx = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_use_vidx_get, _PythonWrapper.Ch3DsaTagFromCpuExt_use_vidx_set)
    __swig_setmethods__["TC_0"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TC_0_set
    __swig_getmethods__["TC_0"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TC_0_get
    if _newclass:
        TC_0 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_TC_0_get, _PythonWrapper.Ch3DsaTagFromCpuExt_TC_0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.Ch3DsaTagFromCpuExt_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.Ch3DsaTagFromCpuExt_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_CFI_get, _PythonWrapper.Ch3DsaTagFromCpuExt_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.Ch3DsaTagFromCpuExt_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.Ch3DsaTagFromCpuExt_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_UP_get, _PythonWrapper.Ch3DsaTagFromCpuExt_UP_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_Extended_get, _PythonWrapper.Ch3DsaTagFromCpuExt_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.Ch3DsaTagFromCpuExt_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.Ch3DsaTagFromCpuExt_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_VlanID_get, _PythonWrapper.Ch3DsaTagFromCpuExt_VlanID_set)
    __swig_setmethods__["Extend"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Extend_set
    __swig_getmethods__["Extend"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Extend_get
    if _newclass:
        Extend = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_Extend_get, _PythonWrapper.Ch3DsaTagFromCpuExt_Extend_set)
    __swig_setmethods__["EgressFilterEn"] = _PythonWrapper.Ch3DsaTagFromCpuExt_EgressFilterEn_set
    __swig_getmethods__["EgressFilterEn"] = _PythonWrapper.Ch3DsaTagFromCpuExt_EgressFilterEn_get
    if _newclass:
        EgressFilterEn = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_EgressFilterEn_get, _PythonWrapper.Ch3DsaTagFromCpuExt_EgressFilterEn_set)
    __swig_setmethods__["CascadeControl"] = _PythonWrapper.Ch3DsaTagFromCpuExt_CascadeControl_set
    __swig_getmethods__["CascadeControl"] = _PythonWrapper.Ch3DsaTagFromCpuExt_CascadeControl_get
    if _newclass:
        CascadeControl = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_CascadeControl_get, _PythonWrapper.Ch3DsaTagFromCpuExt_CascadeControl_set)
    __swig_setmethods__["EgressFilterReg"] = _PythonWrapper.Ch3DsaTagFromCpuExt_EgressFilterReg_set
    __swig_getmethods__["EgressFilterReg"] = _PythonWrapper.Ch3DsaTagFromCpuExt_EgressFilterReg_get
    if _newclass:
        EgressFilterReg = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_EgressFilterReg_get, _PythonWrapper.Ch3DsaTagFromCpuExt_EgressFilterReg_set)
    __swig_setmethods__["TC_2"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TC_2_set
    __swig_getmethods__["TC_2"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TC_2_get
    if _newclass:
        TC_2 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_TC_2_get, _PythonWrapper.Ch3DsaTagFromCpuExt_TC_2_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.Ch3DsaTagFromCpuExt_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.Ch3DsaTagFromCpuExt_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_DropOnSource_get, _PythonWrapper.Ch3DsaTagFromCpuExt_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.Ch3DsaTagFromCpuExt_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.Ch3DsaTagFromCpuExt_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_PacketIsLooped_get, _PythonWrapper.Ch3DsaTagFromCpuExt_PacketIsLooped_set)
    __swig_setmethods__["SrcID"] = _PythonWrapper.Ch3DsaTagFromCpuExt_SrcID_set
    __swig_getmethods__["SrcID"] = _PythonWrapper.Ch3DsaTagFromCpuExt_SrcID_get
    if _newclass:
        SrcID = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_SrcID_get, _PythonWrapper.Ch3DsaTagFromCpuExt_SrcID_set)
    __swig_setmethods__["SrcDev"] = _PythonWrapper.Ch3DsaTagFromCpuExt_SrcDev_set
    __swig_getmethods__["SrcDev"] = _PythonWrapper.Ch3DsaTagFromCpuExt_SrcDev_get
    if _newclass:
        SrcDev = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_SrcDev_get, _PythonWrapper.Ch3DsaTagFromCpuExt_SrcDev_set)
    __swig_setmethods__["TC_1"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TC_1_set
    __swig_getmethods__["TC_1"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TC_1_get
    if _newclass:
        TC_1 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_TC_1_get, _PythonWrapper.Ch3DsaTagFromCpuExt_TC_1_set)
    __swig_setmethods__["data_w1_bits_0_13"] = _PythonWrapper.Ch3DsaTagFromCpuExt_data_w1_bits_0_13_set
    __swig_getmethods__["data_w1_bits_0_13"] = _PythonWrapper.Ch3DsaTagFromCpuExt_data_w1_bits_0_13_get
    if _newclass:
        data_w1_bits_0_13 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_data_w1_bits_0_13_get, _PythonWrapper.Ch3DsaTagFromCpuExt_data_w1_bits_0_13_set)
    __swig_setmethods__["vidx_10_11"] = _PythonWrapper.Ch3DsaTagFromCpuExt_vidx_10_11_set
    __swig_getmethods__["vidx_10_11"] = _PythonWrapper.Ch3DsaTagFromCpuExt_vidx_10_11_get
    if _newclass:
        vidx_10_11 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_vidx_10_11_get, _PythonWrapper.Ch3DsaTagFromCpuExt_vidx_10_11_set)
    __swig_setmethods__["ExcludeIsTrunk"] = _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludeIsTrunk_set
    __swig_getmethods__["ExcludeIsTrunk"] = _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludeIsTrunk_get
    if _newclass:
        ExcludeIsTrunk = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_ExcludeIsTrunk_get, _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludeIsTrunk_set)
    __swig_setmethods__["MirrorToAllCPUs"] = _PythonWrapper.Ch3DsaTagFromCpuExt_MirrorToAllCPUs_set
    __swig_getmethods__["MirrorToAllCPUs"] = _PythonWrapper.Ch3DsaTagFromCpuExt_MirrorToAllCPUs_get
    if _newclass:
        MirrorToAllCPUs = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_MirrorToAllCPUs_get, _PythonWrapper.Ch3DsaTagFromCpuExt_MirrorToAllCPUs_set)
    __swig_setmethods__["Reserved_w1_bits7_9"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits7_9_set
    __swig_getmethods__["Reserved_w1_bits7_9"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits7_9_get
    if _newclass:
        Reserved_w1_bits7_9 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits7_9_get, _PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits7_9_set)
    __swig_setmethods__["ExcludedTrunk"] = _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedTrunk_set
    __swig_getmethods__["ExcludedTrunk"] = _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedTrunk_get
    if _newclass:
        ExcludedTrunk = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedTrunk_get, _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedTrunk_set)
    __swig_setmethods__["ExcludedPort"] = _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedPort_set
    __swig_getmethods__["ExcludedPort"] = _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedPort_get
    if _newclass:
        ExcludedPort = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedPort_get, _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedPort_set)
    __swig_setmethods__["ExcludedDev"] = _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedDev_set
    __swig_getmethods__["ExcludedDev"] = _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedDev_get
    if _newclass:
        ExcludedDev = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedDev_get, _PythonWrapper.Ch3DsaTagFromCpuExt_ExcludedDev_set)
    __swig_setmethods__["MailBoxToNeighborCPU"] = _PythonWrapper.Ch3DsaTagFromCpuExt_MailBoxToNeighborCPU_set
    __swig_getmethods__["MailBoxToNeighborCPU"] = _PythonWrapper.Ch3DsaTagFromCpuExt_MailBoxToNeighborCPU_get
    if _newclass:
        MailBoxToNeighborCPU = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_MailBoxToNeighborCPU_get, _PythonWrapper.Ch3DsaTagFromCpuExt_MailBoxToNeighborCPU_set)
    __swig_setmethods__["Reserved_w1_bits11_12"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits11_12_set
    __swig_getmethods__["Reserved_w1_bits11_12"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits11_12_get
    if _newclass:
        Reserved_w1_bits11_12 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits11_12_get, _PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits11_12_set)
    __swig_setmethods__["TrgPort_5"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TrgPort_5_set
    __swig_getmethods__["TrgPort_5"] = _PythonWrapper.Ch3DsaTagFromCpuExt_TrgPort_5_get
    if _newclass:
        TrgPort_5 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_TrgPort_5_get, _PythonWrapper.Ch3DsaTagFromCpuExt_TrgPort_5_set)
    __swig_setmethods__["Reserved_w1_bits0_9"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits0_9_set
    __swig_getmethods__["Reserved_w1_bits0_9"] = _PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits0_9_get
    if _newclass:
        Reserved_w1_bits0_9 = _swig_property(_PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits0_9_get, _PythonWrapper.Ch3DsaTagFromCpuExt_Reserved_w1_bits0_9_set)
Ch3DsaTagFromCpuExt_swigregister = _PythonWrapper.Ch3DsaTagFromCpuExt_swigregister
Ch3DsaTagFromCpuExt_swigregister(Ch3DsaTagFromCpuExt)

class Ch3DsaTagForwardExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ch3DsaTagForwardExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ch3DsaTagForwardExt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Ch3DsaTagForwardExt(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Ch3DsaTagForwardExt_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_Ch3DsaTagForwardExt
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.Ch3DsaTagForwardExt_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Ch3DsaTagForwardExt_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.Ch3DsaTagForwardExt_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Ch3DsaTagForwardExt_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Ch3DsaTagForwardExt_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Ch3DsaTagForwardExt_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Ch3DsaTagForwardExt_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.Ch3DsaTagForwardExt_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.Ch3DsaTagForwardExt_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.Ch3DsaTagForwardExt_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.Ch3DsaTagForwardExt_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_TagCommand_get, _PythonWrapper.Ch3DsaTagForwardExt_TagCommand_set)
    __swig_setmethods__["SrcTagged"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcTagged_set
    __swig_getmethods__["SrcTagged"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcTagged_get
    if _newclass:
        SrcTagged = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_SrcTagged_get, _PythonWrapper.Ch3DsaTagForwardExt_SrcTagged_set)
    __swig_setmethods__["SrcDev"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcDev_set
    __swig_getmethods__["SrcDev"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcDev_get
    if _newclass:
        SrcDev = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_SrcDev_get, _PythonWrapper.Ch3DsaTagForwardExt_SrcDev_set)
    __swig_setmethods__["SrcPortSrcTrunk_0_4"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcPortSrcTrunk_0_4_set
    __swig_getmethods__["SrcPortSrcTrunk_0_4"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcPortSrcTrunk_0_4_get
    if _newclass:
        SrcPortSrcTrunk_0_4 = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_SrcPortSrcTrunk_0_4_get, _PythonWrapper.Ch3DsaTagForwardExt_SrcPortSrcTrunk_0_4_set)
    __swig_setmethods__["SrcIsTrunk"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcIsTrunk_set
    __swig_getmethods__["SrcIsTrunk"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcIsTrunk_get
    if _newclass:
        SrcIsTrunk = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_SrcIsTrunk_get, _PythonWrapper.Ch3DsaTagForwardExt_SrcIsTrunk_set)
    __swig_setmethods__["Reserved_w0"] = _PythonWrapper.Ch3DsaTagForwardExt_Reserved_w0_set
    __swig_getmethods__["Reserved_w0"] = _PythonWrapper.Ch3DsaTagForwardExt_Reserved_w0_get
    if _newclass:
        Reserved_w0 = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_Reserved_w0_get, _PythonWrapper.Ch3DsaTagForwardExt_Reserved_w0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.Ch3DsaTagForwardExt_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.Ch3DsaTagForwardExt_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_CFI_get, _PythonWrapper.Ch3DsaTagForwardExt_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.Ch3DsaTagForwardExt_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.Ch3DsaTagForwardExt_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_UP_get, _PythonWrapper.Ch3DsaTagForwardExt_UP_set)
    __swig_setmethods__["Extended"] = _PythonWrapper.Ch3DsaTagForwardExt_Extended_set
    __swig_getmethods__["Extended"] = _PythonWrapper.Ch3DsaTagForwardExt_Extended_get
    if _newclass:
        Extended = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_Extended_get, _PythonWrapper.Ch3DsaTagForwardExt_Extended_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.Ch3DsaTagForwardExt_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.Ch3DsaTagForwardExt_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_VlanID_get, _PythonWrapper.Ch3DsaTagForwardExt_VlanID_set)
    __swig_setmethods__["Extend"] = _PythonWrapper.Ch3DsaTagForwardExt_Extend_set
    __swig_getmethods__["Extend"] = _PythonWrapper.Ch3DsaTagForwardExt_Extend_get
    if _newclass:
        Extend = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_Extend_get, _PythonWrapper.Ch3DsaTagForwardExt_Extend_set)
    __swig_setmethods__["data_w1_bits_29_30"] = _PythonWrapper.Ch3DsaTagForwardExt_data_w1_bits_29_30_set
    __swig_getmethods__["data_w1_bits_29_30"] = _PythonWrapper.Ch3DsaTagForwardExt_data_w1_bits_29_30_get
    if _newclass:
        data_w1_bits_29_30 = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_data_w1_bits_29_30_get, _PythonWrapper.Ch3DsaTagForwardExt_data_w1_bits_29_30_set)
    __swig_setmethods__["SrcTrunk_5_6"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcTrunk_5_6_set
    __swig_getmethods__["SrcTrunk_5_6"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcTrunk_5_6_get
    if _newclass:
        SrcTrunk_5_6 = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_SrcTrunk_5_6_get, _PythonWrapper.Ch3DsaTagForwardExt_SrcTrunk_5_6_set)
    __swig_setmethods__["Reserved_w1_bit30"] = _PythonWrapper.Ch3DsaTagForwardExt_Reserved_w1_bit30_set
    __swig_getmethods__["Reserved_w1_bit30"] = _PythonWrapper.Ch3DsaTagForwardExt_Reserved_w1_bit30_get
    if _newclass:
        Reserved_w1_bit30 = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_Reserved_w1_bit30_get, _PythonWrapper.Ch3DsaTagForwardExt_Reserved_w1_bit30_set)
    __swig_setmethods__["SrcPort_5"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcPort_5_set
    __swig_getmethods__["SrcPort_5"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcPort_5_get
    if _newclass:
        SrcPort_5 = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_SrcPort_5_get, _PythonWrapper.Ch3DsaTagForwardExt_SrcPort_5_set)
    __swig_setmethods__["EgressFilterReg"] = _PythonWrapper.Ch3DsaTagForwardExt_EgressFilterReg_set
    __swig_getmethods__["EgressFilterReg"] = _PythonWrapper.Ch3DsaTagForwardExt_EgressFilterReg_get
    if _newclass:
        EgressFilterReg = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_EgressFilterReg_get, _PythonWrapper.Ch3DsaTagForwardExt_EgressFilterReg_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.Ch3DsaTagForwardExt_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.Ch3DsaTagForwardExt_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_DropOnSource_get, _PythonWrapper.Ch3DsaTagForwardExt_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.Ch3DsaTagForwardExt_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.Ch3DsaTagForwardExt_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_PacketIsLooped_get, _PythonWrapper.Ch3DsaTagForwardExt_PacketIsLooped_set)
    __swig_setmethods__["Routed"] = _PythonWrapper.Ch3DsaTagForwardExt_Routed_set
    __swig_getmethods__["Routed"] = _PythonWrapper.Ch3DsaTagForwardExt_Routed_get
    if _newclass:
        Routed = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_Routed_get, _PythonWrapper.Ch3DsaTagForwardExt_Routed_set)
    __swig_setmethods__["SrcID"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcID_set
    __swig_getmethods__["SrcID"] = _PythonWrapper.Ch3DsaTagForwardExt_SrcID_get
    if _newclass:
        SrcID = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_SrcID_get, _PythonWrapper.Ch3DsaTagForwardExt_SrcID_set)
    __swig_setmethods__["QoSProfile"] = _PythonWrapper.Ch3DsaTagForwardExt_QoSProfile_set
    __swig_getmethods__["QoSProfile"] = _PythonWrapper.Ch3DsaTagForwardExt_QoSProfile_get
    if _newclass:
        QoSProfile = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_QoSProfile_get, _PythonWrapper.Ch3DsaTagForwardExt_QoSProfile_set)
    __swig_setmethods__["use_vidx"] = _PythonWrapper.Ch3DsaTagForwardExt_use_vidx_set
    __swig_getmethods__["use_vidx"] = _PythonWrapper.Ch3DsaTagForwardExt_use_vidx_get
    if _newclass:
        use_vidx = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_use_vidx_get, _PythonWrapper.Ch3DsaTagForwardExt_use_vidx_set)
    __swig_setmethods__["data_w1_bits_0_11"] = _PythonWrapper.Ch3DsaTagForwardExt_data_w1_bits_0_11_set
    __swig_getmethods__["data_w1_bits_0_11"] = _PythonWrapper.Ch3DsaTagForwardExt_data_w1_bits_0_11_get
    if _newclass:
        data_w1_bits_0_11 = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_data_w1_bits_0_11_get, _PythonWrapper.Ch3DsaTagForwardExt_data_w1_bits_0_11_set)
    __swig_setmethods__["vidx_0_11"] = _PythonWrapper.Ch3DsaTagForwardExt_vidx_0_11_set
    __swig_getmethods__["vidx_0_11"] = _PythonWrapper.Ch3DsaTagForwardExt_vidx_0_11_get
    if _newclass:
        vidx_0_11 = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_vidx_0_11_get, _PythonWrapper.Ch3DsaTagForwardExt_vidx_0_11_set)
    __swig_setmethods__["Reserved_w1_bit11"] = _PythonWrapper.Ch3DsaTagForwardExt_Reserved_w1_bit11_set
    __swig_getmethods__["Reserved_w1_bit11"] = _PythonWrapper.Ch3DsaTagForwardExt_Reserved_w1_bit11_get
    if _newclass:
        Reserved_w1_bit11 = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_Reserved_w1_bit11_get, _PythonWrapper.Ch3DsaTagForwardExt_Reserved_w1_bit11_set)
    __swig_setmethods__["TrgPort"] = _PythonWrapper.Ch3DsaTagForwardExt_TrgPort_set
    __swig_getmethods__["TrgPort"] = _PythonWrapper.Ch3DsaTagForwardExt_TrgPort_get
    if _newclass:
        TrgPort = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_TrgPort_get, _PythonWrapper.Ch3DsaTagForwardExt_TrgPort_set)
    __swig_setmethods__["TrgDev"] = _PythonWrapper.Ch3DsaTagForwardExt_TrgDev_set
    __swig_getmethods__["TrgDev"] = _PythonWrapper.Ch3DsaTagForwardExt_TrgDev_get
    if _newclass:
        TrgDev = _swig_property(_PythonWrapper.Ch3DsaTagForwardExt_TrgDev_get, _PythonWrapper.Ch3DsaTagForwardExt_TrgDev_set)
Ch3DsaTagForwardExt_swigregister = _PythonWrapper.Ch3DsaTagForwardExt_swigregister
Ch3DsaTagForwardExt_swigregister(Ch3DsaTagForwardExt)

class SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TagCommand_set)
    __swig_setmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Tag0SrcTagged_set
    __swig_getmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Tag0SrcTagged_get
    if _newclass:
        Tag0SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Tag0SrcTagged_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Tag0SrcTagged_set)
    __swig_setmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcDev_4_0_set
    __swig_getmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcDev_4_0_get
    if _newclass:
        SrcDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcDev_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcDev_4_0_set)
    __swig_setmethods__["SrcTrunk_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_4_0_set
    __swig_getmethods__["SrcTrunk_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_4_0_get
    if _newclass:
        SrcTrunk_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_4_0_set)
    __swig_setmethods__["SrcIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcIsTrunk_set
    __swig_getmethods__["SrcIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcIsTrunk_get
    if _newclass:
        SrcIsTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcIsTrunk_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcIsTrunk_set)
    __swig_setmethods__["Reserved_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word0_set
    __swig_getmethods__["Reserved_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word0_get
    if _newclass:
        Reserved_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_UP_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word1_set)
    __swig_setmethods__["SrcTrunk_6_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_6_5_set
    __swig_getmethods__["SrcTrunk_6_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_6_5_get
    if _newclass:
        SrcTrunk_6_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_6_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_6_5_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_EgressFilterRegistered_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_PacketIsLooped_set)
    __swig_setmethods__["Routed"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Routed_set
    __swig_getmethods__["Routed"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Routed_get
    if _newclass:
        Routed = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Routed_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Routed_set)
    __swig_setmethods__["SrcID_word1_24_20"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcID_word1_24_20_set
    __swig_getmethods__["SrcID_word1_24_20"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcID_word1_24_20_get
    if _newclass:
        SrcID_word1_24_20 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcID_word1_24_20_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcID_word1_24_20_set)
    __swig_setmethods__["TC_DP_GlobalQoSProfile"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TC_DP_GlobalQoSProfile_set
    __swig_getmethods__["TC_DP_GlobalQoSProfile"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TC_DP_GlobalQoSProfile_get
    if _newclass:
        TC_DP_GlobalQoSProfile = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TC_DP_GlobalQoSProfile_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TC_DP_GlobalQoSProfile_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_UseVIDX_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_UseVIDX_set)
    __swig_setmethods__["eVIDX_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVIDX_11_0_set
    __swig_getmethods__["eVIDX_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVIDX_11_0_get
    if _newclass:
        eVIDX_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVIDX_11_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVIDX_11_0_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_30_set
    __swig_getmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_30_get
    if _newclass:
        Reserved_word2_30 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_30_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_30_set)
    __swig_setmethods__["Reserved_word2_29_28"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_29_28_set
    __swig_getmethods__["Reserved_word2_29_28"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_29_28_get
    if _newclass:
        Reserved_word2_29_28 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_29_28_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_29_28_set)
    __swig_setmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcID_11_5_set
    __swig_getmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcID_11_5_get
    if _newclass:
        SrcID_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcID_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcID_11_5_set)
    __swig_setmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcDev_11_5_set
    __swig_getmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcDev_11_5_get
    if _newclass:
        SrcDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcDev_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcDev_11_5_set)
    __swig_setmethods__["Reserved_word2_13"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_13_set
    __swig_getmethods__["Reserved_word2_13"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_13_get
    if _newclass:
        Reserved_word2_13 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_13_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_13_set)
    __swig_setmethods__["Reserved_word2_12_8"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_12_8_set
    __swig_getmethods__["Reserved_word2_12_8"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_12_8_get
    if _newclass:
        Reserved_word2_12_8 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_12_8_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word2_12_8_set)
    __swig_setmethods__["SrcTrunk_11_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_11_7_set
    __swig_getmethods__["SrcTrunk_11_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_11_7_get
    if _newclass:
        SrcTrunk_11_7 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_11_7_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTrunk_11_7_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Tag1SrcTagged_set
    __swig_getmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Tag1SrcTagged_get
    if _newclass:
        Tag1SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Tag1SrcTagged_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Tag1SrcTagged_set)
    __swig_setmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTag0IsOuterTag_set
    __swig_getmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTag0IsOuterTag_get
    if _newclass:
        SrcTag0IsOuterTag = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTag0IsOuterTag_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SrcTag0IsOuterTag_set)
    __swig_setmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word3_24_set
    __swig_getmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word3_24_get
    if _newclass:
        Reserved_word3_24 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word3_24_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word3_24_set)
    __swig_setmethods__["eVIDX_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVIDX_15_12_set
    __swig_getmethods__["eVIDX_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVIDX_15_12_get
    if _newclass:
        eVIDX_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVIDX_15_12_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_eVIDX_15_12_set)
    __swig_setmethods__["OrigSrcPhyIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_OrigSrcPhyIsTrunk_set
    __swig_getmethods__["OrigSrcPhyIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_OrigSrcPhyIsTrunk_get
    if _newclass:
        OrigSrcPhyIsTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_OrigSrcPhyIsTrunk_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_OrigSrcPhyIsTrunk_set)
    __swig_setmethods__["OrigSrcPhyPortTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_OrigSrcPhyPortTrunk_set
    __swig_getmethods__["OrigSrcPhyPortTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_OrigSrcPhyPortTrunk_get
    if _newclass:
        OrigSrcPhyPortTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_OrigSrcPhyPortTrunk_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_OrigSrcPhyPortTrunk_set)
    __swig_setmethods__["PhySrcMCFilterEnable"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_PhySrcMCFilterEnable_set
    __swig_getmethods__["PhySrcMCFilterEnable"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_PhySrcMCFilterEnable_get
    if _newclass:
        PhySrcMCFilterEnable = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_PhySrcMCFilterEnable_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_PhySrcMCFilterEnable_set)
    __swig_setmethods__["Reserved_word3_5_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word3_5_0_set
    __swig_getmethods__["Reserved_word3_5_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word3_5_0_get
    if _newclass:
        Reserved_word3_5_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word3_5_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Reserved_word3_5_0_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_GetElementToolTip(self)
SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_swigregister = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_swigregister
SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX_swigregister(SIP5_eDSA_Forward_SrcIsTrunk_UseVIDX)

class SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TagCommand_set)
    __swig_setmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Tag0SrcTagged_set
    __swig_getmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Tag0SrcTagged_get
    if _newclass:
        Tag0SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Tag0SrcTagged_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Tag0SrcTagged_set)
    __swig_setmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcDev_4_0_set
    __swig_getmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcDev_4_0_get
    if _newclass:
        SrcDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcDev_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcDev_4_0_set)
    __swig_setmethods__["Src_ePort_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_4_0_set
    __swig_getmethods__["Src_ePort_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_4_0_get
    if _newclass:
        Src_ePort_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_4_0_set)
    __swig_setmethods__["SrcIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcIsTrunk_set
    __swig_getmethods__["SrcIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcIsTrunk_get
    if _newclass:
        SrcIsTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcIsTrunk_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcIsTrunk_set)
    __swig_setmethods__["Reserved_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word0_set
    __swig_getmethods__["Reserved_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word0_get
    if _newclass:
        Reserved_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_UP_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word1_set)
    __swig_setmethods__["Src_ePort_6_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_6_5_set
    __swig_getmethods__["Src_ePort_6_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_6_5_get
    if _newclass:
        Src_ePort_6_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_6_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_6_5_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_EgressFilterRegistered_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_PacketIsLooped_set)
    __swig_setmethods__["Routed"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Routed_set
    __swig_getmethods__["Routed"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Routed_get
    if _newclass:
        Routed = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Routed_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Routed_set)
    __swig_setmethods__["SrcID_word1_24_20"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcID_word1_24_20_set
    __swig_getmethods__["SrcID_word1_24_20"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcID_word1_24_20_get
    if _newclass:
        SrcID_word1_24_20 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcID_word1_24_20_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcID_word1_24_20_set)
    __swig_setmethods__["TC_DP_GlobalQoSProfile"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TC_DP_GlobalQoSProfile_set
    __swig_getmethods__["TC_DP_GlobalQoSProfile"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TC_DP_GlobalQoSProfile_get
    if _newclass:
        TC_DP_GlobalQoSProfile = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TC_DP_GlobalQoSProfile_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TC_DP_GlobalQoSProfile_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_UseVIDX_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_UseVIDX_set)
    __swig_setmethods__["eVIDX_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVIDX_11_0_set
    __swig_getmethods__["eVIDX_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVIDX_11_0_get
    if _newclass:
        eVIDX_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVIDX_11_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVIDX_11_0_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_30_set
    __swig_getmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_30_get
    if _newclass:
        Reserved_word2_30 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_30_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_30_set)
    __swig_setmethods__["Reserved_word2_29_28"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_29_28_set
    __swig_getmethods__["Reserved_word2_29_28"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_29_28_get
    if _newclass:
        Reserved_word2_29_28 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_29_28_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_29_28_set)
    __swig_setmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcID_11_5_set
    __swig_getmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcID_11_5_get
    if _newclass:
        SrcID_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcID_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcID_11_5_set)
    __swig_setmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcDev_11_5_set
    __swig_getmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcDev_11_5_get
    if _newclass:
        SrcDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcDev_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcDev_11_5_set)
    __swig_setmethods__["Reserved_word2_13"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_13_set
    __swig_getmethods__["Reserved_word2_13"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_13_get
    if _newclass:
        Reserved_word2_13 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_13_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word2_13_set)
    __swig_setmethods__["Src_ePort_16_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_16_7_set
    __swig_getmethods__["Src_ePort_16_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_16_7_get
    if _newclass:
        Src_ePort_16_7 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_16_7_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Src_ePort_16_7_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Tag1SrcTagged_set
    __swig_getmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Tag1SrcTagged_get
    if _newclass:
        Tag1SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Tag1SrcTagged_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Tag1SrcTagged_set)
    __swig_setmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcTag0IsOuterTag_set
    __swig_getmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcTag0IsOuterTag_get
    if _newclass:
        SrcTag0IsOuterTag = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcTag0IsOuterTag_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SrcTag0IsOuterTag_set)
    __swig_setmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word3_24_set
    __swig_getmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word3_24_get
    if _newclass:
        Reserved_word3_24 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word3_24_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word3_24_set)
    __swig_setmethods__["eVIDX_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVIDX_15_12_set
    __swig_getmethods__["eVIDX_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVIDX_15_12_get
    if _newclass:
        eVIDX_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVIDX_15_12_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_eVIDX_15_12_set)
    __swig_setmethods__["OrigSrcPhyIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_OrigSrcPhyIsTrunk_set
    __swig_getmethods__["OrigSrcPhyIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_OrigSrcPhyIsTrunk_get
    if _newclass:
        OrigSrcPhyIsTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_OrigSrcPhyIsTrunk_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_OrigSrcPhyIsTrunk_set)
    __swig_setmethods__["OrigSrcPhyPortTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_OrigSrcPhyPortTrunk_set
    __swig_getmethods__["OrigSrcPhyPortTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_OrigSrcPhyPortTrunk_get
    if _newclass:
        OrigSrcPhyPortTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_OrigSrcPhyPortTrunk_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_OrigSrcPhyPortTrunk_set)
    __swig_setmethods__["PhySrcMCFilterEnable"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_PhySrcMCFilterEnable_set
    __swig_getmethods__["PhySrcMCFilterEnable"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_PhySrcMCFilterEnable_get
    if _newclass:
        PhySrcMCFilterEnable = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_PhySrcMCFilterEnable_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_PhySrcMCFilterEnable_set)
    __swig_setmethods__["Reserved_word3_5_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word3_5_0_set
    __swig_getmethods__["Reserved_word3_5_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word3_5_0_get
    if _newclass:
        Reserved_word3_5_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word3_5_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Reserved_word3_5_0_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_GetElementToolTip(self)
SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_swigregister = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_swigregister
SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX_swigregister(SIP5_eDSA_Forward_SrcNotTrunk_UseVIDX)

class SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TagCommand_set)
    __swig_setmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Tag0SrcTagged_set
    __swig_getmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Tag0SrcTagged_get
    if _newclass:
        Tag0SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Tag0SrcTagged_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Tag0SrcTagged_set)
    __swig_setmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcDev_4_0_set
    __swig_getmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcDev_4_0_get
    if _newclass:
        SrcDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcDev_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcDev_4_0_set)
    __swig_setmethods__["SrcTrunk_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_4_0_set
    __swig_getmethods__["SrcTrunk_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_4_0_get
    if _newclass:
        SrcTrunk_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_4_0_set)
    __swig_setmethods__["SrcIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcIsTrunk_set
    __swig_getmethods__["SrcIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcIsTrunk_get
    if _newclass:
        SrcIsTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcIsTrunk_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcIsTrunk_set)
    __swig_setmethods__["Reserved_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word0_set
    __swig_getmethods__["Reserved_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word0_get
    if _newclass:
        Reserved_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_UP_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word1_set)
    __swig_setmethods__["SrcTrunk_6_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_6_5_set
    __swig_getmethods__["SrcTrunk_6_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_6_5_get
    if _newclass:
        SrcTrunk_6_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_6_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_6_5_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_EgressFilterRegistered_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_PacketIsLooped_set)
    __swig_setmethods__["Routed"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Routed_set
    __swig_getmethods__["Routed"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Routed_get
    if _newclass:
        Routed = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Routed_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Routed_set)
    __swig_setmethods__["SrcID_word1_24_20"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcID_word1_24_20_set
    __swig_getmethods__["SrcID_word1_24_20"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcID_word1_24_20_get
    if _newclass:
        SrcID_word1_24_20 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcID_word1_24_20_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcID_word1_24_20_set)
    __swig_setmethods__["TC_DP_GlobalQoSProfile"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TC_DP_GlobalQoSProfile_set
    __swig_getmethods__["TC_DP_GlobalQoSProfile"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TC_DP_GlobalQoSProfile_get
    if _newclass:
        TC_DP_GlobalQoSProfile = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TC_DP_GlobalQoSProfile_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TC_DP_GlobalQoSProfile_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_UseVIDX_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_UseVIDX_set)
    __swig_setmethods__["TrgPhyPort_6_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgPhyPort_6_0_set
    __swig_getmethods__["TrgPhyPort_6_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgPhyPort_6_0_get
    if _newclass:
        TrgPhyPort_6_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgPhyPort_6_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgPhyPort_6_0_set)
    __swig_setmethods__["TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgDev_4_0_set
    __swig_getmethods__["TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgDev_4_0_get
    if _newclass:
        TrgDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgDev_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgDev_4_0_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_30_set
    __swig_getmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_30_get
    if _newclass:
        Reserved_word2_30 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_30_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_30_set)
    __swig_setmethods__["IsTrgPhyPortValid"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_IsTrgPhyPortValid_set
    __swig_getmethods__["IsTrgPhyPortValid"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_IsTrgPhyPortValid_get
    if _newclass:
        IsTrgPhyPortValid = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_IsTrgPhyPortValid_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_IsTrgPhyPortValid_set)
    __swig_setmethods__["TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgPhyPort_7_set
    __swig_getmethods__["TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgPhyPort_7_get
    if _newclass:
        TrgPhyPort_7 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgPhyPort_7_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgPhyPort_7_set)
    __swig_setmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcID_11_5_set
    __swig_getmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcID_11_5_get
    if _newclass:
        SrcID_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcID_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcID_11_5_set)
    __swig_setmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcDev_11_5_set
    __swig_getmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcDev_11_5_get
    if _newclass:
        SrcDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcDev_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcDev_11_5_set)
    __swig_setmethods__["Reserved_word2_13"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_13_set
    __swig_getmethods__["Reserved_word2_13"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_13_get
    if _newclass:
        Reserved_word2_13 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_13_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_13_set)
    __swig_setmethods__["Reserved_word2_12_8"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_12_8_set
    __swig_getmethods__["Reserved_word2_12_8"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_12_8_get
    if _newclass:
        Reserved_word2_12_8 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_12_8_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word2_12_8_set)
    __swig_setmethods__["SrcTrunk_11_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_11_7_set
    __swig_getmethods__["SrcTrunk_11_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_11_7_get
    if _newclass:
        SrcTrunk_11_7 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_11_7_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTrunk_11_7_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Tag1SrcTagged_set
    __swig_getmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Tag1SrcTagged_get
    if _newclass:
        Tag1SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Tag1SrcTagged_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Tag1SrcTagged_set)
    __swig_setmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTag0IsOuterTag_set
    __swig_getmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTag0IsOuterTag_get
    if _newclass:
        SrcTag0IsOuterTag = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTag0IsOuterTag_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SrcTag0IsOuterTag_set)
    __swig_setmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word3_24_set
    __swig_getmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word3_24_get
    if _newclass:
        Reserved_word3_24 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word3_24_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Reserved_word3_24_set)
    __swig_setmethods__["Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Trg_ePort_16_0_set
    __swig_getmethods__["Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Trg_ePort_16_0_get
    if _newclass:
        Trg_ePort_16_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Trg_ePort_16_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Trg_ePort_16_0_set)
    __swig_setmethods__["TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgDev_11_5_set
    __swig_getmethods__["TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgDev_11_5_get
    if _newclass:
        TrgDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgDev_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_TrgDev_11_5_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_GetElementToolTip(self)
SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_swigregister = _PythonWrapper.SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_swigregister
SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX_swigregister(SIP5_eDSA_Forward_SrcIsTrunk_NoVIDX)

class SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TagCommand_set)
    __swig_setmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Tag0SrcTagged_set
    __swig_getmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Tag0SrcTagged_get
    if _newclass:
        Tag0SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Tag0SrcTagged_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Tag0SrcTagged_set)
    __swig_setmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcDev_4_0_set
    __swig_getmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcDev_4_0_get
    if _newclass:
        SrcDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcDev_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcDev_4_0_set)
    __swig_setmethods__["Src_ePort_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_4_0_set
    __swig_getmethods__["Src_ePort_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_4_0_get
    if _newclass:
        Src_ePort_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_4_0_set)
    __swig_setmethods__["SrcIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcIsTrunk_set
    __swig_getmethods__["SrcIsTrunk"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcIsTrunk_get
    if _newclass:
        SrcIsTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcIsTrunk_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcIsTrunk_set)
    __swig_setmethods__["Reserved_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word0_set
    __swig_getmethods__["Reserved_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word0_get
    if _newclass:
        Reserved_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_UP_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word1_set)
    __swig_setmethods__["Src_ePort_6_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_6_5_set
    __swig_getmethods__["Src_ePort_6_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_6_5_get
    if _newclass:
        Src_ePort_6_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_6_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_6_5_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_EgressFilterRegistered_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_PacketIsLooped_set)
    __swig_setmethods__["Routed"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Routed_set
    __swig_getmethods__["Routed"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Routed_get
    if _newclass:
        Routed = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Routed_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Routed_set)
    __swig_setmethods__["SrcID_word1_24_20"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcID_word1_24_20_set
    __swig_getmethods__["SrcID_word1_24_20"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcID_word1_24_20_get
    if _newclass:
        SrcID_word1_24_20 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcID_word1_24_20_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcID_word1_24_20_set)
    __swig_setmethods__["TC_DP_GlobalQoSProfile"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TC_DP_GlobalQoSProfile_set
    __swig_getmethods__["TC_DP_GlobalQoSProfile"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TC_DP_GlobalQoSProfile_get
    if _newclass:
        TC_DP_GlobalQoSProfile = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TC_DP_GlobalQoSProfile_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TC_DP_GlobalQoSProfile_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_UseVIDX_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_UseVIDX_set)
    __swig_setmethods__["TrgPhyPort_6_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgPhyPort_6_0_set
    __swig_getmethods__["TrgPhyPort_6_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgPhyPort_6_0_get
    if _newclass:
        TrgPhyPort_6_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgPhyPort_6_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgPhyPort_6_0_set)
    __swig_setmethods__["TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgDev_4_0_set
    __swig_getmethods__["TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgDev_4_0_get
    if _newclass:
        TrgDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgDev_4_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgDev_4_0_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word2_30_set
    __swig_getmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word2_30_get
    if _newclass:
        Reserved_word2_30 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word2_30_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word2_30_set)
    __swig_setmethods__["IsTrgPhyPortValid"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_IsTrgPhyPortValid_set
    __swig_getmethods__["IsTrgPhyPortValid"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_IsTrgPhyPortValid_get
    if _newclass:
        IsTrgPhyPortValid = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_IsTrgPhyPortValid_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_IsTrgPhyPortValid_set)
    __swig_setmethods__["TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgPhyPort_7_set
    __swig_getmethods__["TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgPhyPort_7_get
    if _newclass:
        TrgPhyPort_7 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgPhyPort_7_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgPhyPort_7_set)
    __swig_setmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcID_11_5_set
    __swig_getmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcID_11_5_get
    if _newclass:
        SrcID_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcID_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcID_11_5_set)
    __swig_setmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcDev_11_5_set
    __swig_getmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcDev_11_5_get
    if _newclass:
        SrcDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcDev_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcDev_11_5_set)
    __swig_setmethods__["Reserved_word2_13"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word2_13_set
    __swig_getmethods__["Reserved_word2_13"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word2_13_get
    if _newclass:
        Reserved_word2_13 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word2_13_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word2_13_set)
    __swig_setmethods__["Src_ePort_16_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_16_7_set
    __swig_getmethods__["Src_ePort_16_7"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_16_7_get
    if _newclass:
        Src_ePort_16_7 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_16_7_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Src_ePort_16_7_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Tag1SrcTagged_set
    __swig_getmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Tag1SrcTagged_get
    if _newclass:
        Tag1SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Tag1SrcTagged_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Tag1SrcTagged_set)
    __swig_setmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcTag0IsOuterTag_set
    __swig_getmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcTag0IsOuterTag_get
    if _newclass:
        SrcTag0IsOuterTag = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcTag0IsOuterTag_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SrcTag0IsOuterTag_set)
    __swig_setmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word3_24_set
    __swig_getmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word3_24_get
    if _newclass:
        Reserved_word3_24 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word3_24_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Reserved_word3_24_set)
    __swig_setmethods__["Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Trg_ePort_16_0_set
    __swig_getmethods__["Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Trg_ePort_16_0_get
    if _newclass:
        Trg_ePort_16_0 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Trg_ePort_16_0_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Trg_ePort_16_0_set)
    __swig_setmethods__["TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgDev_11_5_set
    __swig_getmethods__["TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgDev_11_5_get
    if _newclass:
        TrgDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgDev_11_5_get, _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_TrgDev_11_5_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_GetElementToolTip(self)
SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_swigregister = _PythonWrapper.SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_swigregister
SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX_swigregister(SIP5_eDSA_Forward_SrcNotTrunk_NoVIDX)

class SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TagCommand_set)
    __swig_setmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Tag0SrcTagged_set
    __swig_getmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Tag0SrcTagged_get
    if _newclass:
        Tag0SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Tag0SrcTagged_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Tag0SrcTagged_set)
    __swig_setmethods__["eVIDX_9_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_9_0_set
    __swig_getmethods__["eVIDX_9_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_9_0_get
    if _newclass:
        eVIDX_9_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_9_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_9_0_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_UseVIDX_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_UseVIDX_set)
    __swig_setmethods__["TC_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_0_set
    __swig_getmethods__["TC_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_0_get
    if _newclass:
        TC_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_UP_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word1_set)
    __swig_setmethods__["EgressFilterEnable"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_EgressFilterEnable_set
    __swig_getmethods__["EgressFilterEnable"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_EgressFilterEnable_get
    if _newclass:
        EgressFilterEnable = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_EgressFilterEnable_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_EgressFilterEnable_set)
    __swig_setmethods__["Reserved_word1_29"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word1_29_set
    __swig_getmethods__["Reserved_word1_29"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word1_29_get
    if _newclass:
        Reserved_word1_29 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word1_29_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word1_29_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_EgressFilterRegistered_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["TC_2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_2_set
    __swig_getmethods__["TC_2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_2_get
    if _newclass:
        TC_2 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_2_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_2_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_PacketIsLooped_set)
    __swig_setmethods__["SrcID_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcID_4_0_set
    __swig_getmethods__["SrcID_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcID_4_0_get
    if _newclass:
        SrcID_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcID_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcID_4_0_set)
    __swig_setmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcDev_4_0_set
    __swig_getmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcDev_4_0_get
    if _newclass:
        SrcDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcDev_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcDev_4_0_set)
    __swig_setmethods__["TC_1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_1_set
    __swig_getmethods__["TC_1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_1_get
    if _newclass:
        TC_1 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_1_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TC_1_set)
    __swig_setmethods__["eVIDX_11_10"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_11_10_set
    __swig_getmethods__["eVIDX_11_10"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_11_10_get
    if _newclass:
        eVIDX_11_10 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_11_10_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_11_10_set)
    __swig_setmethods__["ExcludeIsTrunk"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludeIsTrunk_set
    __swig_getmethods__["ExcludeIsTrunk"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludeIsTrunk_get
    if _newclass:
        ExcludeIsTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludeIsTrunk_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludeIsTrunk_set)
    __swig_setmethods__["MirrorToAllCPUs"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_MirrorToAllCPUs_set
    __swig_getmethods__["MirrorToAllCPUs"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_MirrorToAllCPUs_get
    if _newclass:
        MirrorToAllCPUs = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_MirrorToAllCPUs_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_MirrorToAllCPUs_set)
    __swig_setmethods__["Reserved_word1_9_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word1_9_7_set
    __swig_getmethods__["Reserved_word1_9_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word1_9_7_get
    if _newclass:
        Reserved_word1_9_7 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word1_9_7_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word1_9_7_set)
    __swig_setmethods__["ExcludedTrunk_6_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedTrunk_6_0_set
    __swig_getmethods__["ExcludedTrunk_6_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedTrunk_6_0_get
    if _newclass:
        ExcludedTrunk_6_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedTrunk_6_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedTrunk_6_0_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_30_set
    __swig_getmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_30_get
    if _newclass:
        Reserved_word2_30 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_30_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_30_set)
    __swig_setmethods__["Reserved_word2_29_28"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_29_28_set
    __swig_getmethods__["Reserved_word2_29_28"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_29_28_get
    if _newclass:
        Reserved_word2_29_28 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_29_28_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_29_28_set)
    __swig_setmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcID_11_5_set
    __swig_getmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcID_11_5_get
    if _newclass:
        SrcID_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcID_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcID_11_5_set)
    __swig_setmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcDev_11_5_set
    __swig_getmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcDev_11_5_get
    if _newclass:
        SrcDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcDev_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcDev_11_5_set)
    __swig_setmethods__["Reserved_word2_13_8"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_13_8_set
    __swig_getmethods__["Reserved_word2_13_8"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_13_8_get
    if _newclass:
        Reserved_word2_13_8 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_13_8_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word2_13_8_set)
    __swig_setmethods__["ExcludedTrunk_11_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedTrunk_11_7_set
    __swig_getmethods__["ExcludedTrunk_11_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedTrunk_11_7_get
    if _newclass:
        ExcludedTrunk_11_7 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedTrunk_11_7_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedTrunk_11_7_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Tag1SrcTagged_set
    __swig_getmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Tag1SrcTagged_get
    if _newclass:
        Tag1SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Tag1SrcTagged_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Tag1SrcTagged_set)
    __swig_setmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcTag0IsOuterTag_set
    __swig_getmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcTag0IsOuterTag_get
    if _newclass:
        SrcTag0IsOuterTag = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcTag0IsOuterTag_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SrcTag0IsOuterTag_set)
    __swig_setmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_24_set
    __swig_getmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_24_get
    if _newclass:
        Reserved_word3_24 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_24_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_24_set)
    __swig_setmethods__["eVIDX_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_15_12_set
    __swig_getmethods__["eVIDX_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_15_12_get
    if _newclass:
        eVIDX_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_15_12_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_eVIDX_15_12_set)
    __swig_setmethods__["ExcludedIsPhyPort"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedIsPhyPort_set
    __swig_getmethods__["ExcludedIsPhyPort"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedIsPhyPort_get
    if _newclass:
        ExcludedIsPhyPort = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedIsPhyPort_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ExcludedIsPhyPort_set)
    __swig_setmethods__["Reserved_word3_18_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_18_7_set
    __swig_getmethods__["Reserved_word3_18_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_18_7_get
    if _newclass:
        Reserved_word3_18_7 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_18_7_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_18_7_set)
    __swig_setmethods__["Reserved_word3_6_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_6_0_set
    __swig_getmethods__["Reserved_word3_6_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_6_0_get
    if _newclass:
        Reserved_word3_6_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_6_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Reserved_word3_6_0_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_GetElementToolTip(self)
SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_swigregister = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_swigregister
SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX_swigregister(SIP5_eDSA_FromCPU_ExcludeIsTrunk_UseVIDX)

class SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TagCommand_set)
    __swig_setmethods__["TrgTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgTagged_set
    __swig_getmethods__["TrgTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgTagged_get
    if _newclass:
        TrgTagged = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgTagged_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgTagged_set)
    __swig_setmethods__["TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgDev_4_0_set
    __swig_getmethods__["TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgDev_4_0_get
    if _newclass:
        TrgDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgDev_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgDev_4_0_set)
    __swig_setmethods__["TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_4_0_set
    __swig_getmethods__["TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_4_0_get
    if _newclass:
        TrgPhyPort_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_4_0_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_UseVIDX_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_UseVIDX_set)
    __swig_setmethods__["TC_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_0_set
    __swig_getmethods__["TC_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_0_get
    if _newclass:
        TC_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_UP_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word1_set)
    __swig_setmethods__["EgressFilterEnable"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_EgressFilterEnable_set
    __swig_getmethods__["EgressFilterEnable"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_EgressFilterEnable_get
    if _newclass:
        EgressFilterEnable = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_EgressFilterEnable_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_EgressFilterEnable_set)
    __swig_setmethods__["Reserved_word1_29"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_29_set
    __swig_getmethods__["Reserved_word1_29"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_29_get
    if _newclass:
        Reserved_word1_29 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_29_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_29_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_EgressFilterRegistered_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["TC_2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_2_set
    __swig_getmethods__["TC_2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_2_get
    if _newclass:
        TC_2 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_2_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_2_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_PacketIsLooped_set)
    __swig_setmethods__["SrcID_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcID_4_0_set
    __swig_getmethods__["SrcID_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcID_4_0_get
    if _newclass:
        SrcID_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcID_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcID_4_0_set)
    __swig_setmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcDev_4_0_set
    __swig_getmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcDev_4_0_get
    if _newclass:
        SrcDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcDev_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcDev_4_0_set)
    __swig_setmethods__["TC_1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_1_set
    __swig_getmethods__["TC_1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_1_get
    if _newclass:
        TC_1 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_1_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TC_1_set)
    __swig_setmethods__["MailboxToNeighborCPU"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_MailboxToNeighborCPU_set
    __swig_getmethods__["MailboxToNeighborCPU"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_MailboxToNeighborCPU_get
    if _newclass:
        MailboxToNeighborCPU = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_MailboxToNeighborCPU_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_MailboxToNeighborCPU_set)
    __swig_setmethods__["Reserved_word1_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_12_set
    __swig_getmethods__["Reserved_word1_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_12_get
    if _newclass:
        Reserved_word1_12 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_12_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_12_set)
    __swig_setmethods__["TrgPhyPort_6_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_6_5_set
    __swig_getmethods__["TrgPhyPort_6_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_6_5_get
    if _newclass:
        TrgPhyPort_6_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_6_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_6_5_set)
    __swig_setmethods__["Reserved_word1_9_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_9_0_set
    __swig_getmethods__["Reserved_word1_9_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_9_0_get
    if _newclass:
        Reserved_word1_9_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_9_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word1_9_0_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word2_30_set
    __swig_getmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word2_30_get
    if _newclass:
        Reserved_word2_30 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word2_30_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word2_30_set)
    __swig_setmethods__["IsTrgPhyPortValid"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_IsTrgPhyPortValid_set
    __swig_getmethods__["IsTrgPhyPortValid"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_IsTrgPhyPortValid_get
    if _newclass:
        IsTrgPhyPortValid = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_IsTrgPhyPortValid_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_IsTrgPhyPortValid_set)
    __swig_setmethods__["TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_7_set
    __swig_getmethods__["TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_7_get
    if _newclass:
        TrgPhyPort_7 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_7_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgPhyPort_7_set)
    __swig_setmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcID_11_5_set
    __swig_getmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcID_11_5_get
    if _newclass:
        SrcID_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcID_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcID_11_5_set)
    __swig_setmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcDev_11_5_set
    __swig_getmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcDev_11_5_get
    if _newclass:
        SrcDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcDev_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcDev_11_5_set)
    __swig_setmethods__["Reserved_word2_13_3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word2_13_3_set
    __swig_getmethods__["Reserved_word2_13_3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word2_13_3_get
    if _newclass:
        Reserved_word2_13_3 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word2_13_3_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word2_13_3_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Tag1SrcTagged_set
    __swig_getmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Tag1SrcTagged_get
    if _newclass:
        Tag1SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Tag1SrcTagged_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Tag1SrcTagged_set)
    __swig_setmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcTag0IsOuterTag_set
    __swig_getmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcTag0IsOuterTag_get
    if _newclass:
        SrcTag0IsOuterTag = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcTag0IsOuterTag_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SrcTag0IsOuterTag_set)
    __swig_setmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word3_24_set
    __swig_getmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word3_24_get
    if _newclass:
        Reserved_word3_24 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word3_24_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Reserved_word3_24_set)
    __swig_setmethods__["Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Trg_ePort_16_0_set
    __swig_getmethods__["Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Trg_ePort_16_0_get
    if _newclass:
        Trg_ePort_16_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Trg_ePort_16_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Trg_ePort_16_0_set)
    __swig_setmethods__["TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgDev_11_5_set
    __swig_getmethods__["TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgDev_11_5_get
    if _newclass:
        TrgDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgDev_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_TrgDev_11_5_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_GetElementToolTip(self)
SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_swigregister = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_swigregister
SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX_swigregister(SIP5_eDSA_FromCPU_ExcludeIsTrunk_NoVIDX)

class SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TagCommand_set)
    __swig_setmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Tag0SrcTagged_set
    __swig_getmethods__["Tag0SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Tag0SrcTagged_get
    if _newclass:
        Tag0SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Tag0SrcTagged_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Tag0SrcTagged_set)
    __swig_setmethods__["eVIDX_9_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_9_0_set
    __swig_getmethods__["eVIDX_9_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_9_0_get
    if _newclass:
        eVIDX_9_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_9_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_9_0_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_UseVIDX_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_UseVIDX_set)
    __swig_setmethods__["TC_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_0_set
    __swig_getmethods__["TC_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_0_get
    if _newclass:
        TC_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_UP_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word1_set)
    __swig_setmethods__["EgressFilterEnable"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_EgressFilterEnable_set
    __swig_getmethods__["EgressFilterEnable"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_EgressFilterEnable_get
    if _newclass:
        EgressFilterEnable = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_EgressFilterEnable_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_EgressFilterEnable_set)
    __swig_setmethods__["Reserved_word1_29"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word1_29_set
    __swig_getmethods__["Reserved_word1_29"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word1_29_get
    if _newclass:
        Reserved_word1_29 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word1_29_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word1_29_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_EgressFilterRegistered_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["TC_2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_2_set
    __swig_getmethods__["TC_2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_2_get
    if _newclass:
        TC_2 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_2_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_2_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_PacketIsLooped_set)
    __swig_setmethods__["SrcID_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcID_4_0_set
    __swig_getmethods__["SrcID_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcID_4_0_get
    if _newclass:
        SrcID_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcID_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcID_4_0_set)
    __swig_setmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcDev_4_0_set
    __swig_getmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcDev_4_0_get
    if _newclass:
        SrcDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcDev_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcDev_4_0_set)
    __swig_setmethods__["TC_1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_1_set
    __swig_getmethods__["TC_1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_1_get
    if _newclass:
        TC_1 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_1_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TC_1_set)
    __swig_setmethods__["eVIDX_11_10"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_11_10_set
    __swig_getmethods__["eVIDX_11_10"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_11_10_get
    if _newclass:
        eVIDX_11_10 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_11_10_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_11_10_set)
    __swig_setmethods__["ExcludeIsTrunk"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludeIsTrunk_set
    __swig_getmethods__["ExcludeIsTrunk"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludeIsTrunk_get
    if _newclass:
        ExcludeIsTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludeIsTrunk_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludeIsTrunk_set)
    __swig_setmethods__["ExcludedPhyPort_ePort_5_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedPhyPort_ePort_5_0_set
    __swig_getmethods__["ExcludedPhyPort_ePort_5_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedPhyPort_ePort_5_0_get
    if _newclass:
        ExcludedPhyPort_ePort_5_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedPhyPort_ePort_5_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedPhyPort_ePort_5_0_set)
    __swig_setmethods__["ExcludedDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedDev_4_0_set
    __swig_getmethods__["ExcludedDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedDev_4_0_get
    if _newclass:
        ExcludedDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedDev_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedDev_4_0_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word2_30_set
    __swig_getmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word2_30_get
    if _newclass:
        Reserved_word2_30 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word2_30_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word2_30_set)
    __swig_setmethods__["Reserved_word2_29_28"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word2_29_28_set
    __swig_getmethods__["Reserved_word2_29_28"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word2_29_28_get
    if _newclass:
        Reserved_word2_29_28 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word2_29_28_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word2_29_28_set)
    __swig_setmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcID_11_5_set
    __swig_getmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcID_11_5_get
    if _newclass:
        SrcID_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcID_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcID_11_5_set)
    __swig_setmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcDev_11_5_set
    __swig_getmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcDev_11_5_get
    if _newclass:
        SrcDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcDev_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcDev_11_5_set)
    __swig_setmethods__["ExcludedPhyPort_ePort_16_6"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedPhyPort_ePort_16_6_set
    __swig_getmethods__["ExcludedPhyPort_ePort_16_6"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedPhyPort_ePort_16_6_get
    if _newclass:
        ExcludedPhyPort_ePort_16_6 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedPhyPort_ePort_16_6_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedPhyPort_ePort_16_6_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Tag1SrcTagged_set
    __swig_getmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Tag1SrcTagged_get
    if _newclass:
        Tag1SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Tag1SrcTagged_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Tag1SrcTagged_set)
    __swig_setmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcTag0IsOuterTag_set
    __swig_getmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcTag0IsOuterTag_get
    if _newclass:
        SrcTag0IsOuterTag = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcTag0IsOuterTag_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SrcTag0IsOuterTag_set)
    __swig_setmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word3_24_set
    __swig_getmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word3_24_get
    if _newclass:
        Reserved_word3_24 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word3_24_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word3_24_set)
    __swig_setmethods__["eVIDX_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_15_12_set
    __swig_getmethods__["eVIDX_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_15_12_get
    if _newclass:
        eVIDX_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_15_12_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_eVIDX_15_12_set)
    __swig_setmethods__["ExcludedIsPhyPort"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedIsPhyPort_set
    __swig_getmethods__["ExcludedIsPhyPort"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedIsPhyPort_get
    if _newclass:
        ExcludedIsPhyPort = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedIsPhyPort_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedIsPhyPort_set)
    __swig_setmethods__["Reserved_word3_18_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word3_18_7_set
    __swig_getmethods__["Reserved_word3_18_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word3_18_7_get
    if _newclass:
        Reserved_word3_18_7 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word3_18_7_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Reserved_word3_18_7_set)
    __swig_setmethods__["ExcludedDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedDev_11_5_set
    __swig_getmethods__["ExcludedDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedDev_11_5_get
    if _newclass:
        ExcludedDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedDev_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ExcludedDev_11_5_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_GetElementToolTip(self)
SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_swigregister = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_swigregister
SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX_swigregister(SIP5_eDSA_FromCPU_ExcludeNotTrunk_UseVIDX)

class SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TagCommand_set)
    __swig_setmethods__["TrgTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgTagged_set
    __swig_getmethods__["TrgTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgTagged_get
    if _newclass:
        TrgTagged = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgTagged_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgTagged_set)
    __swig_setmethods__["TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgDev_4_0_set
    __swig_getmethods__["TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgDev_4_0_get
    if _newclass:
        TrgDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgDev_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgDev_4_0_set)
    __swig_setmethods__["TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_4_0_set
    __swig_getmethods__["TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_4_0_get
    if _newclass:
        TrgPhyPort_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_4_0_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_UseVIDX_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_UseVIDX_set)
    __swig_setmethods__["TC_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_0_set
    __swig_getmethods__["TC_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_0_get
    if _newclass:
        TC_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_0_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_UP_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word1_set)
    __swig_setmethods__["EgressFilterEnable"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_EgressFilterEnable_set
    __swig_getmethods__["EgressFilterEnable"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_EgressFilterEnable_get
    if _newclass:
        EgressFilterEnable = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_EgressFilterEnable_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_EgressFilterEnable_set)
    __swig_setmethods__["Reserved_word1_29"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_29_set
    __swig_getmethods__["Reserved_word1_29"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_29_get
    if _newclass:
        Reserved_word1_29 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_29_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_29_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_EgressFilterRegistered_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["TC_2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_2_set
    __swig_getmethods__["TC_2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_2_get
    if _newclass:
        TC_2 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_2_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_2_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_PacketIsLooped_set)
    __swig_setmethods__["SrcID_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcID_4_0_set
    __swig_getmethods__["SrcID_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcID_4_0_get
    if _newclass:
        SrcID_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcID_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcID_4_0_set)
    __swig_setmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcDev_4_0_set
    __swig_getmethods__["SrcDev_4_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcDev_4_0_get
    if _newclass:
        SrcDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcDev_4_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcDev_4_0_set)
    __swig_setmethods__["TC_1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_1_set
    __swig_getmethods__["TC_1"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_1_get
    if _newclass:
        TC_1 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_1_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TC_1_set)
    __swig_setmethods__["MailboxToNeighborCPU"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_MailboxToNeighborCPU_set
    __swig_getmethods__["MailboxToNeighborCPU"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_MailboxToNeighborCPU_get
    if _newclass:
        MailboxToNeighborCPU = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_MailboxToNeighborCPU_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_MailboxToNeighborCPU_set)
    __swig_setmethods__["Reserved_word1_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_12_set
    __swig_getmethods__["Reserved_word1_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_12_get
    if _newclass:
        Reserved_word1_12 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_12_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_12_set)
    __swig_setmethods__["TrgPhyPort_6_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_6_5_set
    __swig_getmethods__["TrgPhyPort_6_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_6_5_get
    if _newclass:
        TrgPhyPort_6_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_6_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_6_5_set)
    __swig_setmethods__["Reserved_word1_9_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_9_0_set
    __swig_getmethods__["Reserved_word1_9_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_9_0_get
    if _newclass:
        Reserved_word1_9_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_9_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word1_9_0_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word2_30_set
    __swig_getmethods__["Reserved_word2_30"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word2_30_get
    if _newclass:
        Reserved_word2_30 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word2_30_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word2_30_set)
    __swig_setmethods__["IsTrgPhyPortValid"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_IsTrgPhyPortValid_set
    __swig_getmethods__["IsTrgPhyPortValid"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_IsTrgPhyPortValid_get
    if _newclass:
        IsTrgPhyPortValid = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_IsTrgPhyPortValid_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_IsTrgPhyPortValid_set)
    __swig_setmethods__["TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_7_set
    __swig_getmethods__["TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_7_get
    if _newclass:
        TrgPhyPort_7 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_7_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgPhyPort_7_set)
    __swig_setmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcID_11_5_set
    __swig_getmethods__["SrcID_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcID_11_5_get
    if _newclass:
        SrcID_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcID_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcID_11_5_set)
    __swig_setmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcDev_11_5_set
    __swig_getmethods__["SrcDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcDev_11_5_get
    if _newclass:
        SrcDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcDev_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcDev_11_5_set)
    __swig_setmethods__["Reserved_word2_13_3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word2_13_3_set
    __swig_getmethods__["Reserved_word2_13_3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word2_13_3_get
    if _newclass:
        Reserved_word2_13_3 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word2_13_3_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word2_13_3_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Tag1SrcTagged_set
    __swig_getmethods__["Tag1SrcTagged"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Tag1SrcTagged_get
    if _newclass:
        Tag1SrcTagged = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Tag1SrcTagged_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Tag1SrcTagged_set)
    __swig_setmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcTag0IsOuterTag_set
    __swig_getmethods__["SrcTag0IsOuterTag"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcTag0IsOuterTag_get
    if _newclass:
        SrcTag0IsOuterTag = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcTag0IsOuterTag_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SrcTag0IsOuterTag_set)
    __swig_setmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word3_24_set
    __swig_getmethods__["Reserved_word3_24"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word3_24_get
    if _newclass:
        Reserved_word3_24 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word3_24_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Reserved_word3_24_set)
    __swig_setmethods__["Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Trg_ePort_16_0_set
    __swig_getmethods__["Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Trg_ePort_16_0_get
    if _newclass:
        Trg_ePort_16_0 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Trg_ePort_16_0_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Trg_ePort_16_0_set)
    __swig_setmethods__["TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgDev_11_5_set
    __swig_getmethods__["TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgDev_11_5_get
    if _newclass:
        TrgDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgDev_11_5_get, _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_TrgDev_11_5_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_GetElementToolTip(self)
SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_swigregister = _PythonWrapper.SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_swigregister
SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX_swigregister(SIP5_eDSA_FromCPU_ExcludeNotTrunk_NoVIDX)

class SIP5_eDSA_ToCPU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_ToCPU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_ToCPU, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_ToCPU_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_ToCPU_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_TagCommand_get, _PythonWrapper.SIP5_eDSA_ToCPU_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_SrcTrgTagged_get, _PythonWrapper.SIP5_eDSA_ToCPU_SrcTrgTagged_set)
    __swig_setmethods__["SrcDev_4_0_TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcDev_4_0_TrgDev_4_0_set
    __swig_getmethods__["SrcDev_4_0_TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcDev_4_0_TrgDev_4_0_get
    if _newclass:
        SrcDev_4_0_TrgDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_SrcDev_4_0_TrgDev_4_0_get, _PythonWrapper.SIP5_eDSA_ToCPU_SrcDev_4_0_TrgDev_4_0_set)
    __swig_setmethods__["SrcPhyPort_4_0_TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_4_0_TrgPhyPort_4_0_set
    __swig_getmethods__["SrcPhyPort_4_0_TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_4_0_TrgPhyPort_4_0_get
    if _newclass:
        SrcPhyPort_4_0_TrgPhyPort_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_4_0_TrgPhyPort_4_0_get, _PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_4_0_TrgPhyPort_4_0_set)
    __swig_setmethods__["Reserved_word0_18_16"] = _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word0_18_16_set
    __swig_getmethods__["Reserved_word0_18_16"] = _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word0_18_16_get
    if _newclass:
        Reserved_word0_18_16 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word0_18_16_get, _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word0_18_16_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_ToCPU_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_ToCPU_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_UP_get, _PythonWrapper.SIP5_eDSA_ToCPU_UP_set)
    __swig_setmethods__["Reserved_word0_12"] = _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word0_12_set
    __swig_getmethods__["Reserved_word0_12"] = _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word0_12_get
    if _newclass:
        Reserved_word0_12 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word0_12_get, _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word0_12_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_ToCPU_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_ToCPU_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_ToCPU_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_ToCPU_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_ToCPU_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Extend_word1_get, _PythonWrapper.SIP5_eDSA_ToCPU_Extend_word1_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_ToCPU_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_ToCPU_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_CFI_get, _PythonWrapper.SIP5_eDSA_ToCPU_CFI_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_ToCPU_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_ToCPU_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_DropOnSource_get, _PythonWrapper.SIP5_eDSA_ToCPU_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_ToCPU_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_ToCPU_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_ToCPU_PacketIsLooped_set)
    __swig_setmethods__["OrigIsTrunk"] = _PythonWrapper.SIP5_eDSA_ToCPU_OrigIsTrunk_set
    __swig_getmethods__["OrigIsTrunk"] = _PythonWrapper.SIP5_eDSA_ToCPU_OrigIsTrunk_get
    if _newclass:
        OrigIsTrunk = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_OrigIsTrunk_get, _PythonWrapper.SIP5_eDSA_ToCPU_OrigIsTrunk_set)
    __swig_setmethods__["Truncated"] = _PythonWrapper.SIP5_eDSA_ToCPU_Truncated_set
    __swig_getmethods__["Truncated"] = _PythonWrapper.SIP5_eDSA_ToCPU_Truncated_get
    if _newclass:
        Truncated = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Truncated_get, _PythonWrapper.SIP5_eDSA_ToCPU_Truncated_set)
    __swig_setmethods__["Timestamp_14_1_PktOrigBC"] = _PythonWrapper.SIP5_eDSA_ToCPU_Timestamp_14_1_PktOrigBC_set
    __swig_getmethods__["Timestamp_14_1_PktOrigBC"] = _PythonWrapper.SIP5_eDSA_ToCPU_Timestamp_14_1_PktOrigBC_get
    if _newclass:
        Timestamp_14_1_PktOrigBC = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Timestamp_14_1_PktOrigBC_get, _PythonWrapper.SIP5_eDSA_ToCPU_Timestamp_14_1_PktOrigBC_set)
    __swig_setmethods__["SrcPhyPort_6_5_TrgPhyPort_6_5"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_6_5_TrgPhyPort_6_5_set
    __swig_getmethods__["SrcPhyPort_6_5_TrgPhyPort_6_5"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_6_5_TrgPhyPort_6_5_get
    if _newclass:
        SrcPhyPort_6_5_TrgPhyPort_6_5 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_6_5_TrgPhyPort_6_5_get, _PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_6_5_TrgPhyPort_6_5_set)
    __swig_setmethods__["Timestamp_0_Reserved"] = _PythonWrapper.SIP5_eDSA_ToCPU_Timestamp_0_Reserved_set
    __swig_getmethods__["Timestamp_0_Reserved"] = _PythonWrapper.SIP5_eDSA_ToCPU_Timestamp_0_Reserved_get
    if _newclass:
        Timestamp_0_Reserved = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Timestamp_0_Reserved_get, _PythonWrapper.SIP5_eDSA_ToCPU_Timestamp_0_Reserved_set)
    __swig_setmethods__["SrcTrg"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcTrg_set
    __swig_getmethods__["SrcTrg"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcTrg_get
    if _newclass:
        SrcTrg = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_SrcTrg_get, _PythonWrapper.SIP5_eDSA_ToCPU_SrcTrg_set)
    __swig_setmethods__["LongCPUCode"] = _PythonWrapper.SIP5_eDSA_ToCPU_LongCPUCode_set
    __swig_getmethods__["LongCPUCode"] = _PythonWrapper.SIP5_eDSA_ToCPU_LongCPUCode_get
    if _newclass:
        LongCPUCode = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_LongCPUCode_get, _PythonWrapper.SIP5_eDSA_ToCPU_LongCPUCode_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_ToCPU_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_ToCPU_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Extend_word2_get, _PythonWrapper.SIP5_eDSA_ToCPU_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30_26"] = _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word2_30_26_set
    __swig_getmethods__["Reserved_word2_30_26"] = _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word2_30_26_get
    if _newclass:
        Reserved_word2_30_26 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word2_30_26_get, _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word2_30_26_set)
    __swig_setmethods__["PacketIsTT"] = _PythonWrapper.SIP5_eDSA_ToCPU_PacketIsTT_set
    __swig_getmethods__["PacketIsTT"] = _PythonWrapper.SIP5_eDSA_ToCPU_PacketIsTT_get
    if _newclass:
        PacketIsTT = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_PacketIsTT_get, _PythonWrapper.SIP5_eDSA_ToCPU_PacketIsTT_set)
    __swig_setmethods__["Reserved_word2_24_21"] = _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word2_24_21_set
    __swig_getmethods__["Reserved_word2_24_21"] = _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word2_24_21_get
    if _newclass:
        Reserved_word2_24_21 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word2_24_21_get, _PythonWrapper.SIP5_eDSA_ToCPU_Reserved_word2_24_21_set)
    __swig_setmethods__["SrcPhyPort_7_TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_7_TrgPhyPort_7_set
    __swig_getmethods__["SrcPhyPort_7_TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_7_TrgPhyPort_7_get
    if _newclass:
        SrcPhyPort_7_TrgPhyPort_7 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_7_TrgPhyPort_7_get, _PythonWrapper.SIP5_eDSA_ToCPU_SrcPhyPort_7_TrgPhyPort_7_set)
    __swig_setmethods__["Src_ePort_16_0_Trg_ePort_16_0_SrcTrunk_11_0"] = _PythonWrapper.SIP5_eDSA_ToCPU_Src_ePort_16_0_Trg_ePort_16_0_SrcTrunk_11_0_set
    __swig_getmethods__["Src_ePort_16_0_Trg_ePort_16_0_SrcTrunk_11_0"] = _PythonWrapper.SIP5_eDSA_ToCPU_Src_ePort_16_0_Trg_ePort_16_0_SrcTrunk_11_0_get
    if _newclass:
        Src_ePort_16_0_Trg_ePort_16_0_SrcTrunk_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Src_ePort_16_0_Trg_ePort_16_0_SrcTrunk_11_0_get, _PythonWrapper.SIP5_eDSA_ToCPU_Src_ePort_16_0_Trg_ePort_16_0_SrcTrunk_11_0_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_ToCPU_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_ToCPU_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_TPID_Index_get, _PythonWrapper.SIP5_eDSA_ToCPU_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_ToCPU_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_ToCPU_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_Extend_word3_get, _PythonWrapper.SIP5_eDSA_ToCPU_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_ToCPU_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_ToCPU_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_ToCPU_eVLAN_15_12_set)
    __swig_setmethods__["FlowID_TT_Offset"] = _PythonWrapper.SIP5_eDSA_ToCPU_FlowID_TT_Offset_set
    __swig_getmethods__["FlowID_TT_Offset"] = _PythonWrapper.SIP5_eDSA_ToCPU_FlowID_TT_Offset_get
    if _newclass:
        FlowID_TT_Offset = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_FlowID_TT_Offset_get, _PythonWrapper.SIP5_eDSA_ToCPU_FlowID_TT_Offset_set)
    __swig_setmethods__["SrcDev_11_5_TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcDev_11_5_TrgDev_11_5_set
    __swig_getmethods__["SrcDev_11_5_TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_ToCPU_SrcDev_11_5_TrgDev_11_5_get
    if _newclass:
        SrcDev_11_5_TrgDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_ToCPU_SrcDev_11_5_TrgDev_11_5_get, _PythonWrapper.SIP5_eDSA_ToCPU_SrcDev_11_5_TrgDev_11_5_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_ToCPU(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_ToCPU_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_ToCPU
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_ToCPU_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_ToCPU_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_ToCPU_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_ToCPU_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_ToCPU_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_ToCPU_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_ToCPU_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_ToCPU_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_ToCPU_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_ToCPU_GetElementToolTip(self)
SIP5_eDSA_ToCPU_swigregister = _PythonWrapper.SIP5_eDSA_ToCPU_swigregister
SIP5_eDSA_ToCPU_swigregister(SIP5_eDSA_ToCPU)

class SIP5_eDSA_ToAnalyzer_Use_eVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_ToAnalyzer_Use_eVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_ToAnalyzer_Use_eVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcTrgTagged_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcTrgTagged_set)
    __swig_setmethods__["SrcDev_4_0_TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcDev_4_0_TrgDev_4_0_set
    __swig_getmethods__["SrcDev_4_0_TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcDev_4_0_TrgDev_4_0_get
    if _newclass:
        SrcDev_4_0_TrgDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcDev_4_0_TrgDev_4_0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcDev_4_0_TrgDev_4_0_set)
    __swig_setmethods__["SrcPhyPort_4_0_TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_4_0_TrgPhyPort_4_0_set
    __swig_getmethods__["SrcPhyPort_4_0_TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_4_0_TrgPhyPort_4_0_get
    if _newclass:
        SrcPhyPort_4_0_TrgPhyPort_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_4_0_TrgPhyPort_4_0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_4_0_TrgPhyPort_4_0_set)
    __swig_setmethods__["rx_sniff"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_rx_sniff_set
    __swig_getmethods__["rx_sniff"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_rx_sniff_get
    if _newclass:
        rx_sniff = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_rx_sniff_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_rx_sniff_set)
    __swig_setmethods__["Reserved_word0_17"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word0_17_set
    __swig_getmethods__["Reserved_word0_17"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word0_17_get
    if _newclass:
        Reserved_word0_17 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word0_17_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word0_17_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_UP_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word1_set)
    __swig_setmethods__["Reserved_word1_30"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_30_set
    __swig_getmethods__["Reserved_word1_30"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_30_get
    if _newclass:
        Reserved_word1_30 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_30_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_30_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_PacketIsLooped_set)
    __swig_setmethods__["AnalyzerIsTrg_PhyPortValid"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerIsTrg_PhyPortValid_set
    __swig_getmethods__["AnalyzerIsTrg_PhyPortValid"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerIsTrg_PhyPortValid_get
    if _newclass:
        AnalyzerIsTrg_PhyPortValid = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerIsTrg_PhyPortValid_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerIsTrg_PhyPortValid_set)
    __swig_setmethods__["AnalyzerUse_eVIDX"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerUse_eVIDX_set
    __swig_getmethods__["AnalyzerUse_eVIDX"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerUse_eVIDX_get
    if _newclass:
        AnalyzerUse_eVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerUse_eVIDX_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerUse_eVIDX_set)
    __swig_setmethods__["AnalyzerTrgDev"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerTrgDev_set
    __swig_getmethods__["AnalyzerTrgDev"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerTrgDev_get
    if _newclass:
        AnalyzerTrgDev = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerTrgDev_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerTrgDev_set)
    __swig_setmethods__["Reserved_word1_13_12"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_13_12_set
    __swig_getmethods__["Reserved_word1_13_12"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_13_12_get
    if _newclass:
        Reserved_word1_13_12 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_13_12_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_13_12_set)
    __swig_setmethods__["SrcPhyPort_6_TrgPhyPort_6"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_6_TrgPhyPort_6_set
    __swig_getmethods__["SrcPhyPort_6_TrgPhyPort_6"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_6_TrgPhyPort_6_get
    if _newclass:
        SrcPhyPort_6_TrgPhyPort_6 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_6_TrgPhyPort_6_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_6_TrgPhyPort_6_set)
    __swig_setmethods__["SrcPhyPort_5_TrgPhyPort_5"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_5_TrgPhyPort_5_set
    __swig_getmethods__["SrcPhyPort_5_TrgPhyPort_5"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_5_TrgPhyPort_5_get
    if _newclass:
        SrcPhyPort_5_TrgPhyPort_5 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_5_TrgPhyPort_5_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_5_TrgPhyPort_5_set)
    __swig_setmethods__["Reserved_word1_9_8"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_9_8_set
    __swig_getmethods__["Reserved_word1_9_8"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_9_8_get
    if _newclass:
        Reserved_word1_9_8 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_9_8_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word1_9_8_set)
    __swig_setmethods__["AnalyzerTrgPhyPort"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerTrgPhyPort_set
    __swig_getmethods__["AnalyzerTrgPhyPort"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerTrgPhyPort_get
    if _newclass:
        AnalyzerTrgPhyPort = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerTrgPhyPort_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_AnalyzerTrgPhyPort_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30_21"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word2_30_21_set
    __swig_getmethods__["Reserved_word2_30_21"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word2_30_21_get
    if _newclass:
        Reserved_word2_30_21 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word2_30_21_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word2_30_21_set)
    __swig_setmethods__["SrcPhyPort_7_TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_7_TrgPhyPort_7_set
    __swig_getmethods__["SrcPhyPort_7_TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_7_TrgPhyPort_7_get
    if _newclass:
        SrcPhyPort_7_TrgPhyPort_7 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_7_TrgPhyPort_7_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcPhyPort_7_TrgPhyPort_7_set)
    __swig_setmethods__["Src_ePort_16_0_Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Src_ePort_16_0_Trg_ePort_16_0_set
    __swig_getmethods__["Src_ePort_16_0_Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Src_ePort_16_0_Trg_ePort_16_0_get
    if _newclass:
        Src_ePort_16_0_Trg_ePort_16_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Src_ePort_16_0_Trg_ePort_16_0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Src_ePort_16_0_Trg_ePort_16_0_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Reserved_word3_26_24"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word3_26_24_set
    __swig_getmethods__["Reserved_word3_26_24"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word3_26_24_get
    if _newclass:
        Reserved_word3_26_24 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word3_26_24_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word3_26_24_set)
    __swig_setmethods__["Reserved_word3_23"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word3_23_set
    __swig_getmethods__["Reserved_word3_23"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word3_23_get
    if _newclass:
        Reserved_word3_23 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word3_23_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Reserved_word3_23_set)
    __swig_setmethods__["Analyzer_eVIDX"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Analyzer_eVIDX_set
    __swig_getmethods__["Analyzer_eVIDX"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Analyzer_eVIDX_get
    if _newclass:
        Analyzer_eVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Analyzer_eVIDX_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Analyzer_eVIDX_set)
    __swig_setmethods__["SrcDev_11_5_TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcDev_11_5_TrgDev_11_5_set
    __swig_getmethods__["SrcDev_11_5_TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcDev_11_5_TrgDev_11_5_get
    if _newclass:
        SrcDev_11_5_TrgDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcDev_11_5_TrgDev_11_5_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SrcDev_11_5_TrgDev_11_5_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_ToAnalyzer_Use_eVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_ToAnalyzer_Use_eVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_GetElementToolTip(self)
SIP5_eDSA_ToAnalyzer_Use_eVIDX_swigregister = _PythonWrapper.SIP5_eDSA_ToAnalyzer_Use_eVIDX_swigregister
SIP5_eDSA_ToAnalyzer_Use_eVIDX_swigregister(SIP5_eDSA_ToAnalyzer_Use_eVIDX)

class SIP5_eDSA_ToAnalyzer_NotUse_eVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIP5_eDSA_ToAnalyzer_NotUse_eVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIP5_eDSA_ToAnalyzer_NotUse_eVIDX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_TagCommand_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcTrgTagged_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcTrgTagged_set)
    __swig_setmethods__["SrcDev_4_0_TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcDev_4_0_TrgDev_4_0_set
    __swig_getmethods__["SrcDev_4_0_TrgDev_4_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcDev_4_0_TrgDev_4_0_get
    if _newclass:
        SrcDev_4_0_TrgDev_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcDev_4_0_TrgDev_4_0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcDev_4_0_TrgDev_4_0_set)
    __swig_setmethods__["SrcPhyPort_4_0_TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_4_0_TrgPhyPort_4_0_set
    __swig_getmethods__["SrcPhyPort_4_0_TrgPhyPort_4_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_4_0_TrgPhyPort_4_0_get
    if _newclass:
        SrcPhyPort_4_0_TrgPhyPort_4_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_4_0_TrgPhyPort_4_0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_4_0_TrgPhyPort_4_0_set)
    __swig_setmethods__["rx_sniff"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_rx_sniff_set
    __swig_getmethods__["rx_sniff"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_rx_sniff_get
    if _newclass:
        rx_sniff = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_rx_sniff_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_rx_sniff_set)
    __swig_setmethods__["Reserved_word0_17"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word0_17_set
    __swig_getmethods__["Reserved_word0_17"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word0_17_get
    if _newclass:
        Reserved_word0_17 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word0_17_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word0_17_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_CFI_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_CFI_set)
    __swig_setmethods__["UP"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_UP_set
    __swig_getmethods__["UP"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_UP_get
    if _newclass:
        UP = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_UP_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_UP_set)
    __swig_setmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word0_set
    __swig_getmethods__["Extend_word0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word0_get
    if _newclass:
        Extend_word0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word0_set)
    __swig_setmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_eVLAN_11_0_set
    __swig_getmethods__["eVLAN_11_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_eVLAN_11_0_get
    if _newclass:
        eVLAN_11_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_eVLAN_11_0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_eVLAN_11_0_set)
    __swig_setmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word1_set
    __swig_getmethods__["Extend_word1"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word1_get
    if _newclass:
        Extend_word1 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word1_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word1_set)
    __swig_setmethods__["Reserved_word1_30"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_30_set
    __swig_getmethods__["Reserved_word1_30"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_30_get
    if _newclass:
        Reserved_word1_30 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_30_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_30_set)
    __swig_setmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_DropOnSource_set
    __swig_getmethods__["DropOnSource"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_DropOnSource_get
    if _newclass:
        DropOnSource = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_DropOnSource_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_DropOnSource_set)
    __swig_setmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_PacketIsLooped_set
    __swig_getmethods__["PacketIsLooped"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_PacketIsLooped_get
    if _newclass:
        PacketIsLooped = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_PacketIsLooped_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_PacketIsLooped_set)
    __swig_setmethods__["AnalyzerIsTrg_PhyPortValid"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerIsTrg_PhyPortValid_set
    __swig_getmethods__["AnalyzerIsTrg_PhyPortValid"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerIsTrg_PhyPortValid_get
    if _newclass:
        AnalyzerIsTrg_PhyPortValid = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerIsTrg_PhyPortValid_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerIsTrg_PhyPortValid_set)
    __swig_setmethods__["AnalyzerUse_eVIDX"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerUse_eVIDX_set
    __swig_getmethods__["AnalyzerUse_eVIDX"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerUse_eVIDX_get
    if _newclass:
        AnalyzerUse_eVIDX = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerUse_eVIDX_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerUse_eVIDX_set)
    __swig_setmethods__["AnalyzerTrgDev"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerTrgDev_set
    __swig_getmethods__["AnalyzerTrgDev"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerTrgDev_get
    if _newclass:
        AnalyzerTrgDev = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerTrgDev_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerTrgDev_set)
    __swig_setmethods__["Reserved_word1_13_12"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_13_12_set
    __swig_getmethods__["Reserved_word1_13_12"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_13_12_get
    if _newclass:
        Reserved_word1_13_12 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_13_12_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_13_12_set)
    __swig_setmethods__["SrcPhyPort_6_TrgPhyPort_6"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_6_TrgPhyPort_6_set
    __swig_getmethods__["SrcPhyPort_6_TrgPhyPort_6"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_6_TrgPhyPort_6_get
    if _newclass:
        SrcPhyPort_6_TrgPhyPort_6 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_6_TrgPhyPort_6_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_6_TrgPhyPort_6_set)
    __swig_setmethods__["SrcPhyPort_5_TrgPhyPort_5"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_5_TrgPhyPort_5_set
    __swig_getmethods__["SrcPhyPort_5_TrgPhyPort_5"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_5_TrgPhyPort_5_get
    if _newclass:
        SrcPhyPort_5_TrgPhyPort_5 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_5_TrgPhyPort_5_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_5_TrgPhyPort_5_set)
    __swig_setmethods__["Reserved_word1_9_8"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_9_8_set
    __swig_getmethods__["Reserved_word1_9_8"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_9_8_get
    if _newclass:
        Reserved_word1_9_8 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_9_8_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word1_9_8_set)
    __swig_setmethods__["AnalyzerTrgPhyPort"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerTrgPhyPort_set
    __swig_getmethods__["AnalyzerTrgPhyPort"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerTrgPhyPort_get
    if _newclass:
        AnalyzerTrgPhyPort = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerTrgPhyPort_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_AnalyzerTrgPhyPort_set)
    __swig_setmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word2_set
    __swig_getmethods__["Extend_word2"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word2_get
    if _newclass:
        Extend_word2 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word2_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word2_set)
    __swig_setmethods__["Reserved_word2_30_21"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word2_30_21_set
    __swig_getmethods__["Reserved_word2_30_21"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word2_30_21_get
    if _newclass:
        Reserved_word2_30_21 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word2_30_21_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word2_30_21_set)
    __swig_setmethods__["SrcPhyPort_7_TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_7_TrgPhyPort_7_set
    __swig_getmethods__["SrcPhyPort_7_TrgPhyPort_7"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_7_TrgPhyPort_7_get
    if _newclass:
        SrcPhyPort_7_TrgPhyPort_7 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_7_TrgPhyPort_7_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcPhyPort_7_TrgPhyPort_7_set)
    __swig_setmethods__["Src_ePort_16_0_Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Src_ePort_16_0_Trg_ePort_16_0_set
    __swig_getmethods__["Src_ePort_16_0_Trg_ePort_16_0"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Src_ePort_16_0_Trg_ePort_16_0_get
    if _newclass:
        Src_ePort_16_0_Trg_ePort_16_0 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Src_ePort_16_0_Trg_ePort_16_0_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Src_ePort_16_0_Trg_ePort_16_0_set)
    __swig_setmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_TPID_Index_set
    __swig_getmethods__["TPID_Index"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_TPID_Index_get
    if _newclass:
        TPID_Index = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_TPID_Index_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_TPID_Index_set)
    __swig_setmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word3_set
    __swig_getmethods__["Extend_word3"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word3_get
    if _newclass:
        Extend_word3 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word3_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Extend_word3_set)
    __swig_setmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_eVLAN_15_12_set
    __swig_getmethods__["eVLAN_15_12"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_eVLAN_15_12_get
    if _newclass:
        eVLAN_15_12 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_eVLAN_15_12_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_eVLAN_15_12_set)
    __swig_setmethods__["Reserved_word3_26_24"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word3_26_24_set
    __swig_getmethods__["Reserved_word3_26_24"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word3_26_24_get
    if _newclass:
        Reserved_word3_26_24 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word3_26_24_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Reserved_word3_26_24_set)
    __swig_setmethods__["Analyzer_ePort"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Analyzer_ePort_set
    __swig_getmethods__["Analyzer_ePort"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Analyzer_ePort_get
    if _newclass:
        Analyzer_ePort = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Analyzer_ePort_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Analyzer_ePort_set)
    __swig_setmethods__["SrcDev_11_5_TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcDev_11_5_TrgDev_11_5_set
    __swig_getmethods__["SrcDev_11_5_TrgDev_11_5"] = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcDev_11_5_TrgDev_11_5_get
    if _newclass:
        SrcDev_11_5_TrgDev_11_5 = _swig_property(_PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcDev_11_5_TrgDev_11_5_get, _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SrcDev_11_5_TrgDev_11_5_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SIP5_eDSA_ToAnalyzer_NotUse_eVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SIP5_eDSA_ToAnalyzer_NotUse_eVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_GetElementToolTip(self)
SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_swigregister = _PythonWrapper.SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_swigregister
SIP5_eDSA_ToAnalyzer_NotUse_eVIDX_swigregister(SIP5_eDSA_ToAnalyzer_NotUse_eVIDX)

class ETag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ETag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ETag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["E_PCP"] = _PythonWrapper.ETag_E_PCP_set
    __swig_getmethods__["E_PCP"] = _PythonWrapper.ETag_E_PCP_get
    if _newclass:
        E_PCP = _swig_property(_PythonWrapper.ETag_E_PCP_get, _PythonWrapper.ETag_E_PCP_set)
    __swig_setmethods__["E_DEI"] = _PythonWrapper.ETag_E_DEI_set
    __swig_getmethods__["E_DEI"] = _PythonWrapper.ETag_E_DEI_get
    if _newclass:
        E_DEI = _swig_property(_PythonWrapper.ETag_E_DEI_get, _PythonWrapper.ETag_E_DEI_set)
    __swig_setmethods__["Ingress_E_CID_base"] = _PythonWrapper.ETag_Ingress_E_CID_base_set
    __swig_getmethods__["Ingress_E_CID_base"] = _PythonWrapper.ETag_Ingress_E_CID_base_get
    if _newclass:
        Ingress_E_CID_base = _swig_property(_PythonWrapper.ETag_Ingress_E_CID_base_get, _PythonWrapper.ETag_Ingress_E_CID_base_set)
    __swig_setmethods__["Reserved"] = _PythonWrapper.ETag_Reserved_set
    __swig_getmethods__["Reserved"] = _PythonWrapper.ETag_Reserved_get
    if _newclass:
        Reserved = _swig_property(_PythonWrapper.ETag_Reserved_get, _PythonWrapper.ETag_Reserved_set)
    __swig_setmethods__["GRP"] = _PythonWrapper.ETag_GRP_set
    __swig_getmethods__["GRP"] = _PythonWrapper.ETag_GRP_get
    if _newclass:
        GRP = _swig_property(_PythonWrapper.ETag_GRP_get, _PythonWrapper.ETag_GRP_set)
    __swig_setmethods__["E_CID_base"] = _PythonWrapper.ETag_E_CID_base_set
    __swig_getmethods__["E_CID_base"] = _PythonWrapper.ETag_E_CID_base_get
    if _newclass:
        E_CID_base = _swig_property(_PythonWrapper.ETag_E_CID_base_get, _PythonWrapper.ETag_E_CID_base_set)
    __swig_setmethods__["Ingress_E_CID_ext"] = _PythonWrapper.ETag_Ingress_E_CID_ext_set
    __swig_getmethods__["Ingress_E_CID_ext"] = _PythonWrapper.ETag_Ingress_E_CID_ext_get
    if _newclass:
        Ingress_E_CID_ext = _swig_property(_PythonWrapper.ETag_Ingress_E_CID_ext_get, _PythonWrapper.ETag_Ingress_E_CID_ext_set)
    __swig_setmethods__["E_CID_ext"] = _PythonWrapper.ETag_E_CID_ext_set
    __swig_getmethods__["E_CID_ext"] = _PythonWrapper.ETag_E_CID_ext_get
    if _newclass:
        E_CID_ext = _swig_property(_PythonWrapper.ETag_E_CID_ext_get, _PythonWrapper.ETag_E_CID_ext_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_ETag(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.ETag_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_ETag
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.ETag_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.ETag_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.ETag_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.ETag_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.ETag_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.ETag_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.ETag_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.ETag_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.ETag_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.ETag_GetElementToolTip(self)
ETag_swigregister = _PythonWrapper.ETag_swigregister
ETag_swigregister(ETag)

class EthernetType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EthernetType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EthernetType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _PythonWrapper.EthernetType_type_set
    __swig_getmethods__["type"] = _PythonWrapper.EthernetType_type_get
    if _newclass:
        type = _swig_property(_PythonWrapper.EthernetType_type_get, _PythonWrapper.EthernetType_type_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_EthernetType(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.EthernetType_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_EthernetType
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.EthernetType_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.EthernetType_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.EthernetType_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.EthernetType_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.EthernetType_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.EthernetType_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.EthernetType_GetElementFieldsData(self, values)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.EthernetType_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.EthernetType_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.EthernetType_GetElementToolTip(self)
EthernetType_swigregister = _PythonWrapper.EthernetType_swigregister
EthernetType_swigregister(EthernetType)

class AslanA_FDsa_NoLBH_NoVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AslanA_FDsa_NoLBH_NoVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AslanA_FDsa_NoLBH_NoVIDX, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_AslanA_FDsa_NoLBH_NoVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_AslanA_FDsa_NoLBH_NoVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TagCommand_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SrcTrgTagged_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SrcTrgTagged_set)
    __swig_setmethods__["P3_OwnDev_6_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_6_2_set
    __swig_getmethods__["P3_OwnDev_6_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_6_2_get
    if _newclass:
        P3_OwnDev_6_2 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_6_2_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_6_2_set)
    __swig_setmethods__["P3_OwnDev_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_0_set
    __swig_getmethods__["P3_OwnDev_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_0_get
    if _newclass:
        P3_OwnDev_0 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_0_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_0_set)
    __swig_setmethods__["LocalSrcPort_5_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_LocalSrcPort_5_2_set
    __swig_getmethods__["LocalSrcPort_5_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_LocalSrcPort_5_2_get
    if _newclass:
        LocalSrcPort_5_2 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_LocalSrcPort_5_2_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_LocalSrcPort_5_2_set)
    __swig_setmethods__["Reserved0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved0_set
    __swig_getmethods__["Reserved0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved0_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved0_set)
    __swig_setmethods__["FabricCFI"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricCFI_set
    __swig_getmethods__["FabricCFI"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricCFI_get
    if _newclass:
        FabricCFI = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricCFI_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricCFI_set)
    __swig_setmethods__["FabricTC"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricTC_set
    __swig_getmethods__["FabricTC"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricTC_get
    if _newclass:
        FabricTC = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricTC_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricTC_set)
    __swig_setmethods__["Extend0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Extend0_set
    __swig_getmethods__["Extend0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Extend0_get
    if _newclass:
        Extend0 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Extend0_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Extend0_set)
    __swig_setmethods__["FabricVID"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricVID_set
    __swig_getmethods__["FabricVID"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricVID_get
    if _newclass:
        FabricVID = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricVID_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricVID_set)
    __swig_setmethods__["Extend1"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Extend1_set
    __swig_getmethods__["Extend1"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Extend1_get
    if _newclass:
        Extend1 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Extend1_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Extend1_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved1_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved1_set)
    __swig_setmethods__["P3_OwnDev_1"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_1_set
    __swig_getmethods__["P3_OwnDev_1"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_1_get
    if _newclass:
        P3_OwnDev_1 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_1_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_P3_OwnDev_1_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_EgressFilterRegistered_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["Reserved2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved2_set
    __swig_getmethods__["Reserved2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved2_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved2_set)
    __swig_setmethods__["SrcID"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SrcID_set
    __swig_getmethods__["SrcID"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SrcID_get
    if _newclass:
        SrcID = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SrcID_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_SrcID_set)
    __swig_setmethods__["FabricDP"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricDP_set
    __swig_getmethods__["FabricDP"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricDP_get
    if _newclass:
        FabricDP = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricDP_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricDP_set)
    __swig_setmethods__["PacketType"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_PacketType_set
    __swig_getmethods__["PacketType"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_PacketType_get
    if _newclass:
        PacketType = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_PacketType_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_PacketType_set)
    __swig_setmethods__["FabricTC_1_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricTC_1_0_set
    __swig_getmethods__["FabricTC_1_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricTC_1_0_get
    if _newclass:
        FabricTC_1_0 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricTC_1_0_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_FabricTC_1_0_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_UseVIDX_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_UseVIDX_set)
    __swig_setmethods__["Reserved3"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved3_set
    __swig_getmethods__["Reserved3"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved3_get
    if _newclass:
        Reserved3 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved3_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_Reserved3_set)
    __swig_setmethods__["TrgDev_1_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgDev_1_0_set
    __swig_getmethods__["TrgDev_1_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgDev_1_0_get
    if _newclass:
        TrgDev_1_0 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgDev_1_0_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgDev_1_0_set)
    __swig_setmethods__["TrgPort_5_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgPort_5_2_set
    __swig_getmethods__["TrgPort_5_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgPort_5_2_get
    if _newclass:
        TrgPort_5_2 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgPort_5_2_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgPort_5_2_set)
    __swig_setmethods__["TrgDev_6_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgDev_6_2_set
    __swig_getmethods__["TrgDev_6_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgDev_6_2_get
    if _newclass:
        TrgDev_6_2 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgDev_6_2_get, _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_TrgDev_6_2_set)
AslanA_FDsa_NoLBH_NoVIDX_swigregister = _PythonWrapper.AslanA_FDsa_NoLBH_NoVIDX_swigregister
AslanA_FDsa_NoLBH_NoVIDX_swigregister(AslanA_FDsa_NoLBH_NoVIDX)

class AslanA_FDsa_WithLBH_NoVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AslanA_FDsa_WithLBH_NoVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AslanA_FDsa_WithLBH_NoVIDX, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_AslanA_FDsa_WithLBH_NoVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_AslanA_FDsa_WithLBH_NoVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TagCommand_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SrcTrgTagged_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SrcTrgTagged_set)
    __swig_setmethods__["P3_OwnDev_6_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_6_2_set
    __swig_getmethods__["P3_OwnDev_6_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_6_2_get
    if _newclass:
        P3_OwnDev_6_2 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_6_2_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_6_2_set)
    __swig_setmethods__["P3_OwnDev_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_0_set
    __swig_getmethods__["P3_OwnDev_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_0_get
    if _newclass:
        P3_OwnDev_0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_0_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_0_set)
    __swig_setmethods__["LocalSrcPort_5_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_LocalSrcPort_5_2_set
    __swig_getmethods__["LocalSrcPort_5_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_LocalSrcPort_5_2_get
    if _newclass:
        LocalSrcPort_5_2 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_LocalSrcPort_5_2_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_LocalSrcPort_5_2_set)
    __swig_setmethods__["Reserved0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved0_set
    __swig_getmethods__["Reserved0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved0_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved0_set)
    __swig_setmethods__["FabricCFI"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricCFI_set
    __swig_getmethods__["FabricCFI"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricCFI_get
    if _newclass:
        FabricCFI = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricCFI_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricCFI_set)
    __swig_setmethods__["FabricTC"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricTC_set
    __swig_getmethods__["FabricTC"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricTC_get
    if _newclass:
        FabricTC = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricTC_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricTC_set)
    __swig_setmethods__["Extend0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Extend0_set
    __swig_getmethods__["Extend0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Extend0_get
    if _newclass:
        Extend0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Extend0_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Extend0_set)
    __swig_setmethods__["FabricVID_11_4"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricVID_11_4_set
    __swig_getmethods__["FabricVID_11_4"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricVID_11_4_get
    if _newclass:
        FabricVID_11_4 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricVID_11_4_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricVID_11_4_set)
    __swig_setmethods__["FlowID_3_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FlowID_3_0_set
    __swig_getmethods__["FlowID_3_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FlowID_3_0_get
    if _newclass:
        FlowID_3_0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FlowID_3_0_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FlowID_3_0_set)
    __swig_setmethods__["Extend1"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Extend1_set
    __swig_getmethods__["Extend1"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Extend1_get
    if _newclass:
        Extend1 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Extend1_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Extend1_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved1_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved1_set)
    __swig_setmethods__["P3_OwnDev_1"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_1_set
    __swig_getmethods__["P3_OwnDev_1"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_1_get
    if _newclass:
        P3_OwnDev_1 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_1_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_P3_OwnDev_1_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_EgressFilterRegistered_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["Reserved2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved2_set
    __swig_getmethods__["Reserved2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved2_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved2_set)
    __swig_setmethods__["SrcID"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SrcID_set
    __swig_getmethods__["SrcID"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SrcID_get
    if _newclass:
        SrcID = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SrcID_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_SrcID_set)
    __swig_setmethods__["FabricDP"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricDP_set
    __swig_getmethods__["FabricDP"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricDP_get
    if _newclass:
        FabricDP = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricDP_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricDP_set)
    __swig_setmethods__["PacketType"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_PacketType_set
    __swig_getmethods__["PacketType"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_PacketType_get
    if _newclass:
        PacketType = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_PacketType_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_PacketType_set)
    __swig_setmethods__["FabricTC_1_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricTC_1_0_set
    __swig_getmethods__["FabricTC_1_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricTC_1_0_get
    if _newclass:
        FabricTC_1_0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricTC_1_0_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_FabricTC_1_0_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_UseVIDX_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_UseVIDX_set)
    __swig_setmethods__["Reserved3"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved3_set
    __swig_getmethods__["Reserved3"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved3_get
    if _newclass:
        Reserved3 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved3_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_Reserved3_set)
    __swig_setmethods__["TrgDev_1_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgDev_1_0_set
    __swig_getmethods__["TrgDev_1_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgDev_1_0_get
    if _newclass:
        TrgDev_1_0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgDev_1_0_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgDev_1_0_set)
    __swig_setmethods__["TrgPort_5_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgPort_5_2_set
    __swig_getmethods__["TrgPort_5_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgPort_5_2_get
    if _newclass:
        TrgPort_5_2 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgPort_5_2_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgPort_5_2_set)
    __swig_setmethods__["TrgDev_6_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgDev_6_2_set
    __swig_getmethods__["TrgDev_6_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgDev_6_2_get
    if _newclass:
        TrgDev_6_2 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgDev_6_2_get, _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_TrgDev_6_2_set)
AslanA_FDsa_WithLBH_NoVIDX_swigregister = _PythonWrapper.AslanA_FDsa_WithLBH_NoVIDX_swigregister
AslanA_FDsa_WithLBH_NoVIDX_swigregister(AslanA_FDsa_WithLBH_NoVIDX)

class AslanA_FDsa_NoLBH_WithVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AslanA_FDsa_NoLBH_WithVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AslanA_FDsa_NoLBH_WithVIDX, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_AslanA_FDsa_NoLBH_WithVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_AslanA_FDsa_NoLBH_WithVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_TagCommand_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_TagCommand_set)
    __swig_setmethods__["SrcTagged"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SrcTagged_set
    __swig_getmethods__["SrcTagged"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SrcTagged_get
    if _newclass:
        SrcTagged = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SrcTagged_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SrcTagged_set)
    __swig_setmethods__["P3_OwnDev_6_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_6_2_set
    __swig_getmethods__["P3_OwnDev_6_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_6_2_get
    if _newclass:
        P3_OwnDev_6_2 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_6_2_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_6_2_set)
    __swig_setmethods__["P3_OwnDev_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_0_set
    __swig_getmethods__["P3_OwnDev_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_0_get
    if _newclass:
        P3_OwnDev_0 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_0_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_0_set)
    __swig_setmethods__["LocalSrcPort_5_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_LocalSrcPort_5_2_set
    __swig_getmethods__["LocalSrcPort_5_2"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_LocalSrcPort_5_2_get
    if _newclass:
        LocalSrcPort_5_2 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_LocalSrcPort_5_2_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_LocalSrcPort_5_2_set)
    __swig_setmethods__["Reserved0"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved0_set
    __swig_getmethods__["Reserved0"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved0_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved0_set)
    __swig_setmethods__["FabricCFI"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricCFI_set
    __swig_getmethods__["FabricCFI"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricCFI_get
    if _newclass:
        FabricCFI = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricCFI_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricCFI_set)
    __swig_setmethods__["FabricTC"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricTC_set
    __swig_getmethods__["FabricTC"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricTC_get
    if _newclass:
        FabricTC = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricTC_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricTC_set)
    __swig_setmethods__["Extend0"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Extend0_set
    __swig_getmethods__["Extend0"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Extend0_get
    if _newclass:
        Extend0 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Extend0_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Extend0_set)
    __swig_setmethods__["FabricVID"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricVID_set
    __swig_getmethods__["FabricVID"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricVID_get
    if _newclass:
        FabricVID = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricVID_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricVID_set)
    __swig_setmethods__["Extend1"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Extend1_set
    __swig_getmethods__["Extend1"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Extend1_get
    if _newclass:
        Extend1 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Extend1_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Extend1_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved1_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved1_set)
    __swig_setmethods__["P3_OwnDev_1"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_1_set
    __swig_getmethods__["P3_OwnDev_1"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_1_get
    if _newclass:
        P3_OwnDev_1 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_1_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_P3_OwnDev_1_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_EgressFilterRegistered_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["Reserved2"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved2_set
    __swig_getmethods__["Reserved2"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved2_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_Reserved2_set)
    __swig_setmethods__["SrcID"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SrcID_set
    __swig_getmethods__["SrcID"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SrcID_get
    if _newclass:
        SrcID = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SrcID_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_SrcID_set)
    __swig_setmethods__["FabricDP"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricDP_set
    __swig_getmethods__["FabricDP"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricDP_get
    if _newclass:
        FabricDP = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricDP_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricDP_set)
    __swig_setmethods__["PacketType"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_PacketType_set
    __swig_getmethods__["PacketType"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_PacketType_get
    if _newclass:
        PacketType = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_PacketType_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_PacketType_set)
    __swig_setmethods__["FabricTC_1_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricTC_1_0_set
    __swig_getmethods__["FabricTC_1_0"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricTC_1_0_get
    if _newclass:
        FabricTC_1_0 = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricTC_1_0_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricTC_1_0_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_UseVIDX_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_UseVIDX_set)
    __swig_setmethods__["FabricVIDX"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricVIDX_set
    __swig_getmethods__["FabricVIDX"] = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricVIDX_get
    if _newclass:
        FabricVIDX = _swig_property(_PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricVIDX_get, _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_FabricVIDX_set)
AslanA_FDsa_NoLBH_WithVIDX_swigregister = _PythonWrapper.AslanA_FDsa_NoLBH_WithVIDX_swigregister
AslanA_FDsa_NoLBH_WithVIDX_swigregister(AslanA_FDsa_NoLBH_WithVIDX)

class AslanA_FDsa_WithLBH_WithVIDX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AslanA_FDsa_WithLBH_WithVIDX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AslanA_FDsa_WithLBH_WithVIDX, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_AslanA_FDsa_WithLBH_WithVIDX(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_AslanA_FDsa_WithLBH_WithVIDX
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FillNativeData(self, pktSize, bUseDefaultValues)

    def ToString(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_ToString(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_GetElementSize(self)
    __swig_setmethods__["TagCommand"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_TagCommand_set
    __swig_getmethods__["TagCommand"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_TagCommand_get
    if _newclass:
        TagCommand = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_TagCommand_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_TagCommand_set)
    __swig_setmethods__["SrcTrgTagged"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SrcTrgTagged_set
    __swig_getmethods__["SrcTrgTagged"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SrcTrgTagged_get
    if _newclass:
        SrcTrgTagged = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SrcTrgTagged_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SrcTrgTagged_set)
    __swig_setmethods__["P3_OwnDev_6_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_6_2_set
    __swig_getmethods__["P3_OwnDev_6_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_6_2_get
    if _newclass:
        P3_OwnDev_6_2 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_6_2_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_6_2_set)
    __swig_setmethods__["P3_OwnDev_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_0_set
    __swig_getmethods__["P3_OwnDev_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_0_get
    if _newclass:
        P3_OwnDev_0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_0_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_0_set)
    __swig_setmethods__["LocalSrcPort_5_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_LocalSrcPort_5_2_set
    __swig_getmethods__["LocalSrcPort_5_2"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_LocalSrcPort_5_2_get
    if _newclass:
        LocalSrcPort_5_2 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_LocalSrcPort_5_2_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_LocalSrcPort_5_2_set)
    __swig_setmethods__["Reserved0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved0_set
    __swig_getmethods__["Reserved0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved0_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved0_set)
    __swig_setmethods__["FabricCFI"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricCFI_set
    __swig_getmethods__["FabricCFI"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricCFI_get
    if _newclass:
        FabricCFI = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricCFI_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricCFI_set)
    __swig_setmethods__["FabricTC"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricTC_set
    __swig_getmethods__["FabricTC"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricTC_get
    if _newclass:
        FabricTC = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricTC_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricTC_set)
    __swig_setmethods__["Extend0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Extend0_set
    __swig_getmethods__["Extend0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Extend0_get
    if _newclass:
        Extend0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Extend0_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Extend0_set)
    __swig_setmethods__["FabricVID_11_4"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricVID_11_4_set
    __swig_getmethods__["FabricVID_11_4"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricVID_11_4_get
    if _newclass:
        FabricVID_11_4 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricVID_11_4_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricVID_11_4_set)
    __swig_setmethods__["FlowID_3_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FlowID_3_0_set
    __swig_getmethods__["FlowID_3_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FlowID_3_0_get
    if _newclass:
        FlowID_3_0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FlowID_3_0_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FlowID_3_0_set)
    __swig_setmethods__["Extend1"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Extend1_set
    __swig_getmethods__["Extend1"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Extend1_get
    if _newclass:
        Extend1 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Extend1_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Extend1_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved1_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved1_set)
    __swig_setmethods__["P3_OwnDev_1"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_1_set
    __swig_getmethods__["P3_OwnDev_1"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_1_get
    if _newclass:
        P3_OwnDev_1 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_1_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_P3_OwnDev_1_set)
    __swig_setmethods__["EgressFilterRegistered"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_EgressFilterRegistered_set
    __swig_getmethods__["EgressFilterRegistered"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_EgressFilterRegistered_get
    if _newclass:
        EgressFilterRegistered = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_EgressFilterRegistered_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_EgressFilterRegistered_set)
    __swig_setmethods__["Reserved2"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved2_set
    __swig_getmethods__["Reserved2"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved2_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_Reserved2_set)
    __swig_setmethods__["SrcID"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SrcID_set
    __swig_getmethods__["SrcID"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SrcID_get
    if _newclass:
        SrcID = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SrcID_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_SrcID_set)
    __swig_setmethods__["FabricDP"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricDP_set
    __swig_getmethods__["FabricDP"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricDP_get
    if _newclass:
        FabricDP = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricDP_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricDP_set)
    __swig_setmethods__["PacketType"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_PacketType_set
    __swig_getmethods__["PacketType"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_PacketType_get
    if _newclass:
        PacketType = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_PacketType_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_PacketType_set)
    __swig_setmethods__["FabricTC_1_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricTC_1_0_set
    __swig_getmethods__["FabricTC_1_0"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricTC_1_0_get
    if _newclass:
        FabricTC_1_0 = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricTC_1_0_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricTC_1_0_set)
    __swig_setmethods__["UseVIDX"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_UseVIDX_set
    __swig_getmethods__["UseVIDX"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_UseVIDX_get
    if _newclass:
        UseVIDX = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_UseVIDX_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_UseVIDX_set)
    __swig_setmethods__["FabricVIDX"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricVIDX_set
    __swig_getmethods__["FabricVIDX"] = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricVIDX_get
    if _newclass:
        FabricVIDX = _swig_property(_PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricVIDX_get, _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_FabricVIDX_set)
AslanA_FDsa_WithLBH_WithVIDX_swigregister = _PythonWrapper.AslanA_FDsa_WithLBH_WithVIDX_swigregister
AslanA_FDsa_WithLBH_WithVIDX_swigregister(AslanA_FDsa_WithLBH_WithVIDX)

class FCOE_PDU_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCOE_PDU_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FCOE_PDU_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Ver"] = _PythonWrapper.FCOE_PDU_Header_Ver_set
    __swig_getmethods__["Ver"] = _PythonWrapper.FCOE_PDU_Header_Ver_get
    if _newclass:
        Ver = _swig_property(_PythonWrapper.FCOE_PDU_Header_Ver_get, _PythonWrapper.FCOE_PDU_Header_Ver_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.FCOE_PDU_Header_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.FCOE_PDU_Header_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.FCOE_PDU_Header_Reserved1_get, _PythonWrapper.FCOE_PDU_Header_Reserved1_set)
    __swig_setmethods__["Reserved2"] = _PythonWrapper.FCOE_PDU_Header_Reserved2_set
    __swig_getmethods__["Reserved2"] = _PythonWrapper.FCOE_PDU_Header_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_PythonWrapper.FCOE_PDU_Header_Reserved2_get, _PythonWrapper.FCOE_PDU_Header_Reserved2_set)
    __swig_setmethods__["Reserved3"] = _PythonWrapper.FCOE_PDU_Header_Reserved3_set
    __swig_getmethods__["Reserved3"] = _PythonWrapper.FCOE_PDU_Header_Reserved3_get
    if _newclass:
        Reserved3 = _swig_property(_PythonWrapper.FCOE_PDU_Header_Reserved3_get, _PythonWrapper.FCOE_PDU_Header_Reserved3_set)
    __swig_setmethods__["Reserved4"] = _PythonWrapper.FCOE_PDU_Header_Reserved4_set
    __swig_getmethods__["Reserved4"] = _PythonWrapper.FCOE_PDU_Header_Reserved4_get
    if _newclass:
        Reserved4 = _swig_property(_PythonWrapper.FCOE_PDU_Header_Reserved4_get, _PythonWrapper.FCOE_PDU_Header_Reserved4_set)
    __swig_setmethods__["SOF"] = _PythonWrapper.FCOE_PDU_Header_SOF_set
    __swig_getmethods__["SOF"] = _PythonWrapper.FCOE_PDU_Header_SOF_get
    if _newclass:
        SOF = _swig_property(_PythonWrapper.FCOE_PDU_Header_SOF_get, _PythonWrapper.FCOE_PDU_Header_SOF_set)
    __swig_setmethods__["R_CTL"] = _PythonWrapper.FCOE_PDU_Header_R_CTL_set
    __swig_getmethods__["R_CTL"] = _PythonWrapper.FCOE_PDU_Header_R_CTL_get
    if _newclass:
        R_CTL = _swig_property(_PythonWrapper.FCOE_PDU_Header_R_CTL_get, _PythonWrapper.FCOE_PDU_Header_R_CTL_set)
    __swig_setmethods__["D_ID"] = _PythonWrapper.FCOE_PDU_Header_D_ID_set
    __swig_getmethods__["D_ID"] = _PythonWrapper.FCOE_PDU_Header_D_ID_get
    if _newclass:
        D_ID = _swig_property(_PythonWrapper.FCOE_PDU_Header_D_ID_get, _PythonWrapper.FCOE_PDU_Header_D_ID_set)
    __swig_setmethods__["CS_CTL__Prioprity"] = _PythonWrapper.FCOE_PDU_Header_CS_CTL__Prioprity_set
    __swig_getmethods__["CS_CTL__Prioprity"] = _PythonWrapper.FCOE_PDU_Header_CS_CTL__Prioprity_get
    if _newclass:
        CS_CTL__Prioprity = _swig_property(_PythonWrapper.FCOE_PDU_Header_CS_CTL__Prioprity_get, _PythonWrapper.FCOE_PDU_Header_CS_CTL__Prioprity_set)
    __swig_setmethods__["S_ID"] = _PythonWrapper.FCOE_PDU_Header_S_ID_set
    __swig_getmethods__["S_ID"] = _PythonWrapper.FCOE_PDU_Header_S_ID_get
    if _newclass:
        S_ID = _swig_property(_PythonWrapper.FCOE_PDU_Header_S_ID_get, _PythonWrapper.FCOE_PDU_Header_S_ID_set)
    __swig_setmethods__["Type"] = _PythonWrapper.FCOE_PDU_Header_Type_set
    __swig_getmethods__["Type"] = _PythonWrapper.FCOE_PDU_Header_Type_get
    if _newclass:
        Type = _swig_property(_PythonWrapper.FCOE_PDU_Header_Type_get, _PythonWrapper.FCOE_PDU_Header_Type_set)
    __swig_setmethods__["F_CTL"] = _PythonWrapper.FCOE_PDU_Header_F_CTL_set
    __swig_getmethods__["F_CTL"] = _PythonWrapper.FCOE_PDU_Header_F_CTL_get
    if _newclass:
        F_CTL = _swig_property(_PythonWrapper.FCOE_PDU_Header_F_CTL_get, _PythonWrapper.FCOE_PDU_Header_F_CTL_set)
    __swig_setmethods__["Seq_ID"] = _PythonWrapper.FCOE_PDU_Header_Seq_ID_set
    __swig_getmethods__["Seq_ID"] = _PythonWrapper.FCOE_PDU_Header_Seq_ID_get
    if _newclass:
        Seq_ID = _swig_property(_PythonWrapper.FCOE_PDU_Header_Seq_ID_get, _PythonWrapper.FCOE_PDU_Header_Seq_ID_set)
    __swig_setmethods__["DF_CTL"] = _PythonWrapper.FCOE_PDU_Header_DF_CTL_set
    __swig_getmethods__["DF_CTL"] = _PythonWrapper.FCOE_PDU_Header_DF_CTL_get
    if _newclass:
        DF_CTL = _swig_property(_PythonWrapper.FCOE_PDU_Header_DF_CTL_get, _PythonWrapper.FCOE_PDU_Header_DF_CTL_set)
    __swig_setmethods__["Seq_Cnt"] = _PythonWrapper.FCOE_PDU_Header_Seq_Cnt_set
    __swig_getmethods__["Seq_Cnt"] = _PythonWrapper.FCOE_PDU_Header_Seq_Cnt_get
    if _newclass:
        Seq_Cnt = _swig_property(_PythonWrapper.FCOE_PDU_Header_Seq_Cnt_get, _PythonWrapper.FCOE_PDU_Header_Seq_Cnt_set)
    __swig_setmethods__["OX_ID"] = _PythonWrapper.FCOE_PDU_Header_OX_ID_set
    __swig_getmethods__["OX_ID"] = _PythonWrapper.FCOE_PDU_Header_OX_ID_get
    if _newclass:
        OX_ID = _swig_property(_PythonWrapper.FCOE_PDU_Header_OX_ID_get, _PythonWrapper.FCOE_PDU_Header_OX_ID_set)
    __swig_setmethods__["RX_ID"] = _PythonWrapper.FCOE_PDU_Header_RX_ID_set
    __swig_getmethods__["RX_ID"] = _PythonWrapper.FCOE_PDU_Header_RX_ID_get
    if _newclass:
        RX_ID = _swig_property(_PythonWrapper.FCOE_PDU_Header_RX_ID_get, _PythonWrapper.FCOE_PDU_Header_RX_ID_set)
    __swig_setmethods__["Parameter"] = _PythonWrapper.FCOE_PDU_Header_Parameter_set
    __swig_getmethods__["Parameter"] = _PythonWrapper.FCOE_PDU_Header_Parameter_get
    if _newclass:
        Parameter = _swig_property(_PythonWrapper.FCOE_PDU_Header_Parameter_get, _PythonWrapper.FCOE_PDU_Header_Parameter_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_FCOE_PDU_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.FCOE_PDU_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_FCOE_PDU_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.FCOE_PDU_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.FCOE_PDU_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.FCOE_PDU_Header_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.FCOE_PDU_Header_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.FCOE_PDU_Header_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.FCOE_PDU_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.FCOE_PDU_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.FCOE_PDU_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.FCOE_PDU_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.FCOE_PDU_Header_GetElementToolTip(self)
FCOE_PDU_Header_swigregister = _PythonWrapper.FCOE_PDU_Header_swigregister
FCOE_PDU_Header_swigregister(FCOE_PDU_Header)

class FCOE_PDU_Tail(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCOE_PDU_Tail, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FCOE_PDU_Tail, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FC_CRC"] = _PythonWrapper.FCOE_PDU_Tail_FC_CRC_set
    __swig_getmethods__["FC_CRC"] = _PythonWrapper.FCOE_PDU_Tail_FC_CRC_get
    if _newclass:
        FC_CRC = _swig_property(_PythonWrapper.FCOE_PDU_Tail_FC_CRC_get, _PythonWrapper.FCOE_PDU_Tail_FC_CRC_set)
    __swig_setmethods__["FC_EOF"] = _PythonWrapper.FCOE_PDU_Tail_FC_EOF_set
    __swig_getmethods__["FC_EOF"] = _PythonWrapper.FCOE_PDU_Tail_FC_EOF_get
    if _newclass:
        FC_EOF = _swig_property(_PythonWrapper.FCOE_PDU_Tail_FC_EOF_get, _PythonWrapper.FCOE_PDU_Tail_FC_EOF_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_FCOE_PDU_Tail(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.FCOE_PDU_Tail_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_FCOE_PDU_Tail
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.FCOE_PDU_Tail_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.FCOE_PDU_Tail_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.FCOE_PDU_Tail_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.FCOE_PDU_Tail_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.FCOE_PDU_Tail_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.FCOE_PDU_Tail_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.FCOE_PDU_Tail_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.FCOE_PDU_Tail_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.FCOE_PDU_Tail_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.FCOE_PDU_Tail_GetElementToolTip(self)
FCOE_PDU_Tail_swigregister = _PythonWrapper.FCOE_PDU_Tail_swigregister
FCOE_PDU_Tail_swigregister(FCOE_PDU_Tail)

class FCOE_FIP_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCOE_FIP_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FCOE_FIP_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Ver"] = _PythonWrapper.FCOE_FIP_Header_Ver_set
    __swig_getmethods__["Ver"] = _PythonWrapper.FCOE_FIP_Header_Ver_get
    if _newclass:
        Ver = _swig_property(_PythonWrapper.FCOE_FIP_Header_Ver_get, _PythonWrapper.FCOE_FIP_Header_Ver_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.FCOE_FIP_Header_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.FCOE_FIP_Header_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.FCOE_FIP_Header_Reserved1_get, _PythonWrapper.FCOE_FIP_Header_Reserved1_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_FCOE_FIP_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.FCOE_FIP_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_FCOE_FIP_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.FCOE_FIP_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.FCOE_FIP_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.FCOE_FIP_Header_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.FCOE_FIP_Header_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.FCOE_FIP_Header_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.FCOE_FIP_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.FCOE_FIP_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.FCOE_FIP_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.FCOE_FIP_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.FCOE_FIP_Header_GetElementToolTip(self)
FCOE_FIP_Header_swigregister = _PythonWrapper.FCOE_FIP_Header_swigregister
FCOE_FIP_Header_swigregister(FCOE_FIP_Header)

class GREHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GREHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GREHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ChecksumPresent"] = _PythonWrapper.GREHeader_ChecksumPresent_set
    __swig_getmethods__["ChecksumPresent"] = _PythonWrapper.GREHeader_ChecksumPresent_get
    if _newclass:
        ChecksumPresent = _swig_property(_PythonWrapper.GREHeader_ChecksumPresent_get, _PythonWrapper.GREHeader_ChecksumPresent_set)
    __swig_setmethods__["Reserved0"] = _PythonWrapper.GREHeader_Reserved0_set
    __swig_getmethods__["Reserved0"] = _PythonWrapper.GREHeader_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_PythonWrapper.GREHeader_Reserved0_get, _PythonWrapper.GREHeader_Reserved0_set)
    __swig_setmethods__["Version"] = _PythonWrapper.GREHeader_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.GREHeader_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.GREHeader_Version_get, _PythonWrapper.GREHeader_Version_set)
    __swig_setmethods__["Protocol"] = _PythonWrapper.GREHeader_Protocol_set
    __swig_getmethods__["Protocol"] = _PythonWrapper.GREHeader_Protocol_get
    if _newclass:
        Protocol = _swig_property(_PythonWrapper.GREHeader_Protocol_get, _PythonWrapper.GREHeader_Protocol_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_GREHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.GREHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_GREHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.GREHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.GREHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.GREHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.GREHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.GREHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.GREHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.GREHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.GREHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.GREHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.GREHeader_GetElementToolTip(self)
GREHeader_swigregister = _PythonWrapper.GREHeader_swigregister
GREHeader_swigregister(GREHeader)

class GREChecksumHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GREChecksumHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GREChecksumHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ChecksumPresent"] = _PythonWrapper.GREChecksumHeader_ChecksumPresent_set
    __swig_getmethods__["ChecksumPresent"] = _PythonWrapper.GREChecksumHeader_ChecksumPresent_get
    if _newclass:
        ChecksumPresent = _swig_property(_PythonWrapper.GREChecksumHeader_ChecksumPresent_get, _PythonWrapper.GREChecksumHeader_ChecksumPresent_set)
    __swig_setmethods__["Reserved0"] = _PythonWrapper.GREChecksumHeader_Reserved0_set
    __swig_getmethods__["Reserved0"] = _PythonWrapper.GREChecksumHeader_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_PythonWrapper.GREChecksumHeader_Reserved0_get, _PythonWrapper.GREChecksumHeader_Reserved0_set)
    __swig_setmethods__["Version"] = _PythonWrapper.GREChecksumHeader_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.GREChecksumHeader_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.GREChecksumHeader_Version_get, _PythonWrapper.GREChecksumHeader_Version_set)
    __swig_setmethods__["Protocol"] = _PythonWrapper.GREChecksumHeader_Protocol_set
    __swig_getmethods__["Protocol"] = _PythonWrapper.GREChecksumHeader_Protocol_get
    if _newclass:
        Protocol = _swig_property(_PythonWrapper.GREChecksumHeader_Protocol_get, _PythonWrapper.GREChecksumHeader_Protocol_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.GREChecksumHeader_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.GREChecksumHeader_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.GREChecksumHeader_Checksum_get, _PythonWrapper.GREChecksumHeader_Checksum_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.GREChecksumHeader_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.GREChecksumHeader_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.GREChecksumHeader_Reserved1_get, _PythonWrapper.GREChecksumHeader_Reserved1_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_GREChecksumHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.GREChecksumHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_GREChecksumHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.GREChecksumHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.GREChecksumHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.GREChecksumHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.GREChecksumHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.GREChecksumHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.GREChecksumHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.GREChecksumHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.GREChecksumHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.GREChecksumHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.GREChecksumHeader_GetElementToolTip(self)
GREChecksumHeader_swigregister = _PythonWrapper.GREChecksumHeader_swigregister
GREChecksumHeader_swigregister(GREChecksumHeader)

class MACAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MACAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MACAddress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["da"] = _PythonWrapper.MACAddress_da_set
    __swig_getmethods__["da"] = _PythonWrapper.MACAddress_da_get
    if _newclass:
        da = _swig_property(_PythonWrapper.MACAddress_da_get, _PythonWrapper.MACAddress_da_set)
    __swig_setmethods__["sa"] = _PythonWrapper.MACAddress_sa_set
    __swig_getmethods__["sa"] = _PythonWrapper.MACAddress_sa_get
    if _newclass:
        sa = _swig_property(_PythonWrapper.MACAddress_sa_get, _PythonWrapper.MACAddress_sa_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_MACAddress(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.MACAddress_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_MACAddress
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.MACAddress_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.MACAddress_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.MACAddress_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.MACAddress_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.MACAddress_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.MACAddress_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.MACAddress_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.MACAddress_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.MACAddress_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.MACAddress_GetElementToolTip(self)
MACAddress_swigregister = _PythonWrapper.MACAddress_swigregister
MACAddress_swigregister(MACAddress)

class ICMPv4Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPv4Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPv4Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _PythonWrapper.ICMPv4Header_Type_set
    __swig_getmethods__["Type"] = _PythonWrapper.ICMPv4Header_Type_get
    if _newclass:
        Type = _swig_property(_PythonWrapper.ICMPv4Header_Type_get, _PythonWrapper.ICMPv4Header_Type_set)
    __swig_setmethods__["Code"] = _PythonWrapper.ICMPv4Header_Code_set
    __swig_getmethods__["Code"] = _PythonWrapper.ICMPv4Header_Code_get
    if _newclass:
        Code = _swig_property(_PythonWrapper.ICMPv4Header_Code_get, _PythonWrapper.ICMPv4Header_Code_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.ICMPv4Header_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.ICMPv4Header_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.ICMPv4Header_Checksum_get, _PythonWrapper.ICMPv4Header_Checksum_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_ICMPv4Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.ICMPv4Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_ICMPv4Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.ICMPv4Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.ICMPv4Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.ICMPv4Header_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.ICMPv4Header_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.ICMPv4Header_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.ICMPv4Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.ICMPv4Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.ICMPv4Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.ICMPv4Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.ICMPv4Header_GetElementToolTip(self)
ICMPv4Header_swigregister = _PythonWrapper.ICMPv4Header_swigregister
ICMPv4Header_swigregister(ICMPv4Header)

class ICMPv6Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMPv6Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICMPv6Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _PythonWrapper.ICMPv6Header_Type_set
    __swig_getmethods__["Type"] = _PythonWrapper.ICMPv6Header_Type_get
    if _newclass:
        Type = _swig_property(_PythonWrapper.ICMPv6Header_Type_get, _PythonWrapper.ICMPv6Header_Type_set)
    __swig_setmethods__["Code"] = _PythonWrapper.ICMPv6Header_Code_set
    __swig_getmethods__["Code"] = _PythonWrapper.ICMPv6Header_Code_get
    if _newclass:
        Code = _swig_property(_PythonWrapper.ICMPv6Header_Code_get, _PythonWrapper.ICMPv6Header_Code_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.ICMPv6Header_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.ICMPv6Header_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.ICMPv6Header_Checksum_get, _PythonWrapper.ICMPv6Header_Checksum_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_ICMPv6Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.ICMPv6Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_ICMPv6Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.ICMPv6Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.ICMPv6Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.ICMPv6Header_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.ICMPv6Header_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.ICMPv6Header_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.ICMPv6Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.ICMPv6Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.ICMPv6Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.ICMPv6Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.ICMPv6Header_GetElementToolTip(self)
ICMPv6Header_swigregister = _PythonWrapper.ICMPv6Header_swigregister
ICMPv6Header_swigregister(ICMPv6Header)

class IGMPPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Version"] = _PythonWrapper.IGMPPacket_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.IGMPPacket_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.IGMPPacket_Version_get, _PythonWrapper.IGMPPacket_Version_set)
    __swig_setmethods__["Type"] = _PythonWrapper.IGMPPacket_Type_set
    __swig_getmethods__["Type"] = _PythonWrapper.IGMPPacket_Type_get
    if _newclass:
        Type = _swig_property(_PythonWrapper.IGMPPacket_Type_get, _PythonWrapper.IGMPPacket_Type_set)
    __swig_setmethods__["Unused"] = _PythonWrapper.IGMPPacket_Unused_set
    __swig_getmethods__["Unused"] = _PythonWrapper.IGMPPacket_Unused_get
    if _newclass:
        Unused = _swig_property(_PythonWrapper.IGMPPacket_Unused_get, _PythonWrapper.IGMPPacket_Unused_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.IGMPPacket_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.IGMPPacket_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.IGMPPacket_Checksum_get, _PythonWrapper.IGMPPacket_Checksum_set)
    __swig_setmethods__["GroupAddress"] = _PythonWrapper.IGMPPacket_GroupAddress_set
    __swig_getmethods__["GroupAddress"] = _PythonWrapper.IGMPPacket_GroupAddress_get
    if _newclass:
        GroupAddress = _swig_property(_PythonWrapper.IGMPPacket_GroupAddress_get, _PythonWrapper.IGMPPacket_GroupAddress_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IGMPPacket(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.IGMPPacket_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_IGMPPacket
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.IGMPPacket_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.IGMPPacket_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.IGMPPacket_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.IGMPPacket_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.IGMPPacket_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.IGMPPacket_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.IGMPPacket_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.IGMPPacket_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.IGMPPacket_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.IGMPPacket_GetElementToolTip(self)
IGMPPacket_swigregister = _PythonWrapper.IGMPPacket_swigregister
IGMPPacket_swigregister(IGMPPacket)

class IGMPv2Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPv2Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPv2Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _PythonWrapper.IGMPv2Header_Type_set
    __swig_getmethods__["Type"] = _PythonWrapper.IGMPv2Header_Type_get
    if _newclass:
        Type = _swig_property(_PythonWrapper.IGMPv2Header_Type_get, _PythonWrapper.IGMPv2Header_Type_set)
    __swig_setmethods__["MaxRespTime"] = _PythonWrapper.IGMPv2Header_MaxRespTime_set
    __swig_getmethods__["MaxRespTime"] = _PythonWrapper.IGMPv2Header_MaxRespTime_get
    if _newclass:
        MaxRespTime = _swig_property(_PythonWrapper.IGMPv2Header_MaxRespTime_get, _PythonWrapper.IGMPv2Header_MaxRespTime_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.IGMPv2Header_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.IGMPv2Header_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.IGMPv2Header_Checksum_get, _PythonWrapper.IGMPv2Header_Checksum_set)
    __swig_setmethods__["GroupAddress"] = _PythonWrapper.IGMPv2Header_GroupAddress_set
    __swig_getmethods__["GroupAddress"] = _PythonWrapper.IGMPv2Header_GroupAddress_get
    if _newclass:
        GroupAddress = _swig_property(_PythonWrapper.IGMPv2Header_GroupAddress_get, _PythonWrapper.IGMPv2Header_GroupAddress_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IGMPv2Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.IGMPv2Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_IGMPv2Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.IGMPv2Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.IGMPv2Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.IGMPv2Header_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.IGMPv2Header_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.IGMPv2Header_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.IGMPv2Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.IGMPv2Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.IGMPv2Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.IGMPv2Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.IGMPv2Header_GetElementToolTip(self)
IGMPv2Header_swigregister = _PythonWrapper.IGMPv2Header_swigregister
IGMPv2Header_swigregister(IGMPv2Header)

class IGMPv3Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMPv3Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMPv3Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _PythonWrapper.IGMPv3Header_Type_set
    __swig_getmethods__["Type"] = _PythonWrapper.IGMPv3Header_Type_get
    if _newclass:
        Type = _swig_property(_PythonWrapper.IGMPv3Header_Type_get, _PythonWrapper.IGMPv3Header_Type_set)
    __swig_setmethods__["MaxRespCode"] = _PythonWrapper.IGMPv3Header_MaxRespCode_set
    __swig_getmethods__["MaxRespCode"] = _PythonWrapper.IGMPv3Header_MaxRespCode_get
    if _newclass:
        MaxRespCode = _swig_property(_PythonWrapper.IGMPv3Header_MaxRespCode_get, _PythonWrapper.IGMPv3Header_MaxRespCode_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.IGMPv3Header_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.IGMPv3Header_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.IGMPv3Header_Checksum_get, _PythonWrapper.IGMPv3Header_Checksum_set)
    __swig_setmethods__["GroupAddress"] = _PythonWrapper.IGMPv3Header_GroupAddress_set
    __swig_getmethods__["GroupAddress"] = _PythonWrapper.IGMPv3Header_GroupAddress_get
    if _newclass:
        GroupAddress = _swig_property(_PythonWrapper.IGMPv3Header_GroupAddress_get, _PythonWrapper.IGMPv3Header_GroupAddress_set)
    __swig_setmethods__["Reserved"] = _PythonWrapper.IGMPv3Header_Reserved_set
    __swig_getmethods__["Reserved"] = _PythonWrapper.IGMPv3Header_Reserved_get
    if _newclass:
        Reserved = _swig_property(_PythonWrapper.IGMPv3Header_Reserved_get, _PythonWrapper.IGMPv3Header_Reserved_set)
    __swig_setmethods__["S"] = _PythonWrapper.IGMPv3Header_S_set
    __swig_getmethods__["S"] = _PythonWrapper.IGMPv3Header_S_get
    if _newclass:
        S = _swig_property(_PythonWrapper.IGMPv3Header_S_get, _PythonWrapper.IGMPv3Header_S_set)
    __swig_setmethods__["QRV"] = _PythonWrapper.IGMPv3Header_QRV_set
    __swig_getmethods__["QRV"] = _PythonWrapper.IGMPv3Header_QRV_get
    if _newclass:
        QRV = _swig_property(_PythonWrapper.IGMPv3Header_QRV_get, _PythonWrapper.IGMPv3Header_QRV_set)
    __swig_setmethods__["QQIC"] = _PythonWrapper.IGMPv3Header_QQIC_set
    __swig_getmethods__["QQIC"] = _PythonWrapper.IGMPv3Header_QQIC_get
    if _newclass:
        QQIC = _swig_property(_PythonWrapper.IGMPv3Header_QQIC_get, _PythonWrapper.IGMPv3Header_QQIC_set)
    __swig_setmethods__["NumOfSources"] = _PythonWrapper.IGMPv3Header_NumOfSources_set
    __swig_getmethods__["NumOfSources"] = _PythonWrapper.IGMPv3Header_NumOfSources_get
    if _newclass:
        NumOfSources = _swig_property(_PythonWrapper.IGMPv3Header_NumOfSources_get, _PythonWrapper.IGMPv3Header_NumOfSources_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IGMPv3Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.IGMPv3Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_IGMPv3Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.IGMPv3Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.IGMPv3Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.IGMPv3Header_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.IGMPv3Header_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.IGMPv3Header_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.IGMPv3Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.IGMPv3Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.IGMPv3Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.IGMPv3Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.IGMPv3Header_GetElementToolTip(self)
IGMPv3Header_swigregister = _PythonWrapper.IGMPv3Header_swigregister
IGMPv3Header_swigregister(IGMPv3Header)

class IPAddressData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPAddressData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPAddressData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IP"] = _PythonWrapper.IPAddressData_IP_set
    __swig_getmethods__["IP"] = _PythonWrapper.IPAddressData_IP_get
    if _newclass:
        IP = _swig_property(_PythonWrapper.IPAddressData_IP_get, _PythonWrapper.IPAddressData_IP_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPAddressData(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.IPAddressData_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_IPAddressData
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.IPAddressData_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.IPAddressData_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.IPAddressData_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.IPAddressData_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.IPAddressData_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.IPAddressData_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.IPAddressData_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.IPAddressData_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.IPAddressData_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.IPAddressData_GetElementToolTip(self)
IPAddressData_swigregister = _PythonWrapper.IPAddressData_swigregister
IPAddressData_swigregister(IPAddressData)

class IPv4Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Version"] = _PythonWrapper.IPv4Header_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.IPv4Header_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.IPv4Header_Version_get, _PythonWrapper.IPv4Header_Version_set)
    __swig_setmethods__["HeaderLength"] = _PythonWrapper.IPv4Header_HeaderLength_set
    __swig_getmethods__["HeaderLength"] = _PythonWrapper.IPv4Header_HeaderLength_get
    if _newclass:
        HeaderLength = _swig_property(_PythonWrapper.IPv4Header_HeaderLength_get, _PythonWrapper.IPv4Header_HeaderLength_set)
    __swig_setmethods__["Dscp"] = _PythonWrapper.IPv4Header_Dscp_set
    __swig_getmethods__["Dscp"] = _PythonWrapper.IPv4Header_Dscp_get
    if _newclass:
        Dscp = _swig_property(_PythonWrapper.IPv4Header_Dscp_get, _PythonWrapper.IPv4Header_Dscp_set)
    __swig_setmethods__["DiffServFlowControl"] = _PythonWrapper.IPv4Header_DiffServFlowControl_set
    __swig_getmethods__["DiffServFlowControl"] = _PythonWrapper.IPv4Header_DiffServFlowControl_get
    if _newclass:
        DiffServFlowControl = _swig_property(_PythonWrapper.IPv4Header_DiffServFlowControl_get, _PythonWrapper.IPv4Header_DiffServFlowControl_set)
    __swig_setmethods__["TotalLength"] = _PythonWrapper.IPv4Header_TotalLength_set
    __swig_getmethods__["TotalLength"] = _PythonWrapper.IPv4Header_TotalLength_get
    if _newclass:
        TotalLength = _swig_property(_PythonWrapper.IPv4Header_TotalLength_get, _PythonWrapper.IPv4Header_TotalLength_set)
    __swig_setmethods__["Identification"] = _PythonWrapper.IPv4Header_Identification_set
    __swig_getmethods__["Identification"] = _PythonWrapper.IPv4Header_Identification_get
    if _newclass:
        Identification = _swig_property(_PythonWrapper.IPv4Header_Identification_get, _PythonWrapper.IPv4Header_Identification_set)
    __swig_setmethods__["ReservedBit"] = _PythonWrapper.IPv4Header_ReservedBit_set
    __swig_getmethods__["ReservedBit"] = _PythonWrapper.IPv4Header_ReservedBit_get
    if _newclass:
        ReservedBit = _swig_property(_PythonWrapper.IPv4Header_ReservedBit_get, _PythonWrapper.IPv4Header_ReservedBit_set)
    __swig_setmethods__["DontFragmentBit"] = _PythonWrapper.IPv4Header_DontFragmentBit_set
    __swig_getmethods__["DontFragmentBit"] = _PythonWrapper.IPv4Header_DontFragmentBit_get
    if _newclass:
        DontFragmentBit = _swig_property(_PythonWrapper.IPv4Header_DontFragmentBit_get, _PythonWrapper.IPv4Header_DontFragmentBit_set)
    __swig_setmethods__["MoreFragmentsBit"] = _PythonWrapper.IPv4Header_MoreFragmentsBit_set
    __swig_getmethods__["MoreFragmentsBit"] = _PythonWrapper.IPv4Header_MoreFragmentsBit_get
    if _newclass:
        MoreFragmentsBit = _swig_property(_PythonWrapper.IPv4Header_MoreFragmentsBit_get, _PythonWrapper.IPv4Header_MoreFragmentsBit_set)
    __swig_setmethods__["FragmentOffset"] = _PythonWrapper.IPv4Header_FragmentOffset_set
    __swig_getmethods__["FragmentOffset"] = _PythonWrapper.IPv4Header_FragmentOffset_get
    if _newclass:
        FragmentOffset = _swig_property(_PythonWrapper.IPv4Header_FragmentOffset_get, _PythonWrapper.IPv4Header_FragmentOffset_set)
    __swig_setmethods__["TimeToLive"] = _PythonWrapper.IPv4Header_TimeToLive_set
    __swig_getmethods__["TimeToLive"] = _PythonWrapper.IPv4Header_TimeToLive_get
    if _newclass:
        TimeToLive = _swig_property(_PythonWrapper.IPv4Header_TimeToLive_get, _PythonWrapper.IPv4Header_TimeToLive_set)
    __swig_setmethods__["Protocol"] = _PythonWrapper.IPv4Header_Protocol_set
    __swig_getmethods__["Protocol"] = _PythonWrapper.IPv4Header_Protocol_get
    if _newclass:
        Protocol = _swig_property(_PythonWrapper.IPv4Header_Protocol_get, _PythonWrapper.IPv4Header_Protocol_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.IPv4Header_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.IPv4Header_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.IPv4Header_Checksum_get, _PythonWrapper.IPv4Header_Checksum_set)
    __swig_setmethods__["sourceIP"] = _PythonWrapper.IPv4Header_sourceIP_set
    __swig_getmethods__["sourceIP"] = _PythonWrapper.IPv4Header_sourceIP_get
    if _newclass:
        sourceIP = _swig_property(_PythonWrapper.IPv4Header_sourceIP_get, _PythonWrapper.IPv4Header_sourceIP_set)
    __swig_setmethods__["destinationIP"] = _PythonWrapper.IPv4Header_destinationIP_set
    __swig_getmethods__["destinationIP"] = _PythonWrapper.IPv4Header_destinationIP_get
    if _newclass:
        destinationIP = _swig_property(_PythonWrapper.IPv4Header_destinationIP_get, _PythonWrapper.IPv4Header_destinationIP_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.IPv4Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_IPv4Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.IPv4Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.IPv4Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.IPv4Header_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.IPv4Header_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.IPv4Header_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.IPv4Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.IPv4Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.IPv4Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.IPv4Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.IPv4Header_GetElementToolTip(self)

    def RunAlgorithm(self, iAlgoId, additionalValue):
        return _PythonWrapper.IPv4Header_RunAlgorithm(self, iAlgoId, additionalValue)
IPv4Header_swigregister = _PythonWrapper.IPv4Header_swigregister
IPv4Header_swigregister(IPv4Header)

class IPv4OptionsData(CustomElement):
    __swig_setmethods__ = {}
    for _s in [CustomElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4OptionsData, name, value)
    __swig_getmethods__ = {}
    for _s in [CustomElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4OptionsData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4OptionsData(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.IPv4OptionsData_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_IPv4OptionsData
    __del__ = lambda self: None

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.IPv4OptionsData_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.IPv4OptionsData_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.IPv4OptionsData_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.IPv4OptionsData_ToString(self)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.IPv4OptionsData_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.IPv4OptionsData_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.IPv4OptionsData_GetElementFieldsData(self, values)

    def GetElementToolTip(self):
        return _PythonWrapper.IPv4OptionsData_GetElementToolTip(self)

    def GetElementSize(self):
        return _PythonWrapper.IPv4OptionsData_GetElementSize(self)

    def SetPattern(self, *args):
        return _PythonWrapper.IPv4OptionsData_SetPattern(self, *args)
IPv4OptionsData_swigregister = _PythonWrapper.IPv4OptionsData_swigregister
IPv4OptionsData_swigregister(IPv4OptionsData)

class IPv6Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _PythonWrapper.IPv6Header_version_set
    __swig_getmethods__["version"] = _PythonWrapper.IPv6Header_version_get
    if _newclass:
        version = _swig_property(_PythonWrapper.IPv6Header_version_get, _PythonWrapper.IPv6Header_version_set)
    __swig_setmethods__["trafficClass"] = _PythonWrapper.IPv6Header_trafficClass_set
    __swig_getmethods__["trafficClass"] = _PythonWrapper.IPv6Header_trafficClass_get
    if _newclass:
        trafficClass = _swig_property(_PythonWrapper.IPv6Header_trafficClass_get, _PythonWrapper.IPv6Header_trafficClass_set)
    __swig_setmethods__["flowLabel"] = _PythonWrapper.IPv6Header_flowLabel_set
    __swig_getmethods__["flowLabel"] = _PythonWrapper.IPv6Header_flowLabel_get
    if _newclass:
        flowLabel = _swig_property(_PythonWrapper.IPv6Header_flowLabel_get, _PythonWrapper.IPv6Header_flowLabel_set)
    __swig_setmethods__["payloadLength"] = _PythonWrapper.IPv6Header_payloadLength_set
    __swig_getmethods__["payloadLength"] = _PythonWrapper.IPv6Header_payloadLength_get
    if _newclass:
        payloadLength = _swig_property(_PythonWrapper.IPv6Header_payloadLength_get, _PythonWrapper.IPv6Header_payloadLength_set)
    __swig_setmethods__["nextHeader"] = _PythonWrapper.IPv6Header_nextHeader_set
    __swig_getmethods__["nextHeader"] = _PythonWrapper.IPv6Header_nextHeader_get
    if _newclass:
        nextHeader = _swig_property(_PythonWrapper.IPv6Header_nextHeader_get, _PythonWrapper.IPv6Header_nextHeader_set)
    __swig_setmethods__["hopLimit"] = _PythonWrapper.IPv6Header_hopLimit_set
    __swig_getmethods__["hopLimit"] = _PythonWrapper.IPv6Header_hopLimit_get
    if _newclass:
        hopLimit = _swig_property(_PythonWrapper.IPv6Header_hopLimit_get, _PythonWrapper.IPv6Header_hopLimit_set)
    __swig_setmethods__["sourceIP"] = _PythonWrapper.IPv6Header_sourceIP_set
    __swig_getmethods__["sourceIP"] = _PythonWrapper.IPv6Header_sourceIP_get
    if _newclass:
        sourceIP = _swig_property(_PythonWrapper.IPv6Header_sourceIP_get, _PythonWrapper.IPv6Header_sourceIP_set)
    __swig_setmethods__["destinationIP"] = _PythonWrapper.IPv6Header_destinationIP_set
    __swig_getmethods__["destinationIP"] = _PythonWrapper.IPv6Header_destinationIP_get
    if _newclass:
        destinationIP = _swig_property(_PythonWrapper.IPv6Header_destinationIP_get, _PythonWrapper.IPv6Header_destinationIP_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.IPv6Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_IPv6Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.IPv6Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.IPv6Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.IPv6Header_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.IPv6Header_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.IPv6Header_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.IPv6Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.IPv6Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.IPv6Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.IPv6Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.IPv6Header_GetElementToolTip(self)
IPv6Header_swigregister = _PythonWrapper.IPv6Header_swigregister
IPv6Header_swigregister(IPv6Header)

class Layer2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer2, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_Layer2()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Layer2_Clone(self)

    def ToString(self):
        return _PythonWrapper.Layer2_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Layer2_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Layer2_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.Layer2_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.Layer2_GetElementToolTip(self)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Layer2_SetElementFieldsStringData(self, sDataVec)
    __swig_destroy__ = _PythonWrapper.delete_Layer2
    __del__ = lambda self: None
Layer2_swigregister = _PythonWrapper.Layer2_swigregister
Layer2_swigregister(Layer2)

class Layer3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer3, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_Layer3()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Layer3_Clone(self)

    def ToString(self):
        return _PythonWrapper.Layer3_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Layer3_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Layer3_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.Layer3_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.Layer3_GetElementToolTip(self)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Layer3_SetElementFieldsStringData(self, sDataVec)
    __swig_destroy__ = _PythonWrapper.delete_Layer3
    __del__ = lambda self: None
Layer3_swigregister = _PythonWrapper.Layer3_swigregister
Layer3_swigregister(Layer3)

class Layer4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer4, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PythonWrapper.new_Layer4()
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Layer4_Clone(self)

    def ToString(self):
        return _PythonWrapper.Layer4_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Layer4_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Layer4_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.Layer4_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.Layer4_GetElementToolTip(self)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Layer4_SetElementFieldsStringData(self, sDataVec)
    __swig_destroy__ = _PythonWrapper.delete_Layer4
    __del__ = lambda self: None
Layer4_swigregister = _PythonWrapper.Layer4_swigregister
Layer4_swigregister(Layer4)

class Length(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Length, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Length, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _PythonWrapper.Length_length_set
    __swig_getmethods__["length"] = _PythonWrapper.Length_length_get
    if _newclass:
        length = _swig_property(_PythonWrapper.Length_length_get, _PythonWrapper.Length_length_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_Length(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.Length_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_Length
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.Length_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Length_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Length_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.Length_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.Length_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Length_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Length_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Length_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.Length_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.Length_GetElementToolTip(self)
Length_swigregister = _PythonWrapper.Length_swigregister
Length_swigregister(Length)

class LLCHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLCHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LLCHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DSAP"] = _PythonWrapper.LLCHeader_DSAP_set
    __swig_getmethods__["DSAP"] = _PythonWrapper.LLCHeader_DSAP_get
    if _newclass:
        DSAP = _swig_property(_PythonWrapper.LLCHeader_DSAP_get, _PythonWrapper.LLCHeader_DSAP_set)
    __swig_setmethods__["SSAP"] = _PythonWrapper.LLCHeader_SSAP_set
    __swig_getmethods__["SSAP"] = _PythonWrapper.LLCHeader_SSAP_get
    if _newclass:
        SSAP = _swig_property(_PythonWrapper.LLCHeader_SSAP_get, _PythonWrapper.LLCHeader_SSAP_set)
    __swig_setmethods__["cntl"] = _PythonWrapper.LLCHeader_cntl_set
    __swig_getmethods__["cntl"] = _PythonWrapper.LLCHeader_cntl_get
    if _newclass:
        cntl = _swig_property(_PythonWrapper.LLCHeader_cntl_get, _PythonWrapper.LLCHeader_cntl_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_LLCHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.LLCHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_LLCHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.LLCHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.LLCHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.LLCHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.LLCHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.LLCHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.LLCHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.LLCHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.LLCHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.LLCHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.LLCHeader_GetElementToolTip(self)
LLCHeader_swigregister = _PythonWrapper.LLCHeader_swigregister
LLCHeader_swigregister(LLCHeader)

class LLCSNAPHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLCSNAPHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LLCSNAPHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DSAP"] = _PythonWrapper.LLCSNAPHeader_DSAP_set
    __swig_getmethods__["DSAP"] = _PythonWrapper.LLCSNAPHeader_DSAP_get
    if _newclass:
        DSAP = _swig_property(_PythonWrapper.LLCSNAPHeader_DSAP_get, _PythonWrapper.LLCSNAPHeader_DSAP_set)
    __swig_setmethods__["SSAP"] = _PythonWrapper.LLCSNAPHeader_SSAP_set
    __swig_getmethods__["SSAP"] = _PythonWrapper.LLCSNAPHeader_SSAP_get
    if _newclass:
        SSAP = _swig_property(_PythonWrapper.LLCSNAPHeader_SSAP_get, _PythonWrapper.LLCSNAPHeader_SSAP_set)
    __swig_setmethods__["cntl"] = _PythonWrapper.LLCSNAPHeader_cntl_set
    __swig_getmethods__["cntl"] = _PythonWrapper.LLCSNAPHeader_cntl_get
    if _newclass:
        cntl = _swig_property(_PythonWrapper.LLCSNAPHeader_cntl_get, _PythonWrapper.LLCSNAPHeader_cntl_set)
    __swig_setmethods__["OUI"] = _PythonWrapper.LLCSNAPHeader_OUI_set
    __swig_getmethods__["OUI"] = _PythonWrapper.LLCSNAPHeader_OUI_get
    if _newclass:
        OUI = _swig_property(_PythonWrapper.LLCSNAPHeader_OUI_get, _PythonWrapper.LLCSNAPHeader_OUI_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_LLCSNAPHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.LLCSNAPHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_LLCSNAPHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.LLCSNAPHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.LLCSNAPHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.LLCSNAPHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.LLCSNAPHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.LLCSNAPHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.LLCSNAPHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.LLCSNAPHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.LLCSNAPHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.LLCSNAPHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.LLCSNAPHeader_GetElementToolTip(self)
LLCSNAPHeader_swigregister = _PythonWrapper.LLCSNAPHeader_swigregister
LLCSNAPHeader_swigregister(LLCSNAPHeader)

class LLCSNAPHeaderCisco(LLCSNAPHeader):
    __swig_setmethods__ = {}
    for _s in [LLCSNAPHeader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLCSNAPHeaderCisco, name, value)
    __swig_getmethods__ = {}
    for _s in [LLCSNAPHeader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LLCSNAPHeaderCisco, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PID"] = _PythonWrapper.LLCSNAPHeaderCisco_PID_set
    __swig_getmethods__["PID"] = _PythonWrapper.LLCSNAPHeaderCisco_PID_get
    if _newclass:
        PID = _swig_property(_PythonWrapper.LLCSNAPHeaderCisco_PID_get, _PythonWrapper.LLCSNAPHeaderCisco_PID_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_LLCSNAPHeaderCisco(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.LLCSNAPHeaderCisco_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_LLCSNAPHeaderCisco
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.LLCSNAPHeaderCisco_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.LLCSNAPHeaderCisco_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.LLCSNAPHeaderCisco_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.LLCSNAPHeaderCisco_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.LLCSNAPHeaderCisco_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.LLCSNAPHeaderCisco_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.LLCSNAPHeaderCisco_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.LLCSNAPHeaderCisco_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.LLCSNAPHeaderCisco_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.LLCSNAPHeaderCisco_GetElementToolTip(self)
LLCSNAPHeaderCisco_swigregister = _PythonWrapper.LLCSNAPHeaderCisco_swigregister
LLCSNAPHeaderCisco_swigregister(LLCSNAPHeaderCisco)

class MPLS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPLS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPLS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Label"] = _PythonWrapper.MPLS_Label_set
    __swig_getmethods__["Label"] = _PythonWrapper.MPLS_Label_get
    if _newclass:
        Label = _swig_property(_PythonWrapper.MPLS_Label_get, _PythonWrapper.MPLS_Label_set)
    __swig_setmethods__["CoS"] = _PythonWrapper.MPLS_CoS_set
    __swig_getmethods__["CoS"] = _PythonWrapper.MPLS_CoS_get
    if _newclass:
        CoS = _swig_property(_PythonWrapper.MPLS_CoS_get, _PythonWrapper.MPLS_CoS_set)
    __swig_setmethods__["S"] = _PythonWrapper.MPLS_S_set
    __swig_getmethods__["S"] = _PythonWrapper.MPLS_S_get
    if _newclass:
        S = _swig_property(_PythonWrapper.MPLS_S_get, _PythonWrapper.MPLS_S_set)
    __swig_setmethods__["TTL"] = _PythonWrapper.MPLS_TTL_set
    __swig_getmethods__["TTL"] = _PythonWrapper.MPLS_TTL_get
    if _newclass:
        TTL = _swig_property(_PythonWrapper.MPLS_TTL_get, _PythonWrapper.MPLS_TTL_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_MPLS(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.MPLS_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_MPLS
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.MPLS_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.MPLS_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.MPLS_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.MPLS_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.MPLS_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.MPLS_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.MPLS_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.MPLS_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.MPLS_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.MPLS_GetElementToolTip(self)
MPLS_swigregister = _PythonWrapper.MPLS_swigregister
MPLS_swigregister(MPLS)

class MPLSStack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPLSStack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPLSStack, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_MPLSStack(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.MPLSStack_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_MPLSStack
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.MPLSStack_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.MPLSStack_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.MPLSStack_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.MPLSStack_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.MPLSStack_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.MPLSStack_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.MPLSStack_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.MPLSStack_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.MPLSStack_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.MPLSStack_GetElementToolTip(self)
MPLSStack_swigregister = _PythonWrapper.MPLSStack_swigregister
MPLSStack_swigregister(MPLSStack)

class NTPv4Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NTPv4Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NTPv4Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LI"] = _PythonWrapper.NTPv4Header_LI_set
    __swig_getmethods__["LI"] = _PythonWrapper.NTPv4Header_LI_get
    if _newclass:
        LI = _swig_property(_PythonWrapper.NTPv4Header_LI_get, _PythonWrapper.NTPv4Header_LI_set)
    __swig_setmethods__["VN"] = _PythonWrapper.NTPv4Header_VN_set
    __swig_getmethods__["VN"] = _PythonWrapper.NTPv4Header_VN_get
    if _newclass:
        VN = _swig_property(_PythonWrapper.NTPv4Header_VN_get, _PythonWrapper.NTPv4Header_VN_set)
    __swig_setmethods__["Mode"] = _PythonWrapper.NTPv4Header_Mode_set
    __swig_getmethods__["Mode"] = _PythonWrapper.NTPv4Header_Mode_get
    if _newclass:
        Mode = _swig_property(_PythonWrapper.NTPv4Header_Mode_get, _PythonWrapper.NTPv4Header_Mode_set)
    __swig_setmethods__["Stratum"] = _PythonWrapper.NTPv4Header_Stratum_set
    __swig_getmethods__["Stratum"] = _PythonWrapper.NTPv4Header_Stratum_get
    if _newclass:
        Stratum = _swig_property(_PythonWrapper.NTPv4Header_Stratum_get, _PythonWrapper.NTPv4Header_Stratum_set)
    __swig_setmethods__["Poll"] = _PythonWrapper.NTPv4Header_Poll_set
    __swig_getmethods__["Poll"] = _PythonWrapper.NTPv4Header_Poll_get
    if _newclass:
        Poll = _swig_property(_PythonWrapper.NTPv4Header_Poll_get, _PythonWrapper.NTPv4Header_Poll_set)
    __swig_setmethods__["Precision"] = _PythonWrapper.NTPv4Header_Precision_set
    __swig_getmethods__["Precision"] = _PythonWrapper.NTPv4Header_Precision_get
    if _newclass:
        Precision = _swig_property(_PythonWrapper.NTPv4Header_Precision_get, _PythonWrapper.NTPv4Header_Precision_set)
    __swig_setmethods__["RootDelay"] = _PythonWrapper.NTPv4Header_RootDelay_set
    __swig_getmethods__["RootDelay"] = _PythonWrapper.NTPv4Header_RootDelay_get
    if _newclass:
        RootDelay = _swig_property(_PythonWrapper.NTPv4Header_RootDelay_get, _PythonWrapper.NTPv4Header_RootDelay_set)
    __swig_setmethods__["RootDispersion"] = _PythonWrapper.NTPv4Header_RootDispersion_set
    __swig_getmethods__["RootDispersion"] = _PythonWrapper.NTPv4Header_RootDispersion_get
    if _newclass:
        RootDispersion = _swig_property(_PythonWrapper.NTPv4Header_RootDispersion_get, _PythonWrapper.NTPv4Header_RootDispersion_set)
    __swig_setmethods__["ReferenceID"] = _PythonWrapper.NTPv4Header_ReferenceID_set
    __swig_getmethods__["ReferenceID"] = _PythonWrapper.NTPv4Header_ReferenceID_get
    if _newclass:
        ReferenceID = _swig_property(_PythonWrapper.NTPv4Header_ReferenceID_get, _PythonWrapper.NTPv4Header_ReferenceID_set)
    __swig_setmethods__["ReferenceTimestamp_Sec"] = _PythonWrapper.NTPv4Header_ReferenceTimestamp_Sec_set
    __swig_getmethods__["ReferenceTimestamp_Sec"] = _PythonWrapper.NTPv4Header_ReferenceTimestamp_Sec_get
    if _newclass:
        ReferenceTimestamp_Sec = _swig_property(_PythonWrapper.NTPv4Header_ReferenceTimestamp_Sec_get, _PythonWrapper.NTPv4Header_ReferenceTimestamp_Sec_set)
    __swig_setmethods__["ReferenceTimestamp_FracSec"] = _PythonWrapper.NTPv4Header_ReferenceTimestamp_FracSec_set
    __swig_getmethods__["ReferenceTimestamp_FracSec"] = _PythonWrapper.NTPv4Header_ReferenceTimestamp_FracSec_get
    if _newclass:
        ReferenceTimestamp_FracSec = _swig_property(_PythonWrapper.NTPv4Header_ReferenceTimestamp_FracSec_get, _PythonWrapper.NTPv4Header_ReferenceTimestamp_FracSec_set)
    __swig_setmethods__["OriginTimestamp_Sec"] = _PythonWrapper.NTPv4Header_OriginTimestamp_Sec_set
    __swig_getmethods__["OriginTimestamp_Sec"] = _PythonWrapper.NTPv4Header_OriginTimestamp_Sec_get
    if _newclass:
        OriginTimestamp_Sec = _swig_property(_PythonWrapper.NTPv4Header_OriginTimestamp_Sec_get, _PythonWrapper.NTPv4Header_OriginTimestamp_Sec_set)
    __swig_setmethods__["OriginTimestamp_FracSec"] = _PythonWrapper.NTPv4Header_OriginTimestamp_FracSec_set
    __swig_getmethods__["OriginTimestamp_FracSec"] = _PythonWrapper.NTPv4Header_OriginTimestamp_FracSec_get
    if _newclass:
        OriginTimestamp_FracSec = _swig_property(_PythonWrapper.NTPv4Header_OriginTimestamp_FracSec_get, _PythonWrapper.NTPv4Header_OriginTimestamp_FracSec_set)
    __swig_setmethods__["ReceiveTimestamp_Sec"] = _PythonWrapper.NTPv4Header_ReceiveTimestamp_Sec_set
    __swig_getmethods__["ReceiveTimestamp_Sec"] = _PythonWrapper.NTPv4Header_ReceiveTimestamp_Sec_get
    if _newclass:
        ReceiveTimestamp_Sec = _swig_property(_PythonWrapper.NTPv4Header_ReceiveTimestamp_Sec_get, _PythonWrapper.NTPv4Header_ReceiveTimestamp_Sec_set)
    __swig_setmethods__["ReceiveTimestamp_FracSec"] = _PythonWrapper.NTPv4Header_ReceiveTimestamp_FracSec_set
    __swig_getmethods__["ReceiveTimestamp_FracSec"] = _PythonWrapper.NTPv4Header_ReceiveTimestamp_FracSec_get
    if _newclass:
        ReceiveTimestamp_FracSec = _swig_property(_PythonWrapper.NTPv4Header_ReceiveTimestamp_FracSec_get, _PythonWrapper.NTPv4Header_ReceiveTimestamp_FracSec_set)
    __swig_setmethods__["TransmitTimestamp_Sec"] = _PythonWrapper.NTPv4Header_TransmitTimestamp_Sec_set
    __swig_getmethods__["TransmitTimestamp_Sec"] = _PythonWrapper.NTPv4Header_TransmitTimestamp_Sec_get
    if _newclass:
        TransmitTimestamp_Sec = _swig_property(_PythonWrapper.NTPv4Header_TransmitTimestamp_Sec_get, _PythonWrapper.NTPv4Header_TransmitTimestamp_Sec_set)
    __swig_setmethods__["TransmitTimestamp_FracSec"] = _PythonWrapper.NTPv4Header_TransmitTimestamp_FracSec_set
    __swig_getmethods__["TransmitTimestamp_FracSec"] = _PythonWrapper.NTPv4Header_TransmitTimestamp_FracSec_get
    if _newclass:
        TransmitTimestamp_FracSec = _swig_property(_PythonWrapper.NTPv4Header_TransmitTimestamp_FracSec_get, _PythonWrapper.NTPv4Header_TransmitTimestamp_FracSec_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_NTPv4Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.NTPv4Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_NTPv4Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.NTPv4Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.NTPv4Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.NTPv4Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.NTPv4Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.NTPv4Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.NTPv4Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.NTPv4Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.NTPv4Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.NTPv4Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.NTPv4Header_GetElementToolTip(self)
NTPv4Header_swigregister = _PythonWrapper.NTPv4Header_swigregister
NTPv4Header_swigregister(NTPv4Header)

class NTP_MAC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NTP_MAC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NTP_MAC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["KeyIdentifier"] = _PythonWrapper.NTP_MAC_KeyIdentifier_set
    __swig_getmethods__["KeyIdentifier"] = _PythonWrapper.NTP_MAC_KeyIdentifier_get
    if _newclass:
        KeyIdentifier = _swig_property(_PythonWrapper.NTP_MAC_KeyIdentifier_get, _PythonWrapper.NTP_MAC_KeyIdentifier_set)
    __swig_setmethods__["digest_1"] = _PythonWrapper.NTP_MAC_digest_1_set
    __swig_getmethods__["digest_1"] = _PythonWrapper.NTP_MAC_digest_1_get
    if _newclass:
        digest_1 = _swig_property(_PythonWrapper.NTP_MAC_digest_1_get, _PythonWrapper.NTP_MAC_digest_1_set)
    __swig_setmethods__["digest_2"] = _PythonWrapper.NTP_MAC_digest_2_set
    __swig_getmethods__["digest_2"] = _PythonWrapper.NTP_MAC_digest_2_get
    if _newclass:
        digest_2 = _swig_property(_PythonWrapper.NTP_MAC_digest_2_get, _PythonWrapper.NTP_MAC_digest_2_set)
    __swig_setmethods__["digest_3"] = _PythonWrapper.NTP_MAC_digest_3_set
    __swig_getmethods__["digest_3"] = _PythonWrapper.NTP_MAC_digest_3_get
    if _newclass:
        digest_3 = _swig_property(_PythonWrapper.NTP_MAC_digest_3_get, _PythonWrapper.NTP_MAC_digest_3_set)
    __swig_setmethods__["digest_4"] = _PythonWrapper.NTP_MAC_digest_4_set
    __swig_getmethods__["digest_4"] = _PythonWrapper.NTP_MAC_digest_4_get
    if _newclass:
        digest_4 = _swig_property(_PythonWrapper.NTP_MAC_digest_4_get, _PythonWrapper.NTP_MAC_digest_4_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_NTP_MAC(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.NTP_MAC_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_NTP_MAC
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.NTP_MAC_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.NTP_MAC_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.NTP_MAC_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.NTP_MAC_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.NTP_MAC_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.NTP_MAC_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.NTP_MAC_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.NTP_MAC_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.NTP_MAC_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.NTP_MAC_GetElementToolTip(self)
NTP_MAC_swigregister = _PythonWrapper.NTP_MAC_swigregister
NTP_MAC_swigregister(NTP_MAC)

class NVGREHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVGREHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVGREHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ChecksumPresent"] = _PythonWrapper.NVGREHeader_ChecksumPresent_set
    __swig_getmethods__["ChecksumPresent"] = _PythonWrapper.NVGREHeader_ChecksumPresent_get
    if _newclass:
        ChecksumPresent = _swig_property(_PythonWrapper.NVGREHeader_ChecksumPresent_get, _PythonWrapper.NVGREHeader_ChecksumPresent_set)
    __swig_setmethods__["RoutingPresent"] = _PythonWrapper.NVGREHeader_RoutingPresent_set
    __swig_getmethods__["RoutingPresent"] = _PythonWrapper.NVGREHeader_RoutingPresent_get
    if _newclass:
        RoutingPresent = _swig_property(_PythonWrapper.NVGREHeader_RoutingPresent_get, _PythonWrapper.NVGREHeader_RoutingPresent_set)
    __swig_setmethods__["KeyPresent"] = _PythonWrapper.NVGREHeader_KeyPresent_set
    __swig_getmethods__["KeyPresent"] = _PythonWrapper.NVGREHeader_KeyPresent_get
    if _newclass:
        KeyPresent = _swig_property(_PythonWrapper.NVGREHeader_KeyPresent_get, _PythonWrapper.NVGREHeader_KeyPresent_set)
    __swig_setmethods__["SeqNumPresent"] = _PythonWrapper.NVGREHeader_SeqNumPresent_set
    __swig_getmethods__["SeqNumPresent"] = _PythonWrapper.NVGREHeader_SeqNumPresent_get
    if _newclass:
        SeqNumPresent = _swig_property(_PythonWrapper.NVGREHeader_SeqNumPresent_get, _PythonWrapper.NVGREHeader_SeqNumPresent_set)
    __swig_setmethods__["Reserved0"] = _PythonWrapper.NVGREHeader_Reserved0_set
    __swig_getmethods__["Reserved0"] = _PythonWrapper.NVGREHeader_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_PythonWrapper.NVGREHeader_Reserved0_get, _PythonWrapper.NVGREHeader_Reserved0_set)
    __swig_setmethods__["Version"] = _PythonWrapper.NVGREHeader_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.NVGREHeader_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.NVGREHeader_Version_get, _PythonWrapper.NVGREHeader_Version_set)
    __swig_setmethods__["ProtocolType"] = _PythonWrapper.NVGREHeader_ProtocolType_set
    __swig_getmethods__["ProtocolType"] = _PythonWrapper.NVGREHeader_ProtocolType_get
    if _newclass:
        ProtocolType = _swig_property(_PythonWrapper.NVGREHeader_ProtocolType_get, _PythonWrapper.NVGREHeader_ProtocolType_set)
    __swig_setmethods__["VSID"] = _PythonWrapper.NVGREHeader_VSID_set
    __swig_getmethods__["VSID"] = _PythonWrapper.NVGREHeader_VSID_get
    if _newclass:
        VSID = _swig_property(_PythonWrapper.NVGREHeader_VSID_get, _PythonWrapper.NVGREHeader_VSID_set)
    __swig_setmethods__["FlowID"] = _PythonWrapper.NVGREHeader_FlowID_set
    __swig_getmethods__["FlowID"] = _PythonWrapper.NVGREHeader_FlowID_get
    if _newclass:
        FlowID = _swig_property(_PythonWrapper.NVGREHeader_FlowID_get, _PythonWrapper.NVGREHeader_FlowID_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_NVGREHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.NVGREHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_NVGREHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.NVGREHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.NVGREHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.NVGREHeader_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.NVGREHeader_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.NVGREHeader_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.NVGREHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.NVGREHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.NVGREHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.NVGREHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.NVGREHeader_GetElementToolTip(self)
NVGREHeader_swigregister = _PythonWrapper.NVGREHeader_swigregister
NVGREHeader_swigregister(NVGREHeader)

class OAM_PDU_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OAM_PDU_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OAM_PDU_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Length_Type"] = _PythonWrapper.OAM_PDU_Header_Length_Type_set
    __swig_getmethods__["Length_Type"] = _PythonWrapper.OAM_PDU_Header_Length_Type_get
    if _newclass:
        Length_Type = _swig_property(_PythonWrapper.OAM_PDU_Header_Length_Type_get, _PythonWrapper.OAM_PDU_Header_Length_Type_set)
    __swig_setmethods__["Subtype"] = _PythonWrapper.OAM_PDU_Header_Subtype_set
    __swig_getmethods__["Subtype"] = _PythonWrapper.OAM_PDU_Header_Subtype_get
    if _newclass:
        Subtype = _swig_property(_PythonWrapper.OAM_PDU_Header_Subtype_get, _PythonWrapper.OAM_PDU_Header_Subtype_set)
    __swig_setmethods__["PDU_Flags"] = _PythonWrapper.OAM_PDU_Header_PDU_Flags_set
    __swig_getmethods__["PDU_Flags"] = _PythonWrapper.OAM_PDU_Header_PDU_Flags_get
    if _newclass:
        PDU_Flags = _swig_property(_PythonWrapper.OAM_PDU_Header_PDU_Flags_get, _PythonWrapper.OAM_PDU_Header_PDU_Flags_set)
    __swig_setmethods__["PDU_Code"] = _PythonWrapper.OAM_PDU_Header_PDU_Code_set
    __swig_getmethods__["PDU_Code"] = _PythonWrapper.OAM_PDU_Header_PDU_Code_get
    if _newclass:
        PDU_Code = _swig_property(_PythonWrapper.OAM_PDU_Header_PDU_Code_get, _PythonWrapper.OAM_PDU_Header_PDU_Code_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_OAM_PDU_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.OAM_PDU_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_OAM_PDU_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.OAM_PDU_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.OAM_PDU_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.OAM_PDU_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.OAM_PDU_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.OAM_PDU_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.OAM_PDU_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.OAM_PDU_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.OAM_PDU_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.OAM_PDU_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.OAM_PDU_Header_GetElementToolTip(self)
OAM_PDU_Header_swigregister = _PythonWrapper.OAM_PDU_Header_swigregister
OAM_PDU_Header_swigregister(OAM_PDU_Header)

class OAM_PDU_ITUT_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OAM_PDU_ITUT_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OAM_PDU_ITUT_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MEL"] = _PythonWrapper.OAM_PDU_ITUT_Header_MEL_set
    __swig_getmethods__["MEL"] = _PythonWrapper.OAM_PDU_ITUT_Header_MEL_get
    if _newclass:
        MEL = _swig_property(_PythonWrapper.OAM_PDU_ITUT_Header_MEL_get, _PythonWrapper.OAM_PDU_ITUT_Header_MEL_set)
    __swig_setmethods__["Version"] = _PythonWrapper.OAM_PDU_ITUT_Header_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.OAM_PDU_ITUT_Header_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.OAM_PDU_ITUT_Header_Version_get, _PythonWrapper.OAM_PDU_ITUT_Header_Version_set)
    __swig_setmethods__["Opcode"] = _PythonWrapper.OAM_PDU_ITUT_Header_Opcode_set
    __swig_getmethods__["Opcode"] = _PythonWrapper.OAM_PDU_ITUT_Header_Opcode_get
    if _newclass:
        Opcode = _swig_property(_PythonWrapper.OAM_PDU_ITUT_Header_Opcode_get, _PythonWrapper.OAM_PDU_ITUT_Header_Opcode_set)
    __swig_setmethods__["Flags"] = _PythonWrapper.OAM_PDU_ITUT_Header_Flags_set
    __swig_getmethods__["Flags"] = _PythonWrapper.OAM_PDU_ITUT_Header_Flags_get
    if _newclass:
        Flags = _swig_property(_PythonWrapper.OAM_PDU_ITUT_Header_Flags_get, _PythonWrapper.OAM_PDU_ITUT_Header_Flags_set)
    __swig_setmethods__["TLVOffset"] = _PythonWrapper.OAM_PDU_ITUT_Header_TLVOffset_set
    __swig_getmethods__["TLVOffset"] = _PythonWrapper.OAM_PDU_ITUT_Header_TLVOffset_get
    if _newclass:
        TLVOffset = _swig_property(_PythonWrapper.OAM_PDU_ITUT_Header_TLVOffset_get, _PythonWrapper.OAM_PDU_ITUT_Header_TLVOffset_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_OAM_PDU_ITUT_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.OAM_PDU_ITUT_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_OAM_PDU_ITUT_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.OAM_PDU_ITUT_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.OAM_PDU_ITUT_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.OAM_PDU_ITUT_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.OAM_PDU_ITUT_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.OAM_PDU_ITUT_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.OAM_PDU_ITUT_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.OAM_PDU_ITUT_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.OAM_PDU_ITUT_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.OAM_PDU_ITUT_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.OAM_PDU_ITUT_Header_GetElementToolTip(self)
OAM_PDU_ITUT_Header_swigregister = _PythonWrapper.OAM_PDU_ITUT_Header_swigregister
OAM_PDU_ITUT_Header_swigregister(OAM_PDU_ITUT_Header)

class OWAMP_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OWAMP_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OWAMP_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SequenceNumber"] = _PythonWrapper.OWAMP_Header_SequenceNumber_set
    __swig_getmethods__["SequenceNumber"] = _PythonWrapper.OWAMP_Header_SequenceNumber_get
    if _newclass:
        SequenceNumber = _swig_property(_PythonWrapper.OWAMP_Header_SequenceNumber_get, _PythonWrapper.OWAMP_Header_SequenceNumber_set)
    __swig_setmethods__["TimestampIntPart"] = _PythonWrapper.OWAMP_Header_TimestampIntPart_set
    __swig_getmethods__["TimestampIntPart"] = _PythonWrapper.OWAMP_Header_TimestampIntPart_get
    if _newclass:
        TimestampIntPart = _swig_property(_PythonWrapper.OWAMP_Header_TimestampIntPart_get, _PythonWrapper.OWAMP_Header_TimestampIntPart_set)
    __swig_setmethods__["TimestampFraqPart"] = _PythonWrapper.OWAMP_Header_TimestampFraqPart_set
    __swig_getmethods__["TimestampFraqPart"] = _PythonWrapper.OWAMP_Header_TimestampFraqPart_get
    if _newclass:
        TimestampFraqPart = _swig_property(_PythonWrapper.OWAMP_Header_TimestampFraqPart_get, _PythonWrapper.OWAMP_Header_TimestampFraqPart_set)
    __swig_setmethods__["ErrorEstimate"] = _PythonWrapper.OWAMP_Header_ErrorEstimate_set
    __swig_getmethods__["ErrorEstimate"] = _PythonWrapper.OWAMP_Header_ErrorEstimate_get
    if _newclass:
        ErrorEstimate = _swig_property(_PythonWrapper.OWAMP_Header_ErrorEstimate_get, _PythonWrapper.OWAMP_Header_ErrorEstimate_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_OWAMP_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.OWAMP_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_OWAMP_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.OWAMP_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.OWAMP_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.OWAMP_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.OWAMP_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.OWAMP_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.OWAMP_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.OWAMP_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.OWAMP_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.OWAMP_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.OWAMP_Header_GetElementToolTip(self)
OWAMP_Header_swigregister = _PythonWrapper.OWAMP_Header_swigregister
OWAMP_Header_swigregister(OWAMP_Header)

NO_MAX_SIZE_LIMIT = _PythonWrapper.NO_MAX_SIZE_LIMIT
NO_MIN_SIZE_LIMIT = _PythonWrapper.NO_MIN_SIZE_LIMIT
class Packet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Packet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Packet(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_Packet
    __del__ = lambda self: None

    def Clone(self):
        return _PythonWrapper.Packet_Clone(self)

    def PrintHierarchy(self):
        return _PythonWrapper.Packet_PrintHierarchy(self)

    def PrintData(self):
        return _PythonWrapper.Packet_PrintData(self)

    def ToString(self):
        return _PythonWrapper.Packet_ToString(self)

    def SetDefaultData(self):
        return _PythonWrapper.Packet_SetDefaultData(self)

    def CopyAndResetAutomaticFields(self, r):
        return _PythonWrapper.Packet_CopyAndResetAutomaticFields(self, r)

    def ResetAutomaticFields(self):
        return _PythonWrapper.Packet_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Packet_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Packet_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Packet_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.Packet_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.Packet_GetElementToolTip(self)

    def GetBasicElementByIndex(self, index):
        return _PythonWrapper.Packet_GetBasicElementByIndex(self, index)

    def SetCalcSizeAccordingToPayload(self, bCalcAccordingToPayload):
        return _PythonWrapper.Packet_SetCalcSizeAccordingToPayload(self, bCalcAccordingToPayload)

    def SetZeroPadding(self, sizeWithPaddingWithoutCRC):
        return _PythonWrapper.Packet_SetZeroPadding(self, sizeWithPaddingWithoutCRC)

    def ResetZeroPadding(self):
        return _PythonWrapper.Packet_ResetZeroPadding(self)

    def BuildPacket(self):
        return _PythonWrapper.Packet_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.Packet_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.Packet_GetPacketWithoutPayloadAndCrc(self)

    def GetPayloadData(self):
        return _PythonWrapper.Packet_GetPayloadData(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.Packet_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.Packet_GetComplexPacketMembersNames(self, names)

    def GetComplexPacketToolTip(self):
        return _PythonWrapper.Packet_GetComplexPacketToolTip(self)

    def GetComplexPacketSize(self):
        return _PythonWrapper.Packet_GetComplexPacketSize(self)

    def GetDefinedMinMaxPacketSize(self, rMinPacketSize, rMaxPacketSize):
        return _PythonWrapper.Packet_GetDefinedMinMaxPacketSize(self, rMinPacketSize, rMaxPacketSize)

    def GetNumOfBasicElements(self):
        return _PythonWrapper.Packet_GetNumOfBasicElements(self)

    def IsEmpty(self):
        return _PythonWrapper.Packet_IsEmpty(self)

    def GetPacketType(self):
        return _PythonWrapper.Packet_GetPacketType(self)

    def SetSize(self, pktSize):
        return _PythonWrapper.Packet_SetSize(self, pktSize)

    def GetSize(self):
        return _PythonWrapper.Packet_GetSize(self)

    def SetCRC(self, crcError):
        return _PythonWrapper.Packet_SetCRC(self, crcError)

    def GetCRC(self):
        return _PythonWrapper.Packet_GetCRC(self)

    def SetPrintOut(self, bPrintHierarchy=True, bPrintMemoryMap=True):
        return _PythonWrapper.Packet_SetPrintOut(self, bPrintHierarchy, bPrintMemoryMap)
Packet_swigregister = _PythonWrapper.Packet_swigregister
Packet_swigregister(Packet)

class PauseControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PauseControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PauseControl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OpCode"] = _PythonWrapper.PauseControl_OpCode_set
    __swig_getmethods__["OpCode"] = _PythonWrapper.PauseControl_OpCode_get
    if _newclass:
        OpCode = _swig_property(_PythonWrapper.PauseControl_OpCode_get, _PythonWrapper.PauseControl_OpCode_set)
    __swig_setmethods__["SlotTimes"] = _PythonWrapper.PauseControl_SlotTimes_set
    __swig_getmethods__["SlotTimes"] = _PythonWrapper.PauseControl_SlotTimes_get
    if _newclass:
        SlotTimes = _swig_property(_PythonWrapper.PauseControl_SlotTimes_get, _PythonWrapper.PauseControl_SlotTimes_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_PauseControl(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.PauseControl_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_PauseControl
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.PauseControl_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.PauseControl_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.PauseControl_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.PauseControl_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.PauseControl_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.PauseControl_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.PauseControl_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.PauseControl_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.PauseControl_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.PauseControl_GetElementToolTip(self)
PauseControl_swigregister = _PythonWrapper.PauseControl_swigregister
PauseControl_swigregister(PauseControl)

PTRN_INC_BYTE = _PythonWrapper.PTRN_INC_BYTE
PTRN_INC_WORD = _PythonWrapper.PTRN_INC_WORD
PTRN_INC_DWORD = _PythonWrapper.PTRN_INC_DWORD
PTRN_DEC_BYTE = _PythonWrapper.PTRN_DEC_BYTE
PTRN_DEC_WORD = _PythonWrapper.PTRN_DEC_WORD
PTRN_DEC_DWORD = _PythonWrapper.PTRN_DEC_DWORD
PTRN_RANDOM = _PythonWrapper.PTRN_RANDOM
PTRN_FIXED = _PythonWrapper.PTRN_FIXED
PTRN_REPEATING = _PythonWrapper.PTRN_REPEATING
class Payload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Payload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Payload, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_Payload(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this
    __swig_destroy__ = _PythonWrapper.delete_Payload
    __del__ = lambda self: None

    def Clone(self):
        return _PythonWrapper.Payload_Clone(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.Payload_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.Payload_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.Payload_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.Payload_ToString(self)

    def SetPattern(self, *args):
        return _PythonWrapper.Payload_SetPattern(self, *args)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.Payload_GetElementFieldsNames(self, names)

    def SerializeElement(self, names, values, nFields):
        return _PythonWrapper.Payload_SerializeElement(self, names, values, nFields)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.Payload_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.Payload_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.Payload_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.Payload_GetElementToolTip(self)

    def SetCalcSizeAccordingToPayload(self, bCalcAccordingToPayload):
        return _PythonWrapper.Payload_SetCalcSizeAccordingToPayload(self, bCalcAccordingToPayload)
Payload_swigregister = _PythonWrapper.Payload_swigregister
Payload_swigregister(Payload)
PATTERN_01020304 = cvar.PATTERN_01020304
PATTERN_FFFF = cvar.PATTERN_FFFF
PATTERN_0000 = cvar.PATTERN_0000
PATTERN_AAAA = cvar.PATTERN_AAAA
PATTERN_5555 = cvar.PATTERN_5555
PATTERN_7777 = cvar.PATTERN_7777
PATTERN_DDDD = cvar.PATTERN_DDDD
PATTERN_7E7E = cvar.PATTERN_7E7E
PATTERN_0F0F = cvar.PATTERN_0F0F
PATTERN_F0F0 = cvar.PATTERN_F0F0
PATTERN_FF00 = cvar.PATTERN_FF00
PATTERN_00FF = cvar.PATTERN_00FF
PATTERN_FFFF0000 = cvar.PATTERN_FFFF0000
PATTERN_0000FFFF = cvar.PATTERN_0000FFFF

class PFCData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PFCData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PFCData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ControlCode"] = _PythonWrapper.PFCData_ControlCode_set
    __swig_getmethods__["ControlCode"] = _PythonWrapper.PFCData_ControlCode_get
    if _newclass:
        ControlCode = _swig_property(_PythonWrapper.PFCData_ControlCode_get, _PythonWrapper.PFCData_ControlCode_set)
    __swig_setmethods__["PriorityControlVector"] = _PythonWrapper.PFCData_PriorityControlVector_set
    __swig_getmethods__["PriorityControlVector"] = _PythonWrapper.PFCData_PriorityControlVector_get
    if _newclass:
        PriorityControlVector = _swig_property(_PythonWrapper.PFCData_PriorityControlVector_get, _PythonWrapper.PFCData_PriorityControlVector_set)
    __swig_setmethods__["TimerPrio0"] = _PythonWrapper.PFCData_TimerPrio0_set
    __swig_getmethods__["TimerPrio0"] = _PythonWrapper.PFCData_TimerPrio0_get
    if _newclass:
        TimerPrio0 = _swig_property(_PythonWrapper.PFCData_TimerPrio0_get, _PythonWrapper.PFCData_TimerPrio0_set)
    __swig_setmethods__["TimerPrio1"] = _PythonWrapper.PFCData_TimerPrio1_set
    __swig_getmethods__["TimerPrio1"] = _PythonWrapper.PFCData_TimerPrio1_get
    if _newclass:
        TimerPrio1 = _swig_property(_PythonWrapper.PFCData_TimerPrio1_get, _PythonWrapper.PFCData_TimerPrio1_set)
    __swig_setmethods__["TimerPrio2"] = _PythonWrapper.PFCData_TimerPrio2_set
    __swig_getmethods__["TimerPrio2"] = _PythonWrapper.PFCData_TimerPrio2_get
    if _newclass:
        TimerPrio2 = _swig_property(_PythonWrapper.PFCData_TimerPrio2_get, _PythonWrapper.PFCData_TimerPrio2_set)
    __swig_setmethods__["TimerPrio3"] = _PythonWrapper.PFCData_TimerPrio3_set
    __swig_getmethods__["TimerPrio3"] = _PythonWrapper.PFCData_TimerPrio3_get
    if _newclass:
        TimerPrio3 = _swig_property(_PythonWrapper.PFCData_TimerPrio3_get, _PythonWrapper.PFCData_TimerPrio3_set)
    __swig_setmethods__["TimerPrio4"] = _PythonWrapper.PFCData_TimerPrio4_set
    __swig_getmethods__["TimerPrio4"] = _PythonWrapper.PFCData_TimerPrio4_get
    if _newclass:
        TimerPrio4 = _swig_property(_PythonWrapper.PFCData_TimerPrio4_get, _PythonWrapper.PFCData_TimerPrio4_set)
    __swig_setmethods__["TimerPrio5"] = _PythonWrapper.PFCData_TimerPrio5_set
    __swig_getmethods__["TimerPrio5"] = _PythonWrapper.PFCData_TimerPrio5_get
    if _newclass:
        TimerPrio5 = _swig_property(_PythonWrapper.PFCData_TimerPrio5_get, _PythonWrapper.PFCData_TimerPrio5_set)
    __swig_setmethods__["TimerPrio6"] = _PythonWrapper.PFCData_TimerPrio6_set
    __swig_getmethods__["TimerPrio6"] = _PythonWrapper.PFCData_TimerPrio6_get
    if _newclass:
        TimerPrio6 = _swig_property(_PythonWrapper.PFCData_TimerPrio6_get, _PythonWrapper.PFCData_TimerPrio6_set)
    __swig_setmethods__["TimerPrio7"] = _PythonWrapper.PFCData_TimerPrio7_set
    __swig_getmethods__["TimerPrio7"] = _PythonWrapper.PFCData_TimerPrio7_get
    if _newclass:
        TimerPrio7 = _swig_property(_PythonWrapper.PFCData_TimerPrio7_get, _PythonWrapper.PFCData_TimerPrio7_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_PFCData(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.PFCData_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_PFCData
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.PFCData_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.PFCData_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.PFCData_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.PFCData_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.PFCData_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.PFCData_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.PFCData_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.PFCData_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.PFCData_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.PFCData_GetElementToolTip(self)
PFCData_swigregister = _PythonWrapper.PFCData_swigregister
PFCData_swigregister(PFCData)

class ITAG_TCI_VID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITAG_TCI_VID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITAG_TCI_VID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["I_PCP"] = _PythonWrapper.ITAG_TCI_VID_I_PCP_set
    __swig_getmethods__["I_PCP"] = _PythonWrapper.ITAG_TCI_VID_I_PCP_get
    if _newclass:
        I_PCP = _swig_property(_PythonWrapper.ITAG_TCI_VID_I_PCP_get, _PythonWrapper.ITAG_TCI_VID_I_PCP_set)
    __swig_setmethods__["I_DEI"] = _PythonWrapper.ITAG_TCI_VID_I_DEI_set
    __swig_getmethods__["I_DEI"] = _PythonWrapper.ITAG_TCI_VID_I_DEI_get
    if _newclass:
        I_DEI = _swig_property(_PythonWrapper.ITAG_TCI_VID_I_DEI_get, _PythonWrapper.ITAG_TCI_VID_I_DEI_set)
    __swig_setmethods__["UCA"] = _PythonWrapper.ITAG_TCI_VID_UCA_set
    __swig_getmethods__["UCA"] = _PythonWrapper.ITAG_TCI_VID_UCA_get
    if _newclass:
        UCA = _swig_property(_PythonWrapper.ITAG_TCI_VID_UCA_get, _PythonWrapper.ITAG_TCI_VID_UCA_set)
    __swig_setmethods__["Res1"] = _PythonWrapper.ITAG_TCI_VID_Res1_set
    __swig_getmethods__["Res1"] = _PythonWrapper.ITAG_TCI_VID_Res1_get
    if _newclass:
        Res1 = _swig_property(_PythonWrapper.ITAG_TCI_VID_Res1_get, _PythonWrapper.ITAG_TCI_VID_Res1_set)
    __swig_setmethods__["Res2"] = _PythonWrapper.ITAG_TCI_VID_Res2_set
    __swig_getmethods__["Res2"] = _PythonWrapper.ITAG_TCI_VID_Res2_get
    if _newclass:
        Res2 = _swig_property(_PythonWrapper.ITAG_TCI_VID_Res2_get, _PythonWrapper.ITAG_TCI_VID_Res2_set)
    __swig_setmethods__["I_SID"] = _PythonWrapper.ITAG_TCI_VID_I_SID_set
    __swig_getmethods__["I_SID"] = _PythonWrapper.ITAG_TCI_VID_I_SID_get
    if _newclass:
        I_SID = _swig_property(_PythonWrapper.ITAG_TCI_VID_I_SID_get, _PythonWrapper.ITAG_TCI_VID_I_SID_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_ITAG_TCI_VID(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.ITAG_TCI_VID_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_ITAG_TCI_VID
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.ITAG_TCI_VID_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.ITAG_TCI_VID_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.ITAG_TCI_VID_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.ITAG_TCI_VID_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.ITAG_TCI_VID_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.ITAG_TCI_VID_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.ITAG_TCI_VID_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.ITAG_TCI_VID_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.ITAG_TCI_VID_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.ITAG_TCI_VID_GetElementToolTip(self)
ITAG_TCI_VID_swigregister = _PythonWrapper.ITAG_TCI_VID_swigregister
ITAG_TCI_VID_swigregister(ITAG_TCI_VID)

class PTPHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PTPHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PTPHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TransportSpecific"] = _PythonWrapper.PTPHeader_TransportSpecific_set
    __swig_getmethods__["TransportSpecific"] = _PythonWrapper.PTPHeader_TransportSpecific_get
    if _newclass:
        TransportSpecific = _swig_property(_PythonWrapper.PTPHeader_TransportSpecific_get, _PythonWrapper.PTPHeader_TransportSpecific_set)
    __swig_setmethods__["MessageType"] = _PythonWrapper.PTPHeader_MessageType_set
    __swig_getmethods__["MessageType"] = _PythonWrapper.PTPHeader_MessageType_get
    if _newclass:
        MessageType = _swig_property(_PythonWrapper.PTPHeader_MessageType_get, _PythonWrapper.PTPHeader_MessageType_set)
    __swig_setmethods__["Reserved4Bits"] = _PythonWrapper.PTPHeader_Reserved4Bits_set
    __swig_getmethods__["Reserved4Bits"] = _PythonWrapper.PTPHeader_Reserved4Bits_get
    if _newclass:
        Reserved4Bits = _swig_property(_PythonWrapper.PTPHeader_Reserved4Bits_get, _PythonWrapper.PTPHeader_Reserved4Bits_set)
    __swig_setmethods__["VersionPTP"] = _PythonWrapper.PTPHeader_VersionPTP_set
    __swig_getmethods__["VersionPTP"] = _PythonWrapper.PTPHeader_VersionPTP_get
    if _newclass:
        VersionPTP = _swig_property(_PythonWrapper.PTPHeader_VersionPTP_get, _PythonWrapper.PTPHeader_VersionPTP_set)
    __swig_setmethods__["MessageLength"] = _PythonWrapper.PTPHeader_MessageLength_set
    __swig_getmethods__["MessageLength"] = _PythonWrapper.PTPHeader_MessageLength_get
    if _newclass:
        MessageLength = _swig_property(_PythonWrapper.PTPHeader_MessageLength_get, _PythonWrapper.PTPHeader_MessageLength_set)
    __swig_setmethods__["DomainNumber"] = _PythonWrapper.PTPHeader_DomainNumber_set
    __swig_getmethods__["DomainNumber"] = _PythonWrapper.PTPHeader_DomainNumber_get
    if _newclass:
        DomainNumber = _swig_property(_PythonWrapper.PTPHeader_DomainNumber_get, _PythonWrapper.PTPHeader_DomainNumber_set)
    __swig_setmethods__["Reserved8Bits"] = _PythonWrapper.PTPHeader_Reserved8Bits_set
    __swig_getmethods__["Reserved8Bits"] = _PythonWrapper.PTPHeader_Reserved8Bits_get
    if _newclass:
        Reserved8Bits = _swig_property(_PythonWrapper.PTPHeader_Reserved8Bits_get, _PythonWrapper.PTPHeader_Reserved8Bits_set)
    __swig_setmethods__["FlagField"] = _PythonWrapper.PTPHeader_FlagField_set
    __swig_getmethods__["FlagField"] = _PythonWrapper.PTPHeader_FlagField_get
    if _newclass:
        FlagField = _swig_property(_PythonWrapper.PTPHeader_FlagField_get, _PythonWrapper.PTPHeader_FlagField_set)
    __swig_setmethods__["CorrectionFieldHigh"] = _PythonWrapper.PTPHeader_CorrectionFieldHigh_set
    __swig_getmethods__["CorrectionFieldHigh"] = _PythonWrapper.PTPHeader_CorrectionFieldHigh_get
    if _newclass:
        CorrectionFieldHigh = _swig_property(_PythonWrapper.PTPHeader_CorrectionFieldHigh_get, _PythonWrapper.PTPHeader_CorrectionFieldHigh_set)
    __swig_setmethods__["CorrectionFieldLow"] = _PythonWrapper.PTPHeader_CorrectionFieldLow_set
    __swig_getmethods__["CorrectionFieldLow"] = _PythonWrapper.PTPHeader_CorrectionFieldLow_get
    if _newclass:
        CorrectionFieldLow = _swig_property(_PythonWrapper.PTPHeader_CorrectionFieldLow_get, _PythonWrapper.PTPHeader_CorrectionFieldLow_set)
    __swig_setmethods__["Reserved32Bits"] = _PythonWrapper.PTPHeader_Reserved32Bits_set
    __swig_getmethods__["Reserved32Bits"] = _PythonWrapper.PTPHeader_Reserved32Bits_get
    if _newclass:
        Reserved32Bits = _swig_property(_PythonWrapper.PTPHeader_Reserved32Bits_get, _PythonWrapper.PTPHeader_Reserved32Bits_set)
    __swig_setmethods__["SourcePortIdHigh"] = _PythonWrapper.PTPHeader_SourcePortIdHigh_set
    __swig_getmethods__["SourcePortIdHigh"] = _PythonWrapper.PTPHeader_SourcePortIdHigh_get
    if _newclass:
        SourcePortIdHigh = _swig_property(_PythonWrapper.PTPHeader_SourcePortIdHigh_get, _PythonWrapper.PTPHeader_SourcePortIdHigh_set)
    __swig_setmethods__["SourcePortIdMed"] = _PythonWrapper.PTPHeader_SourcePortIdMed_set
    __swig_getmethods__["SourcePortIdMed"] = _PythonWrapper.PTPHeader_SourcePortIdMed_get
    if _newclass:
        SourcePortIdMed = _swig_property(_PythonWrapper.PTPHeader_SourcePortIdMed_get, _PythonWrapper.PTPHeader_SourcePortIdMed_set)
    __swig_setmethods__["SourcePortIdLow"] = _PythonWrapper.PTPHeader_SourcePortIdLow_set
    __swig_getmethods__["SourcePortIdLow"] = _PythonWrapper.PTPHeader_SourcePortIdLow_get
    if _newclass:
        SourcePortIdLow = _swig_property(_PythonWrapper.PTPHeader_SourcePortIdLow_get, _PythonWrapper.PTPHeader_SourcePortIdLow_set)
    __swig_setmethods__["SequenceID"] = _PythonWrapper.PTPHeader_SequenceID_set
    __swig_getmethods__["SequenceID"] = _PythonWrapper.PTPHeader_SequenceID_get
    if _newclass:
        SequenceID = _swig_property(_PythonWrapper.PTPHeader_SequenceID_get, _PythonWrapper.PTPHeader_SequenceID_set)
    __swig_setmethods__["ControlField"] = _PythonWrapper.PTPHeader_ControlField_set
    __swig_getmethods__["ControlField"] = _PythonWrapper.PTPHeader_ControlField_get
    if _newclass:
        ControlField = _swig_property(_PythonWrapper.PTPHeader_ControlField_get, _PythonWrapper.PTPHeader_ControlField_set)
    __swig_setmethods__["LogMessageInterval"] = _PythonWrapper.PTPHeader_LogMessageInterval_set
    __swig_getmethods__["LogMessageInterval"] = _PythonWrapper.PTPHeader_LogMessageInterval_get
    if _newclass:
        LogMessageInterval = _swig_property(_PythonWrapper.PTPHeader_LogMessageInterval_get, _PythonWrapper.PTPHeader_LogMessageInterval_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_PTPHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.PTPHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_PTPHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.PTPHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.PTPHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.PTPHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.PTPHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.PTPHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.PTPHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.PTPHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.PTPHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.PTPHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.PTPHeader_GetElementToolTip(self)
PTPHeader_swigregister = _PythonWrapper.PTPHeader_swigregister
PTPHeader_swigregister(PTPHeader)

class GenericPWMPLSControlWord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericPWMPLSControlWord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericPWMPLSControlWord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FirstNibble"] = _PythonWrapper.GenericPWMPLSControlWord_FirstNibble_set
    __swig_getmethods__["FirstNibble"] = _PythonWrapper.GenericPWMPLSControlWord_FirstNibble_get
    if _newclass:
        FirstNibble = _swig_property(_PythonWrapper.GenericPWMPLSControlWord_FirstNibble_get, _PythonWrapper.GenericPWMPLSControlWord_FirstNibble_set)
    __swig_setmethods__["SpecifiedByPWEncapsulation"] = _PythonWrapper.GenericPWMPLSControlWord_SpecifiedByPWEncapsulation_set
    __swig_getmethods__["SpecifiedByPWEncapsulation"] = _PythonWrapper.GenericPWMPLSControlWord_SpecifiedByPWEncapsulation_get
    if _newclass:
        SpecifiedByPWEncapsulation = _swig_property(_PythonWrapper.GenericPWMPLSControlWord_SpecifiedByPWEncapsulation_get, _PythonWrapper.GenericPWMPLSControlWord_SpecifiedByPWEncapsulation_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_GenericPWMPLSControlWord(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.GenericPWMPLSControlWord_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_GenericPWMPLSControlWord
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.GenericPWMPLSControlWord_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.GenericPWMPLSControlWord_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.GenericPWMPLSControlWord_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.GenericPWMPLSControlWord_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.GenericPWMPLSControlWord_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.GenericPWMPLSControlWord_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.GenericPWMPLSControlWord_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.GenericPWMPLSControlWord_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.GenericPWMPLSControlWord_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.GenericPWMPLSControlWord_GetElementToolTip(self)
GenericPWMPLSControlWord_swigregister = _PythonWrapper.GenericPWMPLSControlWord_swigregister
GenericPWMPLSControlWord_swigregister(GenericPWMPLSControlWord)

class PreferredPWMPLSControlWord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreferredPWMPLSControlWord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PreferredPWMPLSControlWord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FirstNibble"] = _PythonWrapper.PreferredPWMPLSControlWord_FirstNibble_set
    __swig_getmethods__["FirstNibble"] = _PythonWrapper.PreferredPWMPLSControlWord_FirstNibble_get
    if _newclass:
        FirstNibble = _swig_property(_PythonWrapper.PreferredPWMPLSControlWord_FirstNibble_get, _PythonWrapper.PreferredPWMPLSControlWord_FirstNibble_set)
    __swig_setmethods__["Flags"] = _PythonWrapper.PreferredPWMPLSControlWord_Flags_set
    __swig_getmethods__["Flags"] = _PythonWrapper.PreferredPWMPLSControlWord_Flags_get
    if _newclass:
        Flags = _swig_property(_PythonWrapper.PreferredPWMPLSControlWord_Flags_get, _PythonWrapper.PreferredPWMPLSControlWord_Flags_set)
    __swig_setmethods__["FRG"] = _PythonWrapper.PreferredPWMPLSControlWord_FRG_set
    __swig_getmethods__["FRG"] = _PythonWrapper.PreferredPWMPLSControlWord_FRG_get
    if _newclass:
        FRG = _swig_property(_PythonWrapper.PreferredPWMPLSControlWord_FRG_get, _PythonWrapper.PreferredPWMPLSControlWord_FRG_set)
    __swig_setmethods__["Length"] = _PythonWrapper.PreferredPWMPLSControlWord_Length_set
    __swig_getmethods__["Length"] = _PythonWrapper.PreferredPWMPLSControlWord_Length_get
    if _newclass:
        Length = _swig_property(_PythonWrapper.PreferredPWMPLSControlWord_Length_get, _PythonWrapper.PreferredPWMPLSControlWord_Length_set)
    __swig_setmethods__["SequenceNumber"] = _PythonWrapper.PreferredPWMPLSControlWord_SequenceNumber_set
    __swig_getmethods__["SequenceNumber"] = _PythonWrapper.PreferredPWMPLSControlWord_SequenceNumber_get
    if _newclass:
        SequenceNumber = _swig_property(_PythonWrapper.PreferredPWMPLSControlWord_SequenceNumber_get, _PythonWrapper.PreferredPWMPLSControlWord_SequenceNumber_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_PreferredPWMPLSControlWord(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.PreferredPWMPLSControlWord_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_PreferredPWMPLSControlWord
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.PreferredPWMPLSControlWord_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.PreferredPWMPLSControlWord_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.PreferredPWMPLSControlWord_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.PreferredPWMPLSControlWord_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.PreferredPWMPLSControlWord_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.PreferredPWMPLSControlWord_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.PreferredPWMPLSControlWord_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.PreferredPWMPLSControlWord_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.PreferredPWMPLSControlWord_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.PreferredPWMPLSControlWord_GetElementToolTip(self)
PreferredPWMPLSControlWord_swigregister = _PythonWrapper.PreferredPWMPLSControlWord_swigregister
PreferredPWMPLSControlWord_swigregister(PreferredPWMPLSControlWord)

class PW_AC_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PW_AC_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PW_AC_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FirstNibble"] = _PythonWrapper.PW_AC_Header_FirstNibble_set
    __swig_getmethods__["FirstNibble"] = _PythonWrapper.PW_AC_Header_FirstNibble_get
    if _newclass:
        FirstNibble = _swig_property(_PythonWrapper.PW_AC_Header_FirstNibble_get, _PythonWrapper.PW_AC_Header_FirstNibble_set)
    __swig_setmethods__["Version"] = _PythonWrapper.PW_AC_Header_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.PW_AC_Header_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.PW_AC_Header_Version_get, _PythonWrapper.PW_AC_Header_Version_set)
    __swig_setmethods__["Reserved"] = _PythonWrapper.PW_AC_Header_Reserved_set
    __swig_getmethods__["Reserved"] = _PythonWrapper.PW_AC_Header_Reserved_get
    if _newclass:
        Reserved = _swig_property(_PythonWrapper.PW_AC_Header_Reserved_get, _PythonWrapper.PW_AC_Header_Reserved_set)
    __swig_setmethods__["ChannelType"] = _PythonWrapper.PW_AC_Header_ChannelType_set
    __swig_getmethods__["ChannelType"] = _PythonWrapper.PW_AC_Header_ChannelType_get
    if _newclass:
        ChannelType = _swig_property(_PythonWrapper.PW_AC_Header_ChannelType_get, _PythonWrapper.PW_AC_Header_ChannelType_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_PW_AC_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.PW_AC_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_PW_AC_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.PW_AC_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.PW_AC_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.PW_AC_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.PW_AC_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.PW_AC_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.PW_AC_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.PW_AC_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.PW_AC_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.PW_AC_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.PW_AC_Header_GetElementToolTip(self)
PW_AC_Header_swigregister = _PythonWrapper.PW_AC_Header_swigregister
PW_AC_Header_swigregister(PW_AC_Header)

class CNTag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNTag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CNTagEType"] = _PythonWrapper.CNTag_CNTagEType_set
    __swig_getmethods__["CNTagEType"] = _PythonWrapper.CNTag_CNTagEType_get
    if _newclass:
        CNTagEType = _swig_property(_PythonWrapper.CNTag_CNTagEType_get, _PythonWrapper.CNTag_CNTagEType_set)
    __swig_setmethods__["CNTagFlowId"] = _PythonWrapper.CNTag_CNTagFlowId_set
    __swig_getmethods__["CNTagFlowId"] = _PythonWrapper.CNTag_CNTagFlowId_get
    if _newclass:
        CNTagFlowId = _swig_property(_PythonWrapper.CNTag_CNTagFlowId_get, _PythonWrapper.CNTag_CNTagFlowId_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_CNTag(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.CNTag_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_CNTag
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.CNTag_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.CNTag_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.CNTag_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.CNTag_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.CNTag_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.CNTag_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.CNTag_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.CNTag_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.CNTag_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.CNTag_GetElementToolTip(self)
CNTag_swigregister = _PythonWrapper.CNTag_swigregister
CNTag_swigregister(CNTag)

class QCNHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCNHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QCNHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CNEtype"] = _PythonWrapper.QCNHeader_CNEtype_set
    __swig_getmethods__["CNEtype"] = _PythonWrapper.QCNHeader_CNEtype_get
    if _newclass:
        CNEtype = _swig_property(_PythonWrapper.QCNHeader_CNEtype_get, _PythonWrapper.QCNHeader_CNEtype_set)
    __swig_setmethods__["Version"] = _PythonWrapper.QCNHeader_Version_set
    __swig_getmethods__["Version"] = _PythonWrapper.QCNHeader_Version_get
    if _newclass:
        Version = _swig_property(_PythonWrapper.QCNHeader_Version_get, _PythonWrapper.QCNHeader_Version_set)
    __swig_setmethods__["Reserved6Bits"] = _PythonWrapper.QCNHeader_Reserved6Bits_set
    __swig_getmethods__["Reserved6Bits"] = _PythonWrapper.QCNHeader_Reserved6Bits_get
    if _newclass:
        Reserved6Bits = _swig_property(_PythonWrapper.QCNHeader_Reserved6Bits_get, _PythonWrapper.QCNHeader_Reserved6Bits_set)
    __swig_setmethods__["qFb"] = _PythonWrapper.QCNHeader_qFb_set
    __swig_getmethods__["qFb"] = _PythonWrapper.QCNHeader_qFb_get
    if _newclass:
        qFb = _swig_property(_PythonWrapper.QCNHeader_qFb_get, _PythonWrapper.QCNHeader_qFb_set)
    __swig_setmethods__["CPID_high"] = _PythonWrapper.QCNHeader_CPID_high_set
    __swig_getmethods__["CPID_high"] = _PythonWrapper.QCNHeader_CPID_high_get
    if _newclass:
        CPID_high = _swig_property(_PythonWrapper.QCNHeader_CPID_high_get, _PythonWrapper.QCNHeader_CPID_high_set)
    __swig_setmethods__["CPID_low"] = _PythonWrapper.QCNHeader_CPID_low_set
    __swig_getmethods__["CPID_low"] = _PythonWrapper.QCNHeader_CPID_low_get
    if _newclass:
        CPID_low = _swig_property(_PythonWrapper.QCNHeader_CPID_low_get, _PythonWrapper.QCNHeader_CPID_low_set)
    __swig_setmethods__["Qoff"] = _PythonWrapper.QCNHeader_Qoff_set
    __swig_getmethods__["Qoff"] = _PythonWrapper.QCNHeader_Qoff_get
    if _newclass:
        Qoff = _swig_property(_PythonWrapper.QCNHeader_Qoff_get, _PythonWrapper.QCNHeader_Qoff_set)
    __swig_setmethods__["Qdelta"] = _PythonWrapper.QCNHeader_Qdelta_set
    __swig_getmethods__["Qdelta"] = _PythonWrapper.QCNHeader_Qdelta_get
    if _newclass:
        Qdelta = _swig_property(_PythonWrapper.QCNHeader_Qdelta_get, _PythonWrapper.QCNHeader_Qdelta_set)
    __swig_setmethods__["EncapUp"] = _PythonWrapper.QCNHeader_EncapUp_set
    __swig_getmethods__["EncapUp"] = _PythonWrapper.QCNHeader_EncapUp_get
    if _newclass:
        EncapUp = _swig_property(_PythonWrapper.QCNHeader_EncapUp_get, _PythonWrapper.QCNHeader_EncapUp_set)
    __swig_setmethods__["Reserved1Bit"] = _PythonWrapper.QCNHeader_Reserved1Bit_set
    __swig_getmethods__["Reserved1Bit"] = _PythonWrapper.QCNHeader_Reserved1Bit_get
    if _newclass:
        Reserved1Bit = _swig_property(_PythonWrapper.QCNHeader_Reserved1Bit_get, _PythonWrapper.QCNHeader_Reserved1Bit_set)
    __swig_setmethods__["EncapVid"] = _PythonWrapper.QCNHeader_EncapVid_set
    __swig_getmethods__["EncapVid"] = _PythonWrapper.QCNHeader_EncapVid_get
    if _newclass:
        EncapVid = _swig_property(_PythonWrapper.QCNHeader_EncapVid_get, _PythonWrapper.QCNHeader_EncapVid_set)
    __swig_setmethods__["EncapMacDa"] = _PythonWrapper.QCNHeader_EncapMacDa_set
    __swig_getmethods__["EncapMacDa"] = _PythonWrapper.QCNHeader_EncapMacDa_get
    if _newclass:
        EncapMacDa = _swig_property(_PythonWrapper.QCNHeader_EncapMacDa_get, _PythonWrapper.QCNHeader_EncapMacDa_set)
    __swig_setmethods__["EncapSduLength"] = _PythonWrapper.QCNHeader_EncapSduLength_set
    __swig_getmethods__["EncapSduLength"] = _PythonWrapper.QCNHeader_EncapSduLength_get
    if _newclass:
        EncapSduLength = _swig_property(_PythonWrapper.QCNHeader_EncapSduLength_get, _PythonWrapper.QCNHeader_EncapSduLength_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_QCNHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.QCNHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_QCNHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.QCNHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.QCNHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.QCNHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.QCNHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.QCNHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.QCNHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.QCNHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.QCNHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.QCNHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.QCNHeader_GetElementToolTip(self)
QCNHeader_swigregister = _PythonWrapper.QCNHeader_swigregister
QCNHeader_swigregister(QCNHeader)

class RARPHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RARPHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RARPHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hardwareType"] = _PythonWrapper.RARPHeader_hardwareType_set
    __swig_getmethods__["hardwareType"] = _PythonWrapper.RARPHeader_hardwareType_get
    if _newclass:
        hardwareType = _swig_property(_PythonWrapper.RARPHeader_hardwareType_get, _PythonWrapper.RARPHeader_hardwareType_set)
    __swig_setmethods__["protocolType"] = _PythonWrapper.RARPHeader_protocolType_set
    __swig_getmethods__["protocolType"] = _PythonWrapper.RARPHeader_protocolType_get
    if _newclass:
        protocolType = _swig_property(_PythonWrapper.RARPHeader_protocolType_get, _PythonWrapper.RARPHeader_protocolType_set)
    __swig_setmethods__["hwAddressLength"] = _PythonWrapper.RARPHeader_hwAddressLength_set
    __swig_getmethods__["hwAddressLength"] = _PythonWrapper.RARPHeader_hwAddressLength_get
    if _newclass:
        hwAddressLength = _swig_property(_PythonWrapper.RARPHeader_hwAddressLength_get, _PythonWrapper.RARPHeader_hwAddressLength_set)
    __swig_setmethods__["protocolAddressLength"] = _PythonWrapper.RARPHeader_protocolAddressLength_set
    __swig_getmethods__["protocolAddressLength"] = _PythonWrapper.RARPHeader_protocolAddressLength_get
    if _newclass:
        protocolAddressLength = _swig_property(_PythonWrapper.RARPHeader_protocolAddressLength_get, _PythonWrapper.RARPHeader_protocolAddressLength_set)
    __swig_setmethods__["opcode"] = _PythonWrapper.RARPHeader_opcode_set
    __swig_getmethods__["opcode"] = _PythonWrapper.RARPHeader_opcode_get
    if _newclass:
        opcode = _swig_property(_PythonWrapper.RARPHeader_opcode_get, _PythonWrapper.RARPHeader_opcode_set)
    __swig_setmethods__["sourceHwAddress"] = _PythonWrapper.RARPHeader_sourceHwAddress_set
    __swig_getmethods__["sourceHwAddress"] = _PythonWrapper.RARPHeader_sourceHwAddress_get
    if _newclass:
        sourceHwAddress = _swig_property(_PythonWrapper.RARPHeader_sourceHwAddress_get, _PythonWrapper.RARPHeader_sourceHwAddress_set)
    __swig_setmethods__["sourceProtocolAddress"] = _PythonWrapper.RARPHeader_sourceProtocolAddress_set
    __swig_getmethods__["sourceProtocolAddress"] = _PythonWrapper.RARPHeader_sourceProtocolAddress_get
    if _newclass:
        sourceProtocolAddress = _swig_property(_PythonWrapper.RARPHeader_sourceProtocolAddress_get, _PythonWrapper.RARPHeader_sourceProtocolAddress_set)
    __swig_setmethods__["destHwAddress"] = _PythonWrapper.RARPHeader_destHwAddress_set
    __swig_getmethods__["destHwAddress"] = _PythonWrapper.RARPHeader_destHwAddress_get
    if _newclass:
        destHwAddress = _swig_property(_PythonWrapper.RARPHeader_destHwAddress_get, _PythonWrapper.RARPHeader_destHwAddress_set)
    __swig_setmethods__["destProtocolAddress"] = _PythonWrapper.RARPHeader_destProtocolAddress_set
    __swig_getmethods__["destProtocolAddress"] = _PythonWrapper.RARPHeader_destProtocolAddress_get
    if _newclass:
        destProtocolAddress = _swig_property(_PythonWrapper.RARPHeader_destProtocolAddress_get, _PythonWrapper.RARPHeader_destProtocolAddress_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_RARPHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.RARPHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_RARPHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.RARPHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.RARPHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.RARPHeader_SetDefaultData(self, pktSize)

    def ToString(self):
        return _PythonWrapper.RARPHeader_ToString(self)

    def ResetAutomaticFields(self):
        return _PythonWrapper.RARPHeader_ResetAutomaticFields(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.RARPHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.RARPHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.RARPHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.RARPHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.RARPHeader_GetElementToolTip(self)
RARPHeader_swigregister = _PythonWrapper.RARPHeader_swigregister
RARPHeader_swigregister(RARPHeader)

class INativeDataProcessing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INativeDataProcessing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INativeDataProcessing, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PythonWrapper.delete_INativeDataProcessing
    __del__ = lambda self: None
INativeDataProcessing_swigregister = _PythonWrapper.INativeDataProcessing_swigregister
INativeDataProcessing_swigregister(INativeDataProcessing)

class IRowDataProcessing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRowDataProcessing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IRowDataProcessing, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PythonWrapper.delete_IRowDataProcessing
    __del__ = lambda self: None

    def GetData(self, pData, pktSize, ret):
        return _PythonWrapper.IRowDataProcessing_GetData(self, pData, pktSize, ret)

    def Init(self, elem, pktSize, bUseDefaultValues):
        return _PythonWrapper.IRowDataProcessing_Init(self, elem, pktSize, bUseDefaultValues)

    def PrintHierarchy(self):
        return _PythonWrapper.IRowDataProcessing_PrintHierarchy(self)

    def Clone(self):
        return _PythonWrapper.IRowDataProcessing_Clone(self)

    def SetPrintOut(self, bPrint):
        return _PythonWrapper.IRowDataProcessing_SetPrintOut(self, bPrint)

    def GetPacketSizeWithoutPayload(self):
        return _PythonWrapper.IRowDataProcessing_GetPacketSizeWithoutPayload(self)

    def SetUserConfigurations(self, bCalcSizeAccordingToPayload, bZeroPadding, paddingSizeWithoutCRC):
        return _PythonWrapper.IRowDataProcessing_SetUserConfigurations(self, bCalcSizeAccordingToPayload, bZeroPadding, paddingSizeWithoutCRC)
IRowDataProcessing_swigregister = _PythonWrapper.IRowDataProcessing_swigregister
IRowDataProcessing_swigregister(IRowDataProcessing)

class SSMHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSMHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SSMHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OAMPDU_Subtype"] = _PythonWrapper.SSMHeader_OAMPDU_Subtype_set
    __swig_getmethods__["OAMPDU_Subtype"] = _PythonWrapper.SSMHeader_OAMPDU_Subtype_get
    if _newclass:
        OAMPDU_Subtype = _swig_property(_PythonWrapper.SSMHeader_OAMPDU_Subtype_get, _PythonWrapper.SSMHeader_OAMPDU_Subtype_set)
    __swig_setmethods__["Flags"] = _PythonWrapper.SSMHeader_Flags_set
    __swig_getmethods__["Flags"] = _PythonWrapper.SSMHeader_Flags_get
    if _newclass:
        Flags = _swig_property(_PythonWrapper.SSMHeader_Flags_get, _PythonWrapper.SSMHeader_Flags_set)
    __swig_setmethods__["Code"] = _PythonWrapper.SSMHeader_Code_set
    __swig_getmethods__["Code"] = _PythonWrapper.SSMHeader_Code_get
    if _newclass:
        Code = _swig_property(_PythonWrapper.SSMHeader_Code_get, _PythonWrapper.SSMHeader_Code_set)
    __swig_setmethods__["OUI"] = _PythonWrapper.SSMHeader_OUI_set
    __swig_getmethods__["OUI"] = _PythonWrapper.SSMHeader_OUI_get
    if _newclass:
        OUI = _swig_property(_PythonWrapper.SSMHeader_OUI_get, _PythonWrapper.SSMHeader_OUI_set)
    __swig_setmethods__["SSM_Status"] = _PythonWrapper.SSMHeader_SSM_Status_set
    __swig_getmethods__["SSM_Status"] = _PythonWrapper.SSMHeader_SSM_Status_get
    if _newclass:
        SSM_Status = _swig_property(_PythonWrapper.SSMHeader_SSM_Status_get, _PythonWrapper.SSMHeader_SSM_Status_set)
    __swig_setmethods__["SSM_Reserved"] = _PythonWrapper.SSMHeader_SSM_Reserved_set
    __swig_getmethods__["SSM_Reserved"] = _PythonWrapper.SSMHeader_SSM_Reserved_get
    if _newclass:
        SSM_Reserved = _swig_property(_PythonWrapper.SSMHeader_SSM_Reserved_get, _PythonWrapper.SSMHeader_SSM_Reserved_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_SSMHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.SSMHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_SSMHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.SSMHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.SSMHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.SSMHeader_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.SSMHeader_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.SSMHeader_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.SSMHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.SSMHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.SSMHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.SSMHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.SSMHeader_GetElementToolTip(self)
SSMHeader_swigregister = _PythonWrapper.SSMHeader_swigregister
SSMHeader_swigregister(SSMHeader)

class TCPHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCPHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SrcPort"] = _PythonWrapper.TCPHeader_SrcPort_set
    __swig_getmethods__["SrcPort"] = _PythonWrapper.TCPHeader_SrcPort_get
    if _newclass:
        SrcPort = _swig_property(_PythonWrapper.TCPHeader_SrcPort_get, _PythonWrapper.TCPHeader_SrcPort_set)
    __swig_setmethods__["DestPort"] = _PythonWrapper.TCPHeader_DestPort_set
    __swig_getmethods__["DestPort"] = _PythonWrapper.TCPHeader_DestPort_get
    if _newclass:
        DestPort = _swig_property(_PythonWrapper.TCPHeader_DestPort_get, _PythonWrapper.TCPHeader_DestPort_set)
    __swig_setmethods__["SeqNumber"] = _PythonWrapper.TCPHeader_SeqNumber_set
    __swig_getmethods__["SeqNumber"] = _PythonWrapper.TCPHeader_SeqNumber_get
    if _newclass:
        SeqNumber = _swig_property(_PythonWrapper.TCPHeader_SeqNumber_get, _PythonWrapper.TCPHeader_SeqNumber_set)
    __swig_setmethods__["AckNumber"] = _PythonWrapper.TCPHeader_AckNumber_set
    __swig_getmethods__["AckNumber"] = _PythonWrapper.TCPHeader_AckNumber_get
    if _newclass:
        AckNumber = _swig_property(_PythonWrapper.TCPHeader_AckNumber_get, _PythonWrapper.TCPHeader_AckNumber_set)
    __swig_setmethods__["Offset"] = _PythonWrapper.TCPHeader_Offset_set
    __swig_getmethods__["Offset"] = _PythonWrapper.TCPHeader_Offset_get
    if _newclass:
        Offset = _swig_property(_PythonWrapper.TCPHeader_Offset_get, _PythonWrapper.TCPHeader_Offset_set)
    __swig_setmethods__["Reserved"] = _PythonWrapper.TCPHeader_Reserved_set
    __swig_getmethods__["Reserved"] = _PythonWrapper.TCPHeader_Reserved_get
    if _newclass:
        Reserved = _swig_property(_PythonWrapper.TCPHeader_Reserved_get, _PythonWrapper.TCPHeader_Reserved_set)
    __swig_setmethods__["URG"] = _PythonWrapper.TCPHeader_URG_set
    __swig_getmethods__["URG"] = _PythonWrapper.TCPHeader_URG_get
    if _newclass:
        URG = _swig_property(_PythonWrapper.TCPHeader_URG_get, _PythonWrapper.TCPHeader_URG_set)
    __swig_setmethods__["ACK"] = _PythonWrapper.TCPHeader_ACK_set
    __swig_getmethods__["ACK"] = _PythonWrapper.TCPHeader_ACK_get
    if _newclass:
        ACK = _swig_property(_PythonWrapper.TCPHeader_ACK_get, _PythonWrapper.TCPHeader_ACK_set)
    __swig_setmethods__["PSH"] = _PythonWrapper.TCPHeader_PSH_set
    __swig_getmethods__["PSH"] = _PythonWrapper.TCPHeader_PSH_get
    if _newclass:
        PSH = _swig_property(_PythonWrapper.TCPHeader_PSH_get, _PythonWrapper.TCPHeader_PSH_set)
    __swig_setmethods__["RST"] = _PythonWrapper.TCPHeader_RST_set
    __swig_getmethods__["RST"] = _PythonWrapper.TCPHeader_RST_get
    if _newclass:
        RST = _swig_property(_PythonWrapper.TCPHeader_RST_get, _PythonWrapper.TCPHeader_RST_set)
    __swig_setmethods__["SYN"] = _PythonWrapper.TCPHeader_SYN_set
    __swig_getmethods__["SYN"] = _PythonWrapper.TCPHeader_SYN_get
    if _newclass:
        SYN = _swig_property(_PythonWrapper.TCPHeader_SYN_get, _PythonWrapper.TCPHeader_SYN_set)
    __swig_setmethods__["FIN"] = _PythonWrapper.TCPHeader_FIN_set
    __swig_getmethods__["FIN"] = _PythonWrapper.TCPHeader_FIN_get
    if _newclass:
        FIN = _swig_property(_PythonWrapper.TCPHeader_FIN_get, _PythonWrapper.TCPHeader_FIN_set)
    __swig_setmethods__["WindowSize"] = _PythonWrapper.TCPHeader_WindowSize_set
    __swig_getmethods__["WindowSize"] = _PythonWrapper.TCPHeader_WindowSize_get
    if _newclass:
        WindowSize = _swig_property(_PythonWrapper.TCPHeader_WindowSize_get, _PythonWrapper.TCPHeader_WindowSize_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.TCPHeader_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.TCPHeader_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.TCPHeader_Checksum_get, _PythonWrapper.TCPHeader_Checksum_set)
    __swig_setmethods__["UrgentPtr"] = _PythonWrapper.TCPHeader_UrgentPtr_set
    __swig_getmethods__["UrgentPtr"] = _PythonWrapper.TCPHeader_UrgentPtr_get
    if _newclass:
        UrgentPtr = _swig_property(_PythonWrapper.TCPHeader_UrgentPtr_get, _PythonWrapper.TCPHeader_UrgentPtr_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_TCPHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.TCPHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_TCPHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.TCPHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.TCPHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.TCPHeader_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.TCPHeader_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.TCPHeader_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.TCPHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.TCPHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.TCPHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.TCPHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.TCPHeader_GetElementToolTip(self)
TCPHeader_swigregister = _PythonWrapper.TCPHeader_swigregister
TCPHeader_swigregister(TCPHeader)

class TLV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TLV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TLV, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _PythonWrapper.TLV_Type_set
    __swig_getmethods__["Type"] = _PythonWrapper.TLV_Type_get
    if _newclass:
        Type = _swig_property(_PythonWrapper.TLV_Type_get, _PythonWrapper.TLV_Type_set)
    __swig_setmethods__["Length"] = _PythonWrapper.TLV_Length_set
    __swig_getmethods__["Length"] = _PythonWrapper.TLV_Length_get
    if _newclass:
        Length = _swig_property(_PythonWrapper.TLV_Length_get, _PythonWrapper.TLV_Length_set)
    __swig_setmethods__["Value"] = _PythonWrapper.TLV_Value_set
    __swig_getmethods__["Value"] = _PythonWrapper.TLV_Value_get
    if _newclass:
        Value = _swig_property(_PythonWrapper.TLV_Value_get, _PythonWrapper.TLV_Value_set)
    __swig_destroy__ = _PythonWrapper.delete_TLV
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _PythonWrapper.new_TLV(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.TLV_Clone(self)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.TLV_SetDefaultData(self, pktSize)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.TLV_GetElementFieldsNames(self, names)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.TLV_GetElementFieldsData(self, values)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.TLV_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.TLV_SetElementFieldsStringData(self, sDataVec)

    def GetElementSize(self):
        return _PythonWrapper.TLV_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.TLV_GetElementToolTip(self)

    def ToString(self):
        return _PythonWrapper.TLV_ToString(self)
TLV_swigregister = _PythonWrapper.TLV_swigregister
TLV_swigregister(TLV)

class TLV_CDP(TLV):
    __swig_setmethods__ = {}
    for _s in [TLV]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TLV_CDP, name, value)
    __swig_getmethods__ = {}
    for _s in [TLV]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TLV_CDP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_TLV_CDP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.TLV_CDP_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_TLV_CDP
    __del__ = lambda self: None
TLV_CDP_swigregister = _PythonWrapper.TLV_CDP_swigregister
TLV_CDP_swigregister(TLV_CDP)

class TLV_LLDP(TLV):
    __swig_setmethods__ = {}
    for _s in [TLV]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TLV_LLDP, name, value)
    __swig_getmethods__ = {}
    for _s in [TLV]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TLV_LLDP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PythonWrapper.new_TLV_LLDP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.TLV_LLDP_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_TLV_LLDP
    __del__ = lambda self: None
TLV_LLDP_swigregister = _PythonWrapper.TLV_LLDP_swigregister
TLV_LLDP_swigregister(TLV_LLDP)

class TRILL_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRILL_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRILL_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["V"] = _PythonWrapper.TRILL_Header_V_set
    __swig_getmethods__["V"] = _PythonWrapper.TRILL_Header_V_get
    if _newclass:
        V = _swig_property(_PythonWrapper.TRILL_Header_V_get, _PythonWrapper.TRILL_Header_V_set)
    __swig_setmethods__["R"] = _PythonWrapper.TRILL_Header_R_set
    __swig_getmethods__["R"] = _PythonWrapper.TRILL_Header_R_get
    if _newclass:
        R = _swig_property(_PythonWrapper.TRILL_Header_R_get, _PythonWrapper.TRILL_Header_R_set)
    __swig_setmethods__["M"] = _PythonWrapper.TRILL_Header_M_set
    __swig_getmethods__["M"] = _PythonWrapper.TRILL_Header_M_get
    if _newclass:
        M = _swig_property(_PythonWrapper.TRILL_Header_M_get, _PythonWrapper.TRILL_Header_M_set)
    __swig_setmethods__["OptionsLength"] = _PythonWrapper.TRILL_Header_OptionsLength_set
    __swig_getmethods__["OptionsLength"] = _PythonWrapper.TRILL_Header_OptionsLength_get
    if _newclass:
        OptionsLength = _swig_property(_PythonWrapper.TRILL_Header_OptionsLength_get, _PythonWrapper.TRILL_Header_OptionsLength_set)
    __swig_setmethods__["HopCount"] = _PythonWrapper.TRILL_Header_HopCount_set
    __swig_getmethods__["HopCount"] = _PythonWrapper.TRILL_Header_HopCount_get
    if _newclass:
        HopCount = _swig_property(_PythonWrapper.TRILL_Header_HopCount_get, _PythonWrapper.TRILL_Header_HopCount_set)
    __swig_setmethods__["EgressRBridgeNickname"] = _PythonWrapper.TRILL_Header_EgressRBridgeNickname_set
    __swig_getmethods__["EgressRBridgeNickname"] = _PythonWrapper.TRILL_Header_EgressRBridgeNickname_get
    if _newclass:
        EgressRBridgeNickname = _swig_property(_PythonWrapper.TRILL_Header_EgressRBridgeNickname_get, _PythonWrapper.TRILL_Header_EgressRBridgeNickname_set)
    __swig_setmethods__["IngressRBridgeNickname"] = _PythonWrapper.TRILL_Header_IngressRBridgeNickname_set
    __swig_getmethods__["IngressRBridgeNickname"] = _PythonWrapper.TRILL_Header_IngressRBridgeNickname_get
    if _newclass:
        IngressRBridgeNickname = _swig_property(_PythonWrapper.TRILL_Header_IngressRBridgeNickname_get, _PythonWrapper.TRILL_Header_IngressRBridgeNickname_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_TRILL_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.TRILL_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_TRILL_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.TRILL_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.TRILL_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.TRILL_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.TRILL_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.TRILL_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.TRILL_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.TRILL_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.TRILL_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.TRILL_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.TRILL_Header_GetElementToolTip(self)
TRILL_Header_swigregister = _PythonWrapper.TRILL_Header_swigregister
TRILL_Header_swigregister(TRILL_Header)

class TWAMP_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TWAMP_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TWAMP_Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SequenceNumber"] = _PythonWrapper.TWAMP_Header_SequenceNumber_set
    __swig_getmethods__["SequenceNumber"] = _PythonWrapper.TWAMP_Header_SequenceNumber_get
    if _newclass:
        SequenceNumber = _swig_property(_PythonWrapper.TWAMP_Header_SequenceNumber_get, _PythonWrapper.TWAMP_Header_SequenceNumber_set)
    __swig_setmethods__["TimestampIntPart"] = _PythonWrapper.TWAMP_Header_TimestampIntPart_set
    __swig_getmethods__["TimestampIntPart"] = _PythonWrapper.TWAMP_Header_TimestampIntPart_get
    if _newclass:
        TimestampIntPart = _swig_property(_PythonWrapper.TWAMP_Header_TimestampIntPart_get, _PythonWrapper.TWAMP_Header_TimestampIntPart_set)
    __swig_setmethods__["TimestampFraqPart"] = _PythonWrapper.TWAMP_Header_TimestampFraqPart_set
    __swig_getmethods__["TimestampFraqPart"] = _PythonWrapper.TWAMP_Header_TimestampFraqPart_get
    if _newclass:
        TimestampFraqPart = _swig_property(_PythonWrapper.TWAMP_Header_TimestampFraqPart_get, _PythonWrapper.TWAMP_Header_TimestampFraqPart_set)
    __swig_setmethods__["ErrorEstimate"] = _PythonWrapper.TWAMP_Header_ErrorEstimate_set
    __swig_getmethods__["ErrorEstimate"] = _PythonWrapper.TWAMP_Header_ErrorEstimate_get
    if _newclass:
        ErrorEstimate = _swig_property(_PythonWrapper.TWAMP_Header_ErrorEstimate_get, _PythonWrapper.TWAMP_Header_ErrorEstimate_set)
    __swig_setmethods__["MBZ_1"] = _PythonWrapper.TWAMP_Header_MBZ_1_set
    __swig_getmethods__["MBZ_1"] = _PythonWrapper.TWAMP_Header_MBZ_1_get
    if _newclass:
        MBZ_1 = _swig_property(_PythonWrapper.TWAMP_Header_MBZ_1_get, _PythonWrapper.TWAMP_Header_MBZ_1_set)
    __swig_setmethods__["ReceiveTimestampIntPart"] = _PythonWrapper.TWAMP_Header_ReceiveTimestampIntPart_set
    __swig_getmethods__["ReceiveTimestampIntPart"] = _PythonWrapper.TWAMP_Header_ReceiveTimestampIntPart_get
    if _newclass:
        ReceiveTimestampIntPart = _swig_property(_PythonWrapper.TWAMP_Header_ReceiveTimestampIntPart_get, _PythonWrapper.TWAMP_Header_ReceiveTimestampIntPart_set)
    __swig_setmethods__["ReceiveTimestampFraqPart"] = _PythonWrapper.TWAMP_Header_ReceiveTimestampFraqPart_set
    __swig_getmethods__["ReceiveTimestampFraqPart"] = _PythonWrapper.TWAMP_Header_ReceiveTimestampFraqPart_get
    if _newclass:
        ReceiveTimestampFraqPart = _swig_property(_PythonWrapper.TWAMP_Header_ReceiveTimestampFraqPart_get, _PythonWrapper.TWAMP_Header_ReceiveTimestampFraqPart_set)
    __swig_setmethods__["SenderSequenceNumber"] = _PythonWrapper.TWAMP_Header_SenderSequenceNumber_set
    __swig_getmethods__["SenderSequenceNumber"] = _PythonWrapper.TWAMP_Header_SenderSequenceNumber_get
    if _newclass:
        SenderSequenceNumber = _swig_property(_PythonWrapper.TWAMP_Header_SenderSequenceNumber_get, _PythonWrapper.TWAMP_Header_SenderSequenceNumber_set)
    __swig_setmethods__["SenderTimestampIntPart"] = _PythonWrapper.TWAMP_Header_SenderTimestampIntPart_set
    __swig_getmethods__["SenderTimestampIntPart"] = _PythonWrapper.TWAMP_Header_SenderTimestampIntPart_get
    if _newclass:
        SenderTimestampIntPart = _swig_property(_PythonWrapper.TWAMP_Header_SenderTimestampIntPart_get, _PythonWrapper.TWAMP_Header_SenderTimestampIntPart_set)
    __swig_setmethods__["SenderTimestampFraqPart"] = _PythonWrapper.TWAMP_Header_SenderTimestampFraqPart_set
    __swig_getmethods__["SenderTimestampFraqPart"] = _PythonWrapper.TWAMP_Header_SenderTimestampFraqPart_get
    if _newclass:
        SenderTimestampFraqPart = _swig_property(_PythonWrapper.TWAMP_Header_SenderTimestampFraqPart_get, _PythonWrapper.TWAMP_Header_SenderTimestampFraqPart_set)
    __swig_setmethods__["SenderErrorEstimate"] = _PythonWrapper.TWAMP_Header_SenderErrorEstimate_set
    __swig_getmethods__["SenderErrorEstimate"] = _PythonWrapper.TWAMP_Header_SenderErrorEstimate_get
    if _newclass:
        SenderErrorEstimate = _swig_property(_PythonWrapper.TWAMP_Header_SenderErrorEstimate_get, _PythonWrapper.TWAMP_Header_SenderErrorEstimate_set)
    __swig_setmethods__["MBZ_2"] = _PythonWrapper.TWAMP_Header_MBZ_2_set
    __swig_getmethods__["MBZ_2"] = _PythonWrapper.TWAMP_Header_MBZ_2_get
    if _newclass:
        MBZ_2 = _swig_property(_PythonWrapper.TWAMP_Header_MBZ_2_get, _PythonWrapper.TWAMP_Header_MBZ_2_set)
    __swig_setmethods__["SenderTTL"] = _PythonWrapper.TWAMP_Header_SenderTTL_set
    __swig_getmethods__["SenderTTL"] = _PythonWrapper.TWAMP_Header_SenderTTL_get
    if _newclass:
        SenderTTL = _swig_property(_PythonWrapper.TWAMP_Header_SenderTTL_get, _PythonWrapper.TWAMP_Header_SenderTTL_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_TWAMP_Header(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.TWAMP_Header_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_TWAMP_Header
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.TWAMP_Header_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.TWAMP_Header_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.TWAMP_Header_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.TWAMP_Header_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.TWAMP_Header_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.TWAMP_Header_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.TWAMP_Header_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.TWAMP_Header_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.TWAMP_Header_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.TWAMP_Header_GetElementToolTip(self)
TWAMP_Header_swigregister = _PythonWrapper.TWAMP_Header_swigregister
TWAMP_Header_swigregister(TWAMP_Header)

class UDPHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UDPHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UDPHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SrcPort"] = _PythonWrapper.UDPHeader_SrcPort_set
    __swig_getmethods__["SrcPort"] = _PythonWrapper.UDPHeader_SrcPort_get
    if _newclass:
        SrcPort = _swig_property(_PythonWrapper.UDPHeader_SrcPort_get, _PythonWrapper.UDPHeader_SrcPort_set)
    __swig_setmethods__["DestPort"] = _PythonWrapper.UDPHeader_DestPort_set
    __swig_getmethods__["DestPort"] = _PythonWrapper.UDPHeader_DestPort_get
    if _newclass:
        DestPort = _swig_property(_PythonWrapper.UDPHeader_DestPort_get, _PythonWrapper.UDPHeader_DestPort_set)
    __swig_setmethods__["TotalLength"] = _PythonWrapper.UDPHeader_TotalLength_set
    __swig_getmethods__["TotalLength"] = _PythonWrapper.UDPHeader_TotalLength_get
    if _newclass:
        TotalLength = _swig_property(_PythonWrapper.UDPHeader_TotalLength_get, _PythonWrapper.UDPHeader_TotalLength_set)
    __swig_setmethods__["Checksum"] = _PythonWrapper.UDPHeader_Checksum_set
    __swig_getmethods__["Checksum"] = _PythonWrapper.UDPHeader_Checksum_get
    if _newclass:
        Checksum = _swig_property(_PythonWrapper.UDPHeader_Checksum_get, _PythonWrapper.UDPHeader_Checksum_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_UDPHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.UDPHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_UDPHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.UDPHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.UDPHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.UDPHeader_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.UDPHeader_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.UDPHeader_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.UDPHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.UDPHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.UDPHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.UDPHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.UDPHeader_GetElementToolTip(self)
UDPHeader_swigregister = _PythonWrapper.UDPHeader_swigregister
UDPHeader_swigregister(UDPHeader)

class VLAN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VLAN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VLAN, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _PythonWrapper.VLAN_Type_set
    __swig_getmethods__["Type"] = _PythonWrapper.VLAN_Type_get
    if _newclass:
        Type = _swig_property(_PythonWrapper.VLAN_Type_get, _PythonWrapper.VLAN_Type_set)
    __swig_setmethods__["priority"] = _PythonWrapper.VLAN_priority_set
    __swig_getmethods__["priority"] = _PythonWrapper.VLAN_priority_get
    if _newclass:
        priority = _swig_property(_PythonWrapper.VLAN_priority_get, _PythonWrapper.VLAN_priority_set)
    __swig_setmethods__["CFI"] = _PythonWrapper.VLAN_CFI_set
    __swig_getmethods__["CFI"] = _PythonWrapper.VLAN_CFI_get
    if _newclass:
        CFI = _swig_property(_PythonWrapper.VLAN_CFI_get, _PythonWrapper.VLAN_CFI_set)
    __swig_setmethods__["VlanID"] = _PythonWrapper.VLAN_VlanID_set
    __swig_getmethods__["VlanID"] = _PythonWrapper.VLAN_VlanID_get
    if _newclass:
        VlanID = _swig_property(_PythonWrapper.VLAN_VlanID_get, _PythonWrapper.VLAN_VlanID_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_VLAN(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.VLAN_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_VLAN
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.VLAN_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.VLAN_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.VLAN_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.VLAN_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.VLAN_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.VLAN_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.VLAN_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.VLAN_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.VLAN_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.VLAN_GetElementToolTip(self)
VLAN_swigregister = _PythonWrapper.VLAN_swigregister
VLAN_swigregister(VLAN)

class VXLANHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VXLANHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VXLANHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["R1"] = _PythonWrapper.VXLANHeader_R1_set
    __swig_getmethods__["R1"] = _PythonWrapper.VXLANHeader_R1_get
    if _newclass:
        R1 = _swig_property(_PythonWrapper.VXLANHeader_R1_get, _PythonWrapper.VXLANHeader_R1_set)
    __swig_setmethods__["R2"] = _PythonWrapper.VXLANHeader_R2_set
    __swig_getmethods__["R2"] = _PythonWrapper.VXLANHeader_R2_get
    if _newclass:
        R2 = _swig_property(_PythonWrapper.VXLANHeader_R2_get, _PythonWrapper.VXLANHeader_R2_set)
    __swig_setmethods__["R3"] = _PythonWrapper.VXLANHeader_R3_set
    __swig_getmethods__["R3"] = _PythonWrapper.VXLANHeader_R3_get
    if _newclass:
        R3 = _swig_property(_PythonWrapper.VXLANHeader_R3_get, _PythonWrapper.VXLANHeader_R3_set)
    __swig_setmethods__["R4"] = _PythonWrapper.VXLANHeader_R4_set
    __swig_getmethods__["R4"] = _PythonWrapper.VXLANHeader_R4_get
    if _newclass:
        R4 = _swig_property(_PythonWrapper.VXLANHeader_R4_get, _PythonWrapper.VXLANHeader_R4_set)
    __swig_setmethods__["I"] = _PythonWrapper.VXLANHeader_I_set
    __swig_getmethods__["I"] = _PythonWrapper.VXLANHeader_I_get
    if _newclass:
        I = _swig_property(_PythonWrapper.VXLANHeader_I_get, _PythonWrapper.VXLANHeader_I_set)
    __swig_setmethods__["R5"] = _PythonWrapper.VXLANHeader_R5_set
    __swig_getmethods__["R5"] = _PythonWrapper.VXLANHeader_R5_get
    if _newclass:
        R5 = _swig_property(_PythonWrapper.VXLANHeader_R5_get, _PythonWrapper.VXLANHeader_R5_set)
    __swig_setmethods__["R6"] = _PythonWrapper.VXLANHeader_R6_set
    __swig_getmethods__["R6"] = _PythonWrapper.VXLANHeader_R6_get
    if _newclass:
        R6 = _swig_property(_PythonWrapper.VXLANHeader_R6_get, _PythonWrapper.VXLANHeader_R6_set)
    __swig_setmethods__["R7"] = _PythonWrapper.VXLANHeader_R7_set
    __swig_getmethods__["R7"] = _PythonWrapper.VXLANHeader_R7_get
    if _newclass:
        R7 = _swig_property(_PythonWrapper.VXLANHeader_R7_get, _PythonWrapper.VXLANHeader_R7_set)
    __swig_setmethods__["Reserved1"] = _PythonWrapper.VXLANHeader_Reserved1_set
    __swig_getmethods__["Reserved1"] = _PythonWrapper.VXLANHeader_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_PythonWrapper.VXLANHeader_Reserved1_get, _PythonWrapper.VXLANHeader_Reserved1_set)
    __swig_setmethods__["VNI"] = _PythonWrapper.VXLANHeader_VNI_set
    __swig_getmethods__["VNI"] = _PythonWrapper.VXLANHeader_VNI_get
    if _newclass:
        VNI = _swig_property(_PythonWrapper.VXLANHeader_VNI_get, _PythonWrapper.VXLANHeader_VNI_set)
    __swig_setmethods__["Reserved2"] = _PythonWrapper.VXLANHeader_Reserved2_set
    __swig_getmethods__["Reserved2"] = _PythonWrapper.VXLANHeader_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_PythonWrapper.VXLANHeader_Reserved2_get, _PythonWrapper.VXLANHeader_Reserved2_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_VXLANHeader(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def Clone(self):
        return _PythonWrapper.VXLANHeader_Clone(self)
    __swig_destroy__ = _PythonWrapper.delete_VXLANHeader
    __del__ = lambda self: None

    def UpdateStructFields(self):
        return _PythonWrapper.VXLANHeader_UpdateStructFields(self)

    def FillNativeData(self, pktSize, bUseDefaultValues):
        return _PythonWrapper.VXLANHeader_FillNativeData(self, pktSize, bUseDefaultValues)

    def SetDefaultData(self, pktSize=0):
        return _PythonWrapper.VXLANHeader_SetDefaultData(self, pktSize)

    def ResetAutomaticFields(self):
        return _PythonWrapper.VXLANHeader_ResetAutomaticFields(self)

    def ToString(self):
        return _PythonWrapper.VXLANHeader_ToString(self)

    def GetElementFieldsNames(self, names):
        return _PythonWrapper.VXLANHeader_GetElementFieldsNames(self, names)

    def SetElementFieldsStringData(self, sDataVec):
        return _PythonWrapper.VXLANHeader_SetElementFieldsStringData(self, sDataVec)

    def GetElementFieldsData(self, values):
        return _PythonWrapper.VXLANHeader_GetElementFieldsData(self, values)

    def GetElementSize(self):
        return _PythonWrapper.VXLANHeader_GetElementSize(self)

    def GetElementToolTip(self):
        return _PythonWrapper.VXLANHeader_GetElementToolTip(self)
VXLANHeader_swigregister = _PythonWrapper.VXLANHeader_swigregister
VXLANHeader_swigregister(VXLANHeader)

class V2(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_mac_get, _PythonWrapper.V2_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_ethType_get, _PythonWrapper.V2_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_payload_get, _PythonWrapper.V2_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2
    __del__ = lambda self: None
V2_swigregister = _PythonWrapper.V2_swigregister
V2_swigregister(V2)

class V2Vlan(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2Vlan_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2Vlan_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2Vlan_mac_get, _PythonWrapper.V2Vlan_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.V2Vlan_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.V2Vlan_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.V2Vlan_vlan_get, _PythonWrapper.V2Vlan_vlan_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2Vlan_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2Vlan_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2Vlan_ethType_get, _PythonWrapper.V2Vlan_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_payload_get, _PythonWrapper.V2Vlan_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan
    __del__ = lambda self: None
V2Vlan_swigregister = _PythonWrapper.V2Vlan_swigregister
V2Vlan_swigregister(V2Vlan)

class V2QinQ(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2QinQ, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2QinQ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2QinQ_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2QinQ_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2QinQ_mac_get, _PythonWrapper.V2QinQ_mac_set)
    __swig_setmethods__["service_vlan"] = _PythonWrapper.V2QinQ_service_vlan_set
    __swig_getmethods__["service_vlan"] = _PythonWrapper.V2QinQ_service_vlan_get
    if _newclass:
        service_vlan = _swig_property(_PythonWrapper.V2QinQ_service_vlan_get, _PythonWrapper.V2QinQ_service_vlan_set)
    __swig_setmethods__["customer_vlan"] = _PythonWrapper.V2QinQ_customer_vlan_set
    __swig_getmethods__["customer_vlan"] = _PythonWrapper.V2QinQ_customer_vlan_get
    if _newclass:
        customer_vlan = _swig_property(_PythonWrapper.V2QinQ_customer_vlan_get, _PythonWrapper.V2QinQ_customer_vlan_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2QinQ_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2QinQ_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2QinQ_ethType_get, _PythonWrapper.V2QinQ_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2QinQ_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2QinQ_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2QinQ_payload_get, _PythonWrapper.V2QinQ_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2QinQ(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2QinQ_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2QinQ_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2QinQ_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2QinQ_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2QinQ_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2QinQ
    __del__ = lambda self: None
V2QinQ_swigregister = _PythonWrapper.V2QinQ_swigregister
V2QinQ_swigregister(V2QinQ)

class V2_ARP(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_ARP, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_ARP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_ARP_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_ARP_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_ARP_mac_get, _PythonWrapper.V2_ARP_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_ARP_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_ARP_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_ARP_ethType_get, _PythonWrapper.V2_ARP_ethType_set)
    __swig_setmethods__["arp"] = _PythonWrapper.V2_ARP_arp_set
    __swig_getmethods__["arp"] = _PythonWrapper.V2_ARP_arp_get
    if _newclass:
        arp = _swig_property(_PythonWrapper.V2_ARP_arp_get, _PythonWrapper.V2_ARP_arp_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_ARP_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_ARP_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_ARP_payload_get, _PythonWrapper.V2_ARP_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_ARP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_ARP_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_ARP_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_ARP_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_ARP_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_ARP_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_ARP
    __del__ = lambda self: None
V2_ARP_swigregister = _PythonWrapper.V2_ARP_swigregister
V2_ARP_swigregister(V2_ARP)

class V2Vlan_ARP(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_ARP, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_ARP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2Vlan_ARP_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2Vlan_ARP_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2Vlan_ARP_mac_get, _PythonWrapper.V2Vlan_ARP_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.V2Vlan_ARP_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.V2Vlan_ARP_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.V2Vlan_ARP_vlan_get, _PythonWrapper.V2Vlan_ARP_vlan_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2Vlan_ARP_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2Vlan_ARP_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2Vlan_ARP_ethType_get, _PythonWrapper.V2Vlan_ARP_ethType_set)
    __swig_setmethods__["arp"] = _PythonWrapper.V2Vlan_ARP_arp_set
    __swig_getmethods__["arp"] = _PythonWrapper.V2Vlan_ARP_arp_get
    if _newclass:
        arp = _swig_property(_PythonWrapper.V2Vlan_ARP_arp_get, _PythonWrapper.V2Vlan_ARP_arp_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_ARP_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_ARP_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_ARP_payload_get, _PythonWrapper.V2Vlan_ARP_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_ARP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_ARP_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_ARP_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_ARP_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_ARP_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_ARP_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_ARP
    __del__ = lambda self: None
V2Vlan_ARP_swigregister = _PythonWrapper.V2Vlan_ARP_swigregister
V2Vlan_ARP_swigregister(V2Vlan_ARP)

class V2_MPLS1L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_MPLS1L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_MPLS1L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_MPLS1L_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_MPLS1L_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_MPLS1L_mac_get, _PythonWrapper.V2_MPLS1L_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_MPLS1L_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_MPLS1L_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_MPLS1L_ethType_get, _PythonWrapper.V2_MPLS1L_ethType_set)
    __swig_setmethods__["mpls1"] = _PythonWrapper.V2_MPLS1L_mpls1_set
    __swig_getmethods__["mpls1"] = _PythonWrapper.V2_MPLS1L_mpls1_get
    if _newclass:
        mpls1 = _swig_property(_PythonWrapper.V2_MPLS1L_mpls1_get, _PythonWrapper.V2_MPLS1L_mpls1_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_MPLS1L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_MPLS1L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_MPLS1L_payload_get, _PythonWrapper.V2_MPLS1L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_MPLS1L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_MPLS1L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_MPLS1L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_MPLS1L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_MPLS1L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_MPLS1L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_MPLS1L
    __del__ = lambda self: None
V2_MPLS1L_swigregister = _PythonWrapper.V2_MPLS1L_swigregister
V2_MPLS1L_swigregister(V2_MPLS1L)

class V2_MPLS2L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_MPLS2L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_MPLS2L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_MPLS2L_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_MPLS2L_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_MPLS2L_mac_get, _PythonWrapper.V2_MPLS2L_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_MPLS2L_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_MPLS2L_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_MPLS2L_ethType_get, _PythonWrapper.V2_MPLS2L_ethType_set)
    __swig_setmethods__["mpls1"] = _PythonWrapper.V2_MPLS2L_mpls1_set
    __swig_getmethods__["mpls1"] = _PythonWrapper.V2_MPLS2L_mpls1_get
    if _newclass:
        mpls1 = _swig_property(_PythonWrapper.V2_MPLS2L_mpls1_get, _PythonWrapper.V2_MPLS2L_mpls1_set)
    __swig_setmethods__["mpls2"] = _PythonWrapper.V2_MPLS2L_mpls2_set
    __swig_getmethods__["mpls2"] = _PythonWrapper.V2_MPLS2L_mpls2_get
    if _newclass:
        mpls2 = _swig_property(_PythonWrapper.V2_MPLS2L_mpls2_get, _PythonWrapper.V2_MPLS2L_mpls2_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_MPLS2L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_MPLS2L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_MPLS2L_payload_get, _PythonWrapper.V2_MPLS2L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_MPLS2L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_MPLS2L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_MPLS2L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_MPLS2L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_MPLS2L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_MPLS2L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_MPLS2L
    __del__ = lambda self: None
V2_MPLS2L_swigregister = _PythonWrapper.V2_MPLS2L_swigregister
V2_MPLS2L_swigregister(V2_MPLS2L)

class V2Vlan_MPLS1L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_MPLS1L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_MPLS1L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2Vlan_MPLS1L_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2Vlan_MPLS1L_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2Vlan_MPLS1L_mac_get, _PythonWrapper.V2Vlan_MPLS1L_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.V2Vlan_MPLS1L_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.V2Vlan_MPLS1L_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.V2Vlan_MPLS1L_vlan_get, _PythonWrapper.V2Vlan_MPLS1L_vlan_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2Vlan_MPLS1L_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2Vlan_MPLS1L_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2Vlan_MPLS1L_ethType_get, _PythonWrapper.V2Vlan_MPLS1L_ethType_set)
    __swig_setmethods__["mpls1"] = _PythonWrapper.V2Vlan_MPLS1L_mpls1_set
    __swig_getmethods__["mpls1"] = _PythonWrapper.V2Vlan_MPLS1L_mpls1_get
    if _newclass:
        mpls1 = _swig_property(_PythonWrapper.V2Vlan_MPLS1L_mpls1_get, _PythonWrapper.V2Vlan_MPLS1L_mpls1_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_MPLS1L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_MPLS1L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_MPLS1L_payload_get, _PythonWrapper.V2Vlan_MPLS1L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_MPLS1L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_MPLS1L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_MPLS1L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_MPLS1L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_MPLS1L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_MPLS1L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_MPLS1L
    __del__ = lambda self: None
V2Vlan_MPLS1L_swigregister = _PythonWrapper.V2Vlan_MPLS1L_swigregister
V2Vlan_MPLS1L_swigregister(V2Vlan_MPLS1L)

class V2Vlan_MPLS2L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_MPLS2L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_MPLS2L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2Vlan_MPLS2L_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2Vlan_MPLS2L_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2Vlan_MPLS2L_mac_get, _PythonWrapper.V2Vlan_MPLS2L_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.V2Vlan_MPLS2L_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.V2Vlan_MPLS2L_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.V2Vlan_MPLS2L_vlan_get, _PythonWrapper.V2Vlan_MPLS2L_vlan_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2Vlan_MPLS2L_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2Vlan_MPLS2L_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2Vlan_MPLS2L_ethType_get, _PythonWrapper.V2Vlan_MPLS2L_ethType_set)
    __swig_setmethods__["mpls1"] = _PythonWrapper.V2Vlan_MPLS2L_mpls1_set
    __swig_getmethods__["mpls1"] = _PythonWrapper.V2Vlan_MPLS2L_mpls1_get
    if _newclass:
        mpls1 = _swig_property(_PythonWrapper.V2Vlan_MPLS2L_mpls1_get, _PythonWrapper.V2Vlan_MPLS2L_mpls1_set)
    __swig_setmethods__["mpls2"] = _PythonWrapper.V2Vlan_MPLS2L_mpls2_set
    __swig_getmethods__["mpls2"] = _PythonWrapper.V2Vlan_MPLS2L_mpls2_get
    if _newclass:
        mpls2 = _swig_property(_PythonWrapper.V2Vlan_MPLS2L_mpls2_get, _PythonWrapper.V2Vlan_MPLS2L_mpls2_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_MPLS2L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_MPLS2L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_MPLS2L_payload_get, _PythonWrapper.V2Vlan_MPLS2L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_MPLS2L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_MPLS2L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_MPLS2L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_MPLS2L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_MPLS2L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_MPLS2L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_MPLS2L
    __del__ = lambda self: None
V2Vlan_MPLS2L_swigregister = _PythonWrapper.V2Vlan_MPLS2L_swigregister
V2Vlan_MPLS2L_swigregister(V2Vlan_MPLS2L)

class V2_IPv4(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IPv4, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IPv4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IPv4_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IPv4_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IPv4_mac_get, _PythonWrapper.V2_IPv4_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IPv4_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IPv4_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IPv4_ethType_get, _PythonWrapper.V2_IPv4_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2_IPv4_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2_IPv4_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2_IPv4_ipv4_get, _PythonWrapper.V2_IPv4_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IPv4_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IPv4_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IPv4_payload_get, _PythonWrapper.V2_IPv4_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IPv4(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IPv4_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IPv4_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IPv4_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IPv4_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IPv4_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IPv4
    __del__ = lambda self: None
V2_IPv4_swigregister = _PythonWrapper.V2_IPv4_swigregister
V2_IPv4_swigregister(V2_IPv4)

class V2Vlan_IPv4(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_IPv4, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_IPv4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2Vlan_IPv4_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2Vlan_IPv4_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2Vlan_IPv4_mac_get, _PythonWrapper.V2Vlan_IPv4_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.V2Vlan_IPv4_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.V2Vlan_IPv4_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.V2Vlan_IPv4_vlan_get, _PythonWrapper.V2Vlan_IPv4_vlan_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2Vlan_IPv4_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2Vlan_IPv4_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2Vlan_IPv4_ethType_get, _PythonWrapper.V2Vlan_IPv4_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2Vlan_IPv4_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2Vlan_IPv4_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2Vlan_IPv4_ipv4_get, _PythonWrapper.V2Vlan_IPv4_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_IPv4_payload_get, _PythonWrapper.V2Vlan_IPv4_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_IPv4(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_IPv4_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_IPv4_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_IPv4_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_IPv4
    __del__ = lambda self: None
V2Vlan_IPv4_swigregister = _PythonWrapper.V2Vlan_IPv4_swigregister
V2Vlan_IPv4_swigregister(V2Vlan_IPv4)

class V2_IPv6(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IPv6, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IPv6, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IPv6_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IPv6_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IPv6_mac_get, _PythonWrapper.V2_IPv6_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IPv6_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IPv6_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IPv6_ethType_get, _PythonWrapper.V2_IPv6_ethType_set)
    __swig_setmethods__["ipv6"] = _PythonWrapper.V2_IPv6_ipv6_set
    __swig_getmethods__["ipv6"] = _PythonWrapper.V2_IPv6_ipv6_get
    if _newclass:
        ipv6 = _swig_property(_PythonWrapper.V2_IPv6_ipv6_get, _PythonWrapper.V2_IPv6_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IPv6_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IPv6_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IPv6_payload_get, _PythonWrapper.V2_IPv6_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IPv6(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IPv6_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IPv6_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IPv6_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IPv6_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IPv6_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IPv6
    __del__ = lambda self: None
V2_IPv6_swigregister = _PythonWrapper.V2_IPv6_swigregister
V2_IPv6_swigregister(V2_IPv6)

class V2Vlan_IPv6(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_IPv6, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_IPv6, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2Vlan_IPv6_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2Vlan_IPv6_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2Vlan_IPv6_mac_get, _PythonWrapper.V2Vlan_IPv6_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.V2Vlan_IPv6_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.V2Vlan_IPv6_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.V2Vlan_IPv6_vlan_get, _PythonWrapper.V2Vlan_IPv6_vlan_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2Vlan_IPv6_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2Vlan_IPv6_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2Vlan_IPv6_ethType_get, _PythonWrapper.V2Vlan_IPv6_ethType_set)
    __swig_setmethods__["ipv6"] = _PythonWrapper.V2Vlan_IPv6_ipv6_set
    __swig_getmethods__["ipv6"] = _PythonWrapper.V2Vlan_IPv6_ipv6_get
    if _newclass:
        ipv6 = _swig_property(_PythonWrapper.V2Vlan_IPv6_ipv6_get, _PythonWrapper.V2Vlan_IPv6_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_IPv6_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_IPv6_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_IPv6_payload_get, _PythonWrapper.V2Vlan_IPv6_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_IPv6(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_IPv6_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_IPv6_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_IPv6_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_IPv6_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_IPv6_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_IPv6
    __del__ = lambda self: None
V2Vlan_IPv6_swigregister = _PythonWrapper.V2Vlan_IPv6_swigregister
V2Vlan_IPv6_swigregister(V2Vlan_IPv6)

class V2_IPv4_TCP(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IPv4_TCP, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IPv4_TCP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IPv4_TCP_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IPv4_TCP_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IPv4_TCP_mac_get, _PythonWrapper.V2_IPv4_TCP_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IPv4_TCP_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IPv4_TCP_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IPv4_TCP_ethType_get, _PythonWrapper.V2_IPv4_TCP_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2_IPv4_TCP_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2_IPv4_TCP_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2_IPv4_TCP_ipv4_get, _PythonWrapper.V2_IPv4_TCP_ipv4_set)
    __swig_setmethods__["tcp"] = _PythonWrapper.V2_IPv4_TCP_tcp_set
    __swig_getmethods__["tcp"] = _PythonWrapper.V2_IPv4_TCP_tcp_get
    if _newclass:
        tcp = _swig_property(_PythonWrapper.V2_IPv4_TCP_tcp_get, _PythonWrapper.V2_IPv4_TCP_tcp_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IPv4_TCP_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IPv4_TCP_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IPv4_TCP_payload_get, _PythonWrapper.V2_IPv4_TCP_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IPv4_TCP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IPv4_TCP_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IPv4_TCP_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IPv4_TCP_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IPv4_TCP_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IPv4_TCP_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IPv4_TCP
    __del__ = lambda self: None
V2_IPv4_TCP_swigregister = _PythonWrapper.V2_IPv4_TCP_swigregister
V2_IPv4_TCP_swigregister(V2_IPv4_TCP)

class V2Vlan_IPv4_TCP(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_IPv4_TCP, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_IPv4_TCP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2Vlan_IPv4_TCP_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2Vlan_IPv4_TCP_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2Vlan_IPv4_TCP_mac_get, _PythonWrapper.V2Vlan_IPv4_TCP_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.V2Vlan_IPv4_TCP_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.V2Vlan_IPv4_TCP_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.V2Vlan_IPv4_TCP_vlan_get, _PythonWrapper.V2Vlan_IPv4_TCP_vlan_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2Vlan_IPv4_TCP_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2Vlan_IPv4_TCP_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2Vlan_IPv4_TCP_ethType_get, _PythonWrapper.V2Vlan_IPv4_TCP_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2Vlan_IPv4_TCP_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2Vlan_IPv4_TCP_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2Vlan_IPv4_TCP_ipv4_get, _PythonWrapper.V2Vlan_IPv4_TCP_ipv4_set)
    __swig_setmethods__["tcp"] = _PythonWrapper.V2Vlan_IPv4_TCP_tcp_set
    __swig_getmethods__["tcp"] = _PythonWrapper.V2Vlan_IPv4_TCP_tcp_get
    if _newclass:
        tcp = _swig_property(_PythonWrapper.V2Vlan_IPv4_TCP_tcp_get, _PythonWrapper.V2Vlan_IPv4_TCP_tcp_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_TCP_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_TCP_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_IPv4_TCP_payload_get, _PythonWrapper.V2Vlan_IPv4_TCP_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_IPv4_TCP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_IPv4_TCP_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_IPv4_TCP_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_IPv4_TCP_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_TCP_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_TCP_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_IPv4_TCP
    __del__ = lambda self: None
V2Vlan_IPv4_TCP_swigregister = _PythonWrapper.V2Vlan_IPv4_TCP_swigregister
V2Vlan_IPv4_TCP_swigregister(V2Vlan_IPv4_TCP)

class V2_IPv4_UDP(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IPv4_UDP, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IPv4_UDP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IPv4_UDP_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IPv4_UDP_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IPv4_UDP_mac_get, _PythonWrapper.V2_IPv4_UDP_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IPv4_UDP_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IPv4_UDP_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IPv4_UDP_ethType_get, _PythonWrapper.V2_IPv4_UDP_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2_IPv4_UDP_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2_IPv4_UDP_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2_IPv4_UDP_ipv4_get, _PythonWrapper.V2_IPv4_UDP_ipv4_set)
    __swig_setmethods__["udp"] = _PythonWrapper.V2_IPv4_UDP_udp_set
    __swig_getmethods__["udp"] = _PythonWrapper.V2_IPv4_UDP_udp_get
    if _newclass:
        udp = _swig_property(_PythonWrapper.V2_IPv4_UDP_udp_get, _PythonWrapper.V2_IPv4_UDP_udp_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IPv4_UDP_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IPv4_UDP_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IPv4_UDP_payload_get, _PythonWrapper.V2_IPv4_UDP_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IPv4_UDP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IPv4_UDP_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IPv4_UDP_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IPv4_UDP_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IPv4_UDP_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IPv4_UDP_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IPv4_UDP
    __del__ = lambda self: None
V2_IPv4_UDP_swigregister = _PythonWrapper.V2_IPv4_UDP_swigregister
V2_IPv4_UDP_swigregister(V2_IPv4_UDP)

class V2Vlan_IPv4_UDP(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_IPv4_UDP, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_IPv4_UDP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2Vlan_IPv4_UDP_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2Vlan_IPv4_UDP_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2Vlan_IPv4_UDP_mac_get, _PythonWrapper.V2Vlan_IPv4_UDP_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.V2Vlan_IPv4_UDP_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.V2Vlan_IPv4_UDP_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.V2Vlan_IPv4_UDP_vlan_get, _PythonWrapper.V2Vlan_IPv4_UDP_vlan_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2Vlan_IPv4_UDP_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2Vlan_IPv4_UDP_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2Vlan_IPv4_UDP_ethType_get, _PythonWrapper.V2Vlan_IPv4_UDP_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2Vlan_IPv4_UDP_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2Vlan_IPv4_UDP_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2Vlan_IPv4_UDP_ipv4_get, _PythonWrapper.V2Vlan_IPv4_UDP_ipv4_set)
    __swig_setmethods__["udp"] = _PythonWrapper.V2Vlan_IPv4_UDP_udp_set
    __swig_getmethods__["udp"] = _PythonWrapper.V2Vlan_IPv4_UDP_udp_get
    if _newclass:
        udp = _swig_property(_PythonWrapper.V2Vlan_IPv4_UDP_udp_get, _PythonWrapper.V2Vlan_IPv4_UDP_udp_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_UDP_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_UDP_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_IPv4_UDP_payload_get, _PythonWrapper.V2Vlan_IPv4_UDP_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_IPv4_UDP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_IPv4_UDP_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_IPv4_UDP_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_IPv4_UDP_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_UDP_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_UDP_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_IPv4_UDP
    __del__ = lambda self: None
V2Vlan_IPv4_UDP_swigregister = _PythonWrapper.V2Vlan_IPv4_UDP_swigregister
V2Vlan_IPv4_UDP_swigregister(V2Vlan_IPv4_UDP)

class IPv4_o_V2_IPv4(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4_o_V2_IPv4, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4_o_V2_IPv4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2_IPv4_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2_IPv4_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4_tunnel_mac_get, _PythonWrapper.IPv4_o_V2_IPv4_tunnel_mac_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2_IPv4_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2_IPv4_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4_tunnel_ethType_get, _PythonWrapper.IPv4_o_V2_IPv4_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.IPv4_o_V2_IPv4_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.IPv4_o_V2_IPv4_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4_tunnel_ipv4_get, _PythonWrapper.IPv4_o_V2_IPv4_tunnel_ipv4_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2_IPv4_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2_IPv4_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4_passenger_ipv4_get, _PythonWrapper.IPv4_o_V2_IPv4_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv4_o_V2_IPv4_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv4_o_V2_IPv4_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4_payload_get, _PythonWrapper.IPv4_o_V2_IPv4_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4_o_V2_IPv4(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv4_o_V2_IPv4_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv4_o_V2_IPv4_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv4_o_V2_IPv4_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv4_o_V2_IPv4_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv4_o_V2_IPv4_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv4_o_V2_IPv4
    __del__ = lambda self: None
IPv4_o_V2_IPv4_swigregister = _PythonWrapper.IPv4_o_V2_IPv4_swigregister
IPv4_o_V2_IPv4_swigregister(IPv4_o_V2_IPv4)

class IPv4_o_V2Vlan_IPv4(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4_o_V2Vlan_IPv4, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4_o_V2Vlan_IPv4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_mac_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_vlan_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_ethType_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_ipv4_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4_tunnel_ipv4_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4_passenger_ipv4_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4_payload_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4_o_V2Vlan_IPv4(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv4_o_V2Vlan_IPv4
    __del__ = lambda self: None
IPv4_o_V2Vlan_IPv4_swigregister = _PythonWrapper.IPv4_o_V2Vlan_IPv4_swigregister
IPv4_o_V2Vlan_IPv4_swigregister(IPv4_o_V2Vlan_IPv4)

class IPv4_o_V2_IPv4GRE(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4_o_V2_IPv4GRE, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4_o_V2_IPv4GRE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_mac_get, _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_mac_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_ethType_get, _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_ipv4_get, _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_ipv4_set)
    __swig_setmethods__["tunnel_gre"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_gre_set
    __swig_getmethods__["tunnel_gre"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_gre_get
    if _newclass:
        tunnel_gre = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_gre_get, _PythonWrapper.IPv4_o_V2_IPv4GRE_tunnel_gre_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4GRE_passenger_ipv4_get, _PythonWrapper.IPv4_o_V2_IPv4GRE_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv4_o_V2_IPv4GRE_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv4_o_V2_IPv4GRE_payload_get, _PythonWrapper.IPv4_o_V2_IPv4GRE_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4_o_V2_IPv4GRE(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv4_o_V2_IPv4GRE_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv4_o_V2_IPv4GRE_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv4_o_V2_IPv4GRE_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv4_o_V2_IPv4GRE_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv4_o_V2_IPv4GRE_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv4_o_V2_IPv4GRE
    __del__ = lambda self: None
IPv4_o_V2_IPv4GRE_swigregister = _PythonWrapper.IPv4_o_V2_IPv4GRE_swigregister
IPv4_o_V2_IPv4GRE_swigregister(IPv4_o_V2_IPv4GRE)

class IPv4_o_V2Vlan_IPv4GRE(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4_o_V2Vlan_IPv4GRE, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4_o_V2Vlan_IPv4GRE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_mac_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_vlan_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_ethType_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_ipv4_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_ipv4_set)
    __swig_setmethods__["tunnel_gre"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_gre_set
    __swig_getmethods__["tunnel_gre"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_gre_get
    if _newclass:
        tunnel_gre = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_gre_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_tunnel_gre_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_passenger_ipv4_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_payload_get, _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4_o_V2Vlan_IPv4GRE(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv4_o_V2Vlan_IPv4GRE
    __del__ = lambda self: None
IPv4_o_V2Vlan_IPv4GRE_swigregister = _PythonWrapper.IPv4_o_V2Vlan_IPv4GRE_swigregister
IPv4_o_V2Vlan_IPv4GRE_swigregister(IPv4_o_V2Vlan_IPv4GRE)

class IPv6_o_V2_IPv4(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6_o_V2_IPv4, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6_o_V2_IPv4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2_IPv4_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2_IPv4_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4_tunnel_mac_get, _PythonWrapper.IPv6_o_V2_IPv4_tunnel_mac_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2_IPv4_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2_IPv4_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4_tunnel_ethType_get, _PythonWrapper.IPv6_o_V2_IPv4_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.IPv6_o_V2_IPv4_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.IPv6_o_V2_IPv4_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4_tunnel_ipv4_get, _PythonWrapper.IPv6_o_V2_IPv4_tunnel_ipv4_set)
    __swig_setmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2_IPv4_passenger_ipv6_set
    __swig_getmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2_IPv4_passenger_ipv6_get
    if _newclass:
        passenger_ipv6 = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4_passenger_ipv6_get, _PythonWrapper.IPv6_o_V2_IPv4_passenger_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv6_o_V2_IPv4_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv6_o_V2_IPv4_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4_payload_get, _PythonWrapper.IPv6_o_V2_IPv4_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6_o_V2_IPv4(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv6_o_V2_IPv4_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv6_o_V2_IPv4_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv6_o_V2_IPv4_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv6_o_V2_IPv4_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv6_o_V2_IPv4_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv6_o_V2_IPv4
    __del__ = lambda self: None
IPv6_o_V2_IPv4_swigregister = _PythonWrapper.IPv6_o_V2_IPv4_swigregister
IPv6_o_V2_IPv4_swigregister(IPv6_o_V2_IPv4)

class IPv6_o_V2Vlan_IPv4(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6_o_V2Vlan_IPv4, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6_o_V2Vlan_IPv4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_mac_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_vlan_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_ethType_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_ipv4_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4_tunnel_ipv4_set)
    __swig_setmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_passenger_ipv6_set
    __swig_getmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_passenger_ipv6_get
    if _newclass:
        passenger_ipv6 = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4_passenger_ipv6_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4_passenger_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4_payload_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6_o_V2Vlan_IPv4(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv6_o_V2Vlan_IPv4
    __del__ = lambda self: None
IPv6_o_V2Vlan_IPv4_swigregister = _PythonWrapper.IPv6_o_V2Vlan_IPv4_swigregister
IPv6_o_V2Vlan_IPv4_swigregister(IPv6_o_V2Vlan_IPv4)

class IPv6_o_V2_IPv4GRE(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6_o_V2_IPv4GRE, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6_o_V2_IPv4GRE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_mac_get, _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_mac_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_ethType_get, _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_ipv4_get, _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_ipv4_set)
    __swig_setmethods__["tunnel_gre"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_gre_set
    __swig_getmethods__["tunnel_gre"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_gre_get
    if _newclass:
        tunnel_gre = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_gre_get, _PythonWrapper.IPv6_o_V2_IPv4GRE_tunnel_gre_set)
    __swig_setmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_passenger_ipv6_set
    __swig_getmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_passenger_ipv6_get
    if _newclass:
        passenger_ipv6 = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4GRE_passenger_ipv6_get, _PythonWrapper.IPv6_o_V2_IPv4GRE_passenger_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv6_o_V2_IPv4GRE_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv6_o_V2_IPv4GRE_payload_get, _PythonWrapper.IPv6_o_V2_IPv4GRE_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6_o_V2_IPv4GRE(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv6_o_V2_IPv4GRE_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv6_o_V2_IPv4GRE_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv6_o_V2_IPv4GRE_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv6_o_V2_IPv4GRE_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv6_o_V2_IPv4GRE_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv6_o_V2_IPv4GRE
    __del__ = lambda self: None
IPv6_o_V2_IPv4GRE_swigregister = _PythonWrapper.IPv6_o_V2_IPv4GRE_swigregister
IPv6_o_V2_IPv4GRE_swigregister(IPv6_o_V2_IPv4GRE)

class IPv6_o_V2Vlan_IPv4GRE(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6_o_V2Vlan_IPv4GRE, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6_o_V2Vlan_IPv4GRE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_mac_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_vlan_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_ethType_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_ipv4_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_ipv4_set)
    __swig_setmethods__["tunnel_gre"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_gre_set
    __swig_getmethods__["tunnel_gre"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_gre_get
    if _newclass:
        tunnel_gre = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_gre_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_tunnel_gre_set)
    __swig_setmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_passenger_ipv6_set
    __swig_getmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_passenger_ipv6_get
    if _newclass:
        passenger_ipv6 = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_passenger_ipv6_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_passenger_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_payload_get, _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6_o_V2Vlan_IPv4GRE(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv6_o_V2Vlan_IPv4GRE
    __del__ = lambda self: None
IPv6_o_V2Vlan_IPv4GRE_swigregister = _PythonWrapper.IPv6_o_V2Vlan_IPv4GRE_swigregister
IPv6_o_V2Vlan_IPv4GRE_swigregister(IPv6_o_V2Vlan_IPv4GRE)

class IPv4_o_V2_MPLS1L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4_o_V2_MPLS1L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4_o_V2_MPLS1L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_mac_get, _PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_mac_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_ethType_get, _PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_mpls1_get, _PythonWrapper.IPv4_o_V2_MPLS1L_tunnel_mpls1_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2_MPLS1L_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2_MPLS1L_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS1L_passenger_ipv4_get, _PythonWrapper.IPv4_o_V2_MPLS1L_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv4_o_V2_MPLS1L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv4_o_V2_MPLS1L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS1L_payload_get, _PythonWrapper.IPv4_o_V2_MPLS1L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4_o_V2_MPLS1L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv4_o_V2_MPLS1L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv4_o_V2_MPLS1L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv4_o_V2_MPLS1L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv4_o_V2_MPLS1L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv4_o_V2_MPLS1L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv4_o_V2_MPLS1L
    __del__ = lambda self: None
IPv4_o_V2_MPLS1L_swigregister = _PythonWrapper.IPv4_o_V2_MPLS1L_swigregister
IPv4_o_V2_MPLS1L_swigregister(IPv4_o_V2_MPLS1L)

class IPv4_o_V2_MPLS2L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4_o_V2_MPLS2L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4_o_V2_MPLS2L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mac_get, _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mac_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_ethType_get, _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mpls1_get, _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mpls1_set)
    __swig_setmethods__["tunnel_mpls2"] = _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mpls2_set
    __swig_getmethods__["tunnel_mpls2"] = _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mpls2_get
    if _newclass:
        tunnel_mpls2 = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mpls2_get, _PythonWrapper.IPv4_o_V2_MPLS2L_tunnel_mpls2_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2_MPLS2L_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2_MPLS2L_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS2L_passenger_ipv4_get, _PythonWrapper.IPv4_o_V2_MPLS2L_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv4_o_V2_MPLS2L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv4_o_V2_MPLS2L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv4_o_V2_MPLS2L_payload_get, _PythonWrapper.IPv4_o_V2_MPLS2L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4_o_V2_MPLS2L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv4_o_V2_MPLS2L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv4_o_V2_MPLS2L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv4_o_V2_MPLS2L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv4_o_V2_MPLS2L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv4_o_V2_MPLS2L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv4_o_V2_MPLS2L
    __del__ = lambda self: None
IPv4_o_V2_MPLS2L_swigregister = _PythonWrapper.IPv4_o_V2_MPLS2L_swigregister
IPv4_o_V2_MPLS2L_swigregister(IPv4_o_V2_MPLS2L)

class IPv4_o_V2Vlan_MPLS1L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4_o_V2Vlan_MPLS1L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4_o_V2Vlan_MPLS1L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_mac_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_vlan_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_ethType_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_mpls1_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_tunnel_mpls1_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS1L_passenger_ipv4_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS1L_payload_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4_o_V2Vlan_MPLS1L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv4_o_V2Vlan_MPLS1L
    __del__ = lambda self: None
IPv4_o_V2Vlan_MPLS1L_swigregister = _PythonWrapper.IPv4_o_V2Vlan_MPLS1L_swigregister
IPv4_o_V2Vlan_MPLS1L_swigregister(IPv4_o_V2Vlan_MPLS1L)

class IPv4_o_V2Vlan_MPLS2L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4_o_V2Vlan_MPLS2L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4_o_V2Vlan_MPLS2L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mac_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_vlan_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_ethType_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mpls1_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mpls1_set)
    __swig_setmethods__["tunnel_mpls2"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mpls2_set
    __swig_getmethods__["tunnel_mpls2"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mpls2_get
    if _newclass:
        tunnel_mpls2 = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mpls2_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_tunnel_mpls2_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS2L_passenger_ipv4_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv4_o_V2Vlan_MPLS2L_payload_get, _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv4_o_V2Vlan_MPLS2L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv4_o_V2Vlan_MPLS2L
    __del__ = lambda self: None
IPv4_o_V2Vlan_MPLS2L_swigregister = _PythonWrapper.IPv4_o_V2Vlan_MPLS2L_swigregister
IPv4_o_V2Vlan_MPLS2L_swigregister(IPv4_o_V2Vlan_MPLS2L)

class IPv6_o_V2_MPLS1L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6_o_V2_MPLS1L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6_o_V2_MPLS1L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_mac_get, _PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_mac_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_ethType_get, _PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_mpls1_get, _PythonWrapper.IPv6_o_V2_MPLS1L_tunnel_mpls1_set)
    __swig_setmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2_MPLS1L_passenger_ipv6_set
    __swig_getmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2_MPLS1L_passenger_ipv6_get
    if _newclass:
        passenger_ipv6 = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS1L_passenger_ipv6_get, _PythonWrapper.IPv6_o_V2_MPLS1L_passenger_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv6_o_V2_MPLS1L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv6_o_V2_MPLS1L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS1L_payload_get, _PythonWrapper.IPv6_o_V2_MPLS1L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6_o_V2_MPLS1L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv6_o_V2_MPLS1L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv6_o_V2_MPLS1L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv6_o_V2_MPLS1L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv6_o_V2_MPLS1L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv6_o_V2_MPLS1L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv6_o_V2_MPLS1L
    __del__ = lambda self: None
IPv6_o_V2_MPLS1L_swigregister = _PythonWrapper.IPv6_o_V2_MPLS1L_swigregister
IPv6_o_V2_MPLS1L_swigregister(IPv6_o_V2_MPLS1L)

class IPv6_o_V2_MPLS2L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6_o_V2_MPLS2L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6_o_V2_MPLS2L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mac_get, _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mac_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_ethType_get, _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mpls1_get, _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mpls1_set)
    __swig_setmethods__["tunnel_mpls2"] = _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mpls2_set
    __swig_getmethods__["tunnel_mpls2"] = _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mpls2_get
    if _newclass:
        tunnel_mpls2 = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mpls2_get, _PythonWrapper.IPv6_o_V2_MPLS2L_tunnel_mpls2_set)
    __swig_setmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2_MPLS2L_passenger_ipv6_set
    __swig_getmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2_MPLS2L_passenger_ipv6_get
    if _newclass:
        passenger_ipv6 = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS2L_passenger_ipv6_get, _PythonWrapper.IPv6_o_V2_MPLS2L_passenger_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv6_o_V2_MPLS2L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv6_o_V2_MPLS2L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv6_o_V2_MPLS2L_payload_get, _PythonWrapper.IPv6_o_V2_MPLS2L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6_o_V2_MPLS2L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv6_o_V2_MPLS2L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv6_o_V2_MPLS2L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv6_o_V2_MPLS2L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv6_o_V2_MPLS2L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv6_o_V2_MPLS2L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv6_o_V2_MPLS2L
    __del__ = lambda self: None
IPv6_o_V2_MPLS2L_swigregister = _PythonWrapper.IPv6_o_V2_MPLS2L_swigregister
IPv6_o_V2_MPLS2L_swigregister(IPv6_o_V2_MPLS2L)

class IPv6_o_V2Vlan_MPLS1L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6_o_V2Vlan_MPLS1L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6_o_V2Vlan_MPLS1L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_mac_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_vlan_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_ethType_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_mpls1_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_tunnel_mpls1_set)
    __swig_setmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_passenger_ipv6_set
    __swig_getmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_passenger_ipv6_get
    if _newclass:
        passenger_ipv6 = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS1L_passenger_ipv6_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_passenger_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS1L_payload_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6_o_V2Vlan_MPLS1L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv6_o_V2Vlan_MPLS1L
    __del__ = lambda self: None
IPv6_o_V2Vlan_MPLS1L_swigregister = _PythonWrapper.IPv6_o_V2Vlan_MPLS1L_swigregister
IPv6_o_V2Vlan_MPLS1L_swigregister(IPv6_o_V2Vlan_MPLS1L)

class IPv6_o_V2Vlan_MPLS2L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6_o_V2Vlan_MPLS2L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6_o_V2Vlan_MPLS2L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mac_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_vlan_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_ethType_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mpls1_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mpls1_set)
    __swig_setmethods__["tunnel_mpls2"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mpls2_set
    __swig_getmethods__["tunnel_mpls2"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mpls2_get
    if _newclass:
        tunnel_mpls2 = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mpls2_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_tunnel_mpls2_set)
    __swig_setmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_passenger_ipv6_set
    __swig_getmethods__["passenger_ipv6"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_passenger_ipv6_get
    if _newclass:
        passenger_ipv6 = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS2L_passenger_ipv6_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_passenger_ipv6_set)
    __swig_setmethods__["payload"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.IPv6_o_V2Vlan_MPLS2L_payload_get, _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_IPv6_o_V2Vlan_MPLS2L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_IPv6_o_V2Vlan_MPLS2L
    __del__ = lambda self: None
IPv6_o_V2Vlan_MPLS2L_swigregister = _PythonWrapper.IPv6_o_V2Vlan_MPLS2L_swigregister
IPv6_o_V2Vlan_MPLS2L_swigregister(IPv6_o_V2Vlan_MPLS2L)

class V2_o_V2_IPv4GRE(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_o_V2_IPv4GRE, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_o_V2_IPv4GRE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.V2_o_V2_IPv4GRE_tunnel_mac_get, _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_mac_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.V2_o_V2_IPv4GRE_tunnel_ethType_get, _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.V2_o_V2_IPv4GRE_tunnel_ipv4_get, _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_ipv4_set)
    __swig_setmethods__["tunnel_gre"] = _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_gre_set
    __swig_getmethods__["tunnel_gre"] = _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_gre_get
    if _newclass:
        tunnel_gre = _swig_property(_PythonWrapper.V2_o_V2_IPv4GRE_tunnel_gre_get, _PythonWrapper.V2_o_V2_IPv4GRE_tunnel_gre_set)
    __swig_setmethods__["passenger_mac"] = _PythonWrapper.V2_o_V2_IPv4GRE_passenger_mac_set
    __swig_getmethods__["passenger_mac"] = _PythonWrapper.V2_o_V2_IPv4GRE_passenger_mac_get
    if _newclass:
        passenger_mac = _swig_property(_PythonWrapper.V2_o_V2_IPv4GRE_passenger_mac_get, _PythonWrapper.V2_o_V2_IPv4GRE_passenger_mac_set)
    __swig_setmethods__["passenger_ethType"] = _PythonWrapper.V2_o_V2_IPv4GRE_passenger_ethType_set
    __swig_getmethods__["passenger_ethType"] = _PythonWrapper.V2_o_V2_IPv4GRE_passenger_ethType_get
    if _newclass:
        passenger_ethType = _swig_property(_PythonWrapper.V2_o_V2_IPv4GRE_passenger_ethType_get, _PythonWrapper.V2_o_V2_IPv4GRE_passenger_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_o_V2_IPv4GRE_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_o_V2_IPv4GRE_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_o_V2_IPv4GRE_payload_get, _PythonWrapper.V2_o_V2_IPv4GRE_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_o_V2_IPv4GRE(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_o_V2_IPv4GRE_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_o_V2_IPv4GRE_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_o_V2_IPv4GRE_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_o_V2_IPv4GRE_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_o_V2_IPv4GRE_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_o_V2_IPv4GRE
    __del__ = lambda self: None
V2_o_V2_IPv4GRE_swigregister = _PythonWrapper.V2_o_V2_IPv4GRE_swigregister
V2_o_V2_IPv4GRE_swigregister(V2_o_V2_IPv4GRE)

class V2_o_V2Vlan_IPv4GRE(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_o_V2Vlan_IPv4GRE, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_o_V2Vlan_IPv4GRE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_mac_get, _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_vlan_get, _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_ethType_get, _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_ethType_set)
    __swig_setmethods__["tunnel_ipv4"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_ipv4_set
    __swig_getmethods__["tunnel_ipv4"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_ipv4_get
    if _newclass:
        tunnel_ipv4 = _swig_property(_PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_ipv4_get, _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_ipv4_set)
    __swig_setmethods__["tunnel_gre"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_gre_set
    __swig_getmethods__["tunnel_gre"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_gre_get
    if _newclass:
        tunnel_gre = _swig_property(_PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_gre_get, _PythonWrapper.V2_o_V2Vlan_IPv4GRE_tunnel_gre_set)
    __swig_setmethods__["passenger_mac"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_passenger_mac_set
    __swig_getmethods__["passenger_mac"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_passenger_mac_get
    if _newclass:
        passenger_mac = _swig_property(_PythonWrapper.V2_o_V2Vlan_IPv4GRE_passenger_mac_get, _PythonWrapper.V2_o_V2Vlan_IPv4GRE_passenger_mac_set)
    __swig_setmethods__["passenger_ethType"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_passenger_ethType_set
    __swig_getmethods__["passenger_ethType"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_passenger_ethType_get
    if _newclass:
        passenger_ethType = _swig_property(_PythonWrapper.V2_o_V2Vlan_IPv4GRE_passenger_ethType_get, _PythonWrapper.V2_o_V2Vlan_IPv4GRE_passenger_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_o_V2Vlan_IPv4GRE_payload_get, _PythonWrapper.V2_o_V2Vlan_IPv4GRE_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_o_V2Vlan_IPv4GRE(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_o_V2Vlan_IPv4GRE_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_o_V2Vlan_IPv4GRE_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_o_V2Vlan_IPv4GRE_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_o_V2Vlan_IPv4GRE_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_o_V2Vlan_IPv4GRE_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_o_V2Vlan_IPv4GRE
    __del__ = lambda self: None
V2_o_V2Vlan_IPv4GRE_swigregister = _PythonWrapper.V2_o_V2Vlan_IPv4GRE_swigregister
V2_o_V2Vlan_IPv4GRE_swigregister(V2_o_V2Vlan_IPv4GRE)

class V2_o_V2Vlan_MPLS1L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_o_V2Vlan_MPLS1L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_o_V2Vlan_MPLS1L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_mac_get, _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_vlan_get, _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_ethType_get, _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_mpls1_get, _PythonWrapper.V2_o_V2Vlan_MPLS1L_tunnel_mpls1_set)
    __swig_setmethods__["passenger_mac"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_passenger_mac_set
    __swig_getmethods__["passenger_mac"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_passenger_mac_get
    if _newclass:
        passenger_mac = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS1L_passenger_mac_get, _PythonWrapper.V2_o_V2Vlan_MPLS1L_passenger_mac_set)
    __swig_setmethods__["passenger_ethType"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_passenger_ethType_set
    __swig_getmethods__["passenger_ethType"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_passenger_ethType_get
    if _newclass:
        passenger_ethType = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS1L_passenger_ethType_get, _PythonWrapper.V2_o_V2Vlan_MPLS1L_passenger_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_o_V2Vlan_MPLS1L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS1L_payload_get, _PythonWrapper.V2_o_V2Vlan_MPLS1L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_o_V2Vlan_MPLS1L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_o_V2Vlan_MPLS1L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_o_V2Vlan_MPLS1L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_o_V2Vlan_MPLS1L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_o_V2Vlan_MPLS1L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_o_V2Vlan_MPLS1L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_o_V2Vlan_MPLS1L
    __del__ = lambda self: None
V2_o_V2Vlan_MPLS1L_swigregister = _PythonWrapper.V2_o_V2Vlan_MPLS1L_swigregister
V2_o_V2Vlan_MPLS1L_swigregister(V2_o_V2Vlan_MPLS1L)

class V2_o_V2Vlan_MPLS2L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_o_V2Vlan_MPLS2L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_o_V2Vlan_MPLS2L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mac_get, _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_vlan_get, _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_ethType_get, _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mpls1_get, _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mpls1_set)
    __swig_setmethods__["tunnel_mpls2"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mpls2_set
    __swig_getmethods__["tunnel_mpls2"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mpls2_get
    if _newclass:
        tunnel_mpls2 = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mpls2_get, _PythonWrapper.V2_o_V2Vlan_MPLS2L_tunnel_mpls2_set)
    __swig_setmethods__["passenger_mac"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_passenger_mac_set
    __swig_getmethods__["passenger_mac"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_passenger_mac_get
    if _newclass:
        passenger_mac = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS2L_passenger_mac_get, _PythonWrapper.V2_o_V2Vlan_MPLS2L_passenger_mac_set)
    __swig_setmethods__["passenger_ethType"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_passenger_ethType_set
    __swig_getmethods__["passenger_ethType"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_passenger_ethType_get
    if _newclass:
        passenger_ethType = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS2L_passenger_ethType_get, _PythonWrapper.V2_o_V2Vlan_MPLS2L_passenger_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_o_V2Vlan_MPLS2L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_o_V2Vlan_MPLS2L_payload_get, _PythonWrapper.V2_o_V2Vlan_MPLS2L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_o_V2Vlan_MPLS2L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_o_V2Vlan_MPLS2L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_o_V2Vlan_MPLS2L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_o_V2Vlan_MPLS2L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_o_V2Vlan_MPLS2L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_o_V2Vlan_MPLS2L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_o_V2Vlan_MPLS2L
    __del__ = lambda self: None
V2_o_V2Vlan_MPLS2L_swigregister = _PythonWrapper.V2_o_V2Vlan_MPLS2L_swigregister
V2_o_V2Vlan_MPLS2L_swigregister(V2_o_V2Vlan_MPLS2L)

class V2Vlan_o_V2Vlan_MPLS1L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_o_V2Vlan_MPLS1L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_o_V2Vlan_MPLS1L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_mac_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_vlan_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_ethType_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_mpls1_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_tunnel_mpls1_set)
    __swig_setmethods__["passenger_mac"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_mac_set
    __swig_getmethods__["passenger_mac"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_mac_get
    if _newclass:
        passenger_mac = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_mac_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_mac_set)
    __swig_setmethods__["passenger_vlan"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_vlan_set
    __swig_getmethods__["passenger_vlan"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_vlan_get
    if _newclass:
        passenger_vlan = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_vlan_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_vlan_set)
    __swig_setmethods__["passenger_ethType"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_ethType_set
    __swig_getmethods__["passenger_ethType"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_ethType_get
    if _newclass:
        passenger_ethType = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_ethType_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_passenger_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_payload_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_o_V2Vlan_MPLS1L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_o_V2Vlan_MPLS1L
    __del__ = lambda self: None
V2Vlan_o_V2Vlan_MPLS1L_swigregister = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS1L_swigregister
V2Vlan_o_V2Vlan_MPLS1L_swigregister(V2Vlan_o_V2Vlan_MPLS1L)

class V2Vlan_o_V2Vlan_MPLS2L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_o_V2Vlan_MPLS2L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_o_V2Vlan_MPLS2L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mac_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_vlan_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_ethType_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mpls1_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mpls1_set)
    __swig_setmethods__["tunnel_mpls2"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mpls2_set
    __swig_getmethods__["tunnel_mpls2"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mpls2_get
    if _newclass:
        tunnel_mpls2 = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mpls2_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_tunnel_mpls2_set)
    __swig_setmethods__["passenger_mac"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_mac_set
    __swig_getmethods__["passenger_mac"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_mac_get
    if _newclass:
        passenger_mac = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_mac_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_mac_set)
    __swig_setmethods__["passenger_vlan"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_vlan_set
    __swig_getmethods__["passenger_vlan"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_vlan_get
    if _newclass:
        passenger_vlan = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_vlan_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_vlan_set)
    __swig_setmethods__["passenger_ethType"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_ethType_set
    __swig_getmethods__["passenger_ethType"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_ethType_get
    if _newclass:
        passenger_ethType = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_ethType_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_passenger_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_payload_get, _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_o_V2Vlan_MPLS2L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_o_V2Vlan_MPLS2L
    __del__ = lambda self: None
V2Vlan_o_V2Vlan_MPLS2L_swigregister = _PythonWrapper.V2Vlan_o_V2Vlan_MPLS2L_swigregister
V2Vlan_o_V2Vlan_MPLS2L_swigregister(V2Vlan_o_V2Vlan_MPLS2L)

class V2Vlan_IPv4_o_V2Vlan_MPLS1L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_IPv4_o_V2Vlan_MPLS1L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_IPv4_o_V2Vlan_MPLS1L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_mac_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_vlan_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_ethType_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_mpls1_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_tunnel_mpls1_set)
    __swig_setmethods__["passenger_mac"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_mac_set
    __swig_getmethods__["passenger_mac"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_mac_get
    if _newclass:
        passenger_mac = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_mac_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_mac_set)
    __swig_setmethods__["passenger_vlan"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_vlan_set
    __swig_getmethods__["passenger_vlan"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_vlan_get
    if _newclass:
        passenger_vlan = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_vlan_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_vlan_set)
    __swig_setmethods__["passenger_ethType"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_ethType_set
    __swig_getmethods__["passenger_ethType"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_ethType_get
    if _newclass:
        passenger_ethType = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_ethType_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_ethType_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_ipv4_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_payload_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_IPv4_o_V2Vlan_MPLS1L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_IPv4_o_V2Vlan_MPLS1L
    __del__ = lambda self: None
V2Vlan_IPv4_o_V2Vlan_MPLS1L_swigregister = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS1L_swigregister
V2Vlan_IPv4_o_V2Vlan_MPLS1L_swigregister(V2Vlan_IPv4_o_V2Vlan_MPLS1L)

class V2Vlan_IPv4_o_V2Vlan_MPLS2L(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2Vlan_IPv4_o_V2Vlan_MPLS2L, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2Vlan_IPv4_o_V2Vlan_MPLS2L, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_mac"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mac_set
    __swig_getmethods__["tunnel_mac"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mac_get
    if _newclass:
        tunnel_mac = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mac_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mac_set)
    __swig_setmethods__["tunnel_vlan"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_vlan_set
    __swig_getmethods__["tunnel_vlan"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_vlan_get
    if _newclass:
        tunnel_vlan = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_vlan_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_vlan_set)
    __swig_setmethods__["tunnel_ethType"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_ethType_set
    __swig_getmethods__["tunnel_ethType"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_ethType_get
    if _newclass:
        tunnel_ethType = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_ethType_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_ethType_set)
    __swig_setmethods__["tunnel_mpls1"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mpls1_set
    __swig_getmethods__["tunnel_mpls1"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mpls1_get
    if _newclass:
        tunnel_mpls1 = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mpls1_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mpls1_set)
    __swig_setmethods__["tunnel_mpls2"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mpls2_set
    __swig_getmethods__["tunnel_mpls2"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mpls2_get
    if _newclass:
        tunnel_mpls2 = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mpls2_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_tunnel_mpls2_set)
    __swig_setmethods__["passenger_mac"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_mac_set
    __swig_getmethods__["passenger_mac"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_mac_get
    if _newclass:
        passenger_mac = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_mac_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_mac_set)
    __swig_setmethods__["passenger_vlan"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_vlan_set
    __swig_getmethods__["passenger_vlan"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_vlan_get
    if _newclass:
        passenger_vlan = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_vlan_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_vlan_set)
    __swig_setmethods__["passenger_ethType"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_ethType_set
    __swig_getmethods__["passenger_ethType"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_ethType_get
    if _newclass:
        passenger_ethType = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_ethType_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_ethType_set)
    __swig_setmethods__["passenger_ipv4"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_ipv4_set
    __swig_getmethods__["passenger_ipv4"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_ipv4_get
    if _newclass:
        passenger_ipv4 = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_ipv4_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_passenger_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_payload_get, _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2Vlan_IPv4_o_V2Vlan_MPLS2L(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2Vlan_IPv4_o_V2Vlan_MPLS2L
    __del__ = lambda self: None
V2Vlan_IPv4_o_V2Vlan_MPLS2L_swigregister = _PythonWrapper.V2Vlan_IPv4_o_V2Vlan_MPLS2L_swigregister
V2Vlan_IPv4_o_V2Vlan_MPLS2L_swigregister(V2Vlan_IPv4_o_V2Vlan_MPLS2L)

class LLC(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLC, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LLC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.LLC_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.LLC_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.LLC_mac_get, _PythonWrapper.LLC_mac_set)
    __swig_setmethods__["length"] = _PythonWrapper.LLC_length_set
    __swig_getmethods__["length"] = _PythonWrapper.LLC_length_get
    if _newclass:
        length = _swig_property(_PythonWrapper.LLC_length_get, _PythonWrapper.LLC_length_set)
    __swig_setmethods__["llc"] = _PythonWrapper.LLC_llc_set
    __swig_getmethods__["llc"] = _PythonWrapper.LLC_llc_get
    if _newclass:
        llc = _swig_property(_PythonWrapper.LLC_llc_get, _PythonWrapper.LLC_llc_set)
    __swig_setmethods__["payload"] = _PythonWrapper.LLC_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.LLC_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.LLC_payload_get, _PythonWrapper.LLC_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_LLC(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.LLC_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.LLC_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.LLC_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.LLC_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.LLC_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_LLC
    __del__ = lambda self: None
LLC_swigregister = _PythonWrapper.LLC_swigregister
LLC_swigregister(LLC)

class LLCSnap(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLCSnap, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LLCSnap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.LLCSnap_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.LLCSnap_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.LLCSnap_mac_get, _PythonWrapper.LLCSnap_mac_set)
    __swig_setmethods__["length"] = _PythonWrapper.LLCSnap_length_set
    __swig_getmethods__["length"] = _PythonWrapper.LLCSnap_length_get
    if _newclass:
        length = _swig_property(_PythonWrapper.LLCSnap_length_get, _PythonWrapper.LLCSnap_length_set)
    __swig_setmethods__["llcsnap"] = _PythonWrapper.LLCSnap_llcsnap_set
    __swig_getmethods__["llcsnap"] = _PythonWrapper.LLCSnap_llcsnap_get
    if _newclass:
        llcsnap = _swig_property(_PythonWrapper.LLCSnap_llcsnap_get, _PythonWrapper.LLCSnap_llcsnap_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.LLCSnap_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.LLCSnap_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.LLCSnap_ethType_get, _PythonWrapper.LLCSnap_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.LLCSnap_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.LLCSnap_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.LLCSnap_payload_get, _PythonWrapper.LLCSnap_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_LLCSnap(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.LLCSnap_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.LLCSnap_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.LLCSnap_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.LLCSnap_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.LLCSnap_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_LLCSnap
    __del__ = lambda self: None
LLCSnap_swigregister = _PythonWrapper.LLCSnap_swigregister
LLCSnap_swigregister(LLCSnap)

class LLCSnapVlan(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLCSnapVlan, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LLCSnapVlan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.LLCSnapVlan_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.LLCSnapVlan_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.LLCSnapVlan_mac_get, _PythonWrapper.LLCSnapVlan_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.LLCSnapVlan_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.LLCSnapVlan_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.LLCSnapVlan_vlan_get, _PythonWrapper.LLCSnapVlan_vlan_set)
    __swig_setmethods__["length"] = _PythonWrapper.LLCSnapVlan_length_set
    __swig_getmethods__["length"] = _PythonWrapper.LLCSnapVlan_length_get
    if _newclass:
        length = _swig_property(_PythonWrapper.LLCSnapVlan_length_get, _PythonWrapper.LLCSnapVlan_length_set)
    __swig_setmethods__["llcsnap"] = _PythonWrapper.LLCSnapVlan_llcsnap_set
    __swig_getmethods__["llcsnap"] = _PythonWrapper.LLCSnapVlan_llcsnap_get
    if _newclass:
        llcsnap = _swig_property(_PythonWrapper.LLCSnapVlan_llcsnap_get, _PythonWrapper.LLCSnapVlan_llcsnap_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.LLCSnapVlan_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.LLCSnapVlan_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.LLCSnapVlan_ethType_get, _PythonWrapper.LLCSnapVlan_ethType_set)
    __swig_setmethods__["payload"] = _PythonWrapper.LLCSnapVlan_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.LLCSnapVlan_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.LLCSnapVlan_payload_get, _PythonWrapper.LLCSnapVlan_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_LLCSnapVlan(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.LLCSnapVlan_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.LLCSnapVlan_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.LLCSnapVlan_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.LLCSnapVlan_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.LLCSnapVlan_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_LLCSnapVlan
    __del__ = lambda self: None
LLCSnapVlan_swigregister = _PythonWrapper.LLCSnapVlan_swigregister
LLCSnapVlan_swigregister(LLCSnapVlan)

class LLCSnap_IPv4(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLCSnap_IPv4, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LLCSnap_IPv4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.LLCSnap_IPv4_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.LLCSnap_IPv4_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.LLCSnap_IPv4_mac_get, _PythonWrapper.LLCSnap_IPv4_mac_set)
    __swig_setmethods__["length"] = _PythonWrapper.LLCSnap_IPv4_length_set
    __swig_getmethods__["length"] = _PythonWrapper.LLCSnap_IPv4_length_get
    if _newclass:
        length = _swig_property(_PythonWrapper.LLCSnap_IPv4_length_get, _PythonWrapper.LLCSnap_IPv4_length_set)
    __swig_setmethods__["llcsnap"] = _PythonWrapper.LLCSnap_IPv4_llcsnap_set
    __swig_getmethods__["llcsnap"] = _PythonWrapper.LLCSnap_IPv4_llcsnap_get
    if _newclass:
        llcsnap = _swig_property(_PythonWrapper.LLCSnap_IPv4_llcsnap_get, _PythonWrapper.LLCSnap_IPv4_llcsnap_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.LLCSnap_IPv4_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.LLCSnap_IPv4_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.LLCSnap_IPv4_ethType_get, _PythonWrapper.LLCSnap_IPv4_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.LLCSnap_IPv4_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.LLCSnap_IPv4_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.LLCSnap_IPv4_ipv4_get, _PythonWrapper.LLCSnap_IPv4_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.LLCSnap_IPv4_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.LLCSnap_IPv4_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.LLCSnap_IPv4_payload_get, _PythonWrapper.LLCSnap_IPv4_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_LLCSnap_IPv4(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.LLCSnap_IPv4_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.LLCSnap_IPv4_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.LLCSnap_IPv4_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.LLCSnap_IPv4_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.LLCSnap_IPv4_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_LLCSnap_IPv4
    __del__ = lambda self: None
LLCSnap_IPv4_swigregister = _PythonWrapper.LLCSnap_IPv4_swigregister
LLCSnap_IPv4_swigregister(LLCSnap_IPv4)

class LLCSnapVlan_IPv4(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLCSnapVlan_IPv4, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LLCSnapVlan_IPv4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.LLCSnapVlan_IPv4_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.LLCSnapVlan_IPv4_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.LLCSnapVlan_IPv4_mac_get, _PythonWrapper.LLCSnapVlan_IPv4_mac_set)
    __swig_setmethods__["vlan"] = _PythonWrapper.LLCSnapVlan_IPv4_vlan_set
    __swig_getmethods__["vlan"] = _PythonWrapper.LLCSnapVlan_IPv4_vlan_get
    if _newclass:
        vlan = _swig_property(_PythonWrapper.LLCSnapVlan_IPv4_vlan_get, _PythonWrapper.LLCSnapVlan_IPv4_vlan_set)
    __swig_setmethods__["length"] = _PythonWrapper.LLCSnapVlan_IPv4_length_set
    __swig_getmethods__["length"] = _PythonWrapper.LLCSnapVlan_IPv4_length_get
    if _newclass:
        length = _swig_property(_PythonWrapper.LLCSnapVlan_IPv4_length_get, _PythonWrapper.LLCSnapVlan_IPv4_length_set)
    __swig_setmethods__["llcsnap"] = _PythonWrapper.LLCSnapVlan_IPv4_llcsnap_set
    __swig_getmethods__["llcsnap"] = _PythonWrapper.LLCSnapVlan_IPv4_llcsnap_get
    if _newclass:
        llcsnap = _swig_property(_PythonWrapper.LLCSnapVlan_IPv4_llcsnap_get, _PythonWrapper.LLCSnapVlan_IPv4_llcsnap_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.LLCSnapVlan_IPv4_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.LLCSnapVlan_IPv4_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.LLCSnapVlan_IPv4_ethType_get, _PythonWrapper.LLCSnapVlan_IPv4_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.LLCSnapVlan_IPv4_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.LLCSnapVlan_IPv4_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.LLCSnapVlan_IPv4_ipv4_get, _PythonWrapper.LLCSnapVlan_IPv4_ipv4_set)
    __swig_setmethods__["payload"] = _PythonWrapper.LLCSnapVlan_IPv4_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.LLCSnapVlan_IPv4_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.LLCSnapVlan_IPv4_payload_get, _PythonWrapper.LLCSnapVlan_IPv4_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_LLCSnapVlan_IPv4(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.LLCSnapVlan_IPv4_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.LLCSnapVlan_IPv4_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.LLCSnapVlan_IPv4_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.LLCSnapVlan_IPv4_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.LLCSnapVlan_IPv4_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_LLCSnapVlan_IPv4
    __del__ = lambda self: None
LLCSnapVlan_IPv4_swigregister = _PythonWrapper.LLCSnapVlan_IPv4_swigregister
LLCSnapVlan_IPv4_swigregister(LLCSnapVlan_IPv4)

class FlowControl(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowControl, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlowControl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.FlowControl_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.FlowControl_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.FlowControl_mac_get, _PythonWrapper.FlowControl_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.FlowControl_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.FlowControl_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.FlowControl_ethType_get, _PythonWrapper.FlowControl_ethType_set)
    __swig_setmethods__["pauseControl"] = _PythonWrapper.FlowControl_pauseControl_set
    __swig_getmethods__["pauseControl"] = _PythonWrapper.FlowControl_pauseControl_get
    if _newclass:
        pauseControl = _swig_property(_PythonWrapper.FlowControl_pauseControl_get, _PythonWrapper.FlowControl_pauseControl_set)
    __swig_setmethods__["payload"] = _PythonWrapper.FlowControl_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.FlowControl_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.FlowControl_payload_get, _PythonWrapper.FlowControl_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_FlowControl(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.FlowControl_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.FlowControl_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.FlowControl_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.FlowControl_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.FlowControl_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_FlowControl
    __del__ = lambda self: None
FlowControl_swigregister = _PythonWrapper.FlowControl_swigregister
FlowControl_swigregister(FlowControl)

class V2_IPv4_UDP_DHCP(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IPv4_UDP_DHCP, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IPv4_UDP_DHCP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IPv4_UDP_DHCP_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IPv4_UDP_DHCP_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IPv4_UDP_DHCP_mac_get, _PythonWrapper.V2_IPv4_UDP_DHCP_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IPv4_UDP_DHCP_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IPv4_UDP_DHCP_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IPv4_UDP_DHCP_ethType_get, _PythonWrapper.V2_IPv4_UDP_DHCP_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2_IPv4_UDP_DHCP_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2_IPv4_UDP_DHCP_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2_IPv4_UDP_DHCP_ipv4_get, _PythonWrapper.V2_IPv4_UDP_DHCP_ipv4_set)
    __swig_setmethods__["udp"] = _PythonWrapper.V2_IPv4_UDP_DHCP_udp_set
    __swig_getmethods__["udp"] = _PythonWrapper.V2_IPv4_UDP_DHCP_udp_get
    if _newclass:
        udp = _swig_property(_PythonWrapper.V2_IPv4_UDP_DHCP_udp_get, _PythonWrapper.V2_IPv4_UDP_DHCP_udp_set)
    __swig_setmethods__["dhcp"] = _PythonWrapper.V2_IPv4_UDP_DHCP_dhcp_set
    __swig_getmethods__["dhcp"] = _PythonWrapper.V2_IPv4_UDP_DHCP_dhcp_get
    if _newclass:
        dhcp = _swig_property(_PythonWrapper.V2_IPv4_UDP_DHCP_dhcp_get, _PythonWrapper.V2_IPv4_UDP_DHCP_dhcp_set)
    __swig_setmethods__["dhcpOptions"] = _PythonWrapper.V2_IPv4_UDP_DHCP_dhcpOptions_set
    __swig_getmethods__["dhcpOptions"] = _PythonWrapper.V2_IPv4_UDP_DHCP_dhcpOptions_get
    if _newclass:
        dhcpOptions = _swig_property(_PythonWrapper.V2_IPv4_UDP_DHCP_dhcpOptions_get, _PythonWrapper.V2_IPv4_UDP_DHCP_dhcpOptions_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IPv4_UDP_DHCP_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IPv4_UDP_DHCP_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IPv4_UDP_DHCP_payload_get, _PythonWrapper.V2_IPv4_UDP_DHCP_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IPv4_UDP_DHCP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IPv4_UDP_DHCP_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IPv4_UDP_DHCP_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IPv4_UDP_DHCP_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IPv4_UDP_DHCP_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IPv4_UDP_DHCP_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IPv4_UDP_DHCP
    __del__ = lambda self: None
V2_IPv4_UDP_DHCP_swigregister = _PythonWrapper.V2_IPv4_UDP_DHCP_swigregister
V2_IPv4_UDP_DHCP_swigregister(V2_IPv4_UDP_DHCP)

class V2_IPv6_TCP(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IPv6_TCP, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IPv6_TCP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IPv6_TCP_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IPv6_TCP_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IPv6_TCP_mac_get, _PythonWrapper.V2_IPv6_TCP_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IPv6_TCP_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IPv6_TCP_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IPv6_TCP_ethType_get, _PythonWrapper.V2_IPv6_TCP_ethType_set)
    __swig_setmethods__["ipv6"] = _PythonWrapper.V2_IPv6_TCP_ipv6_set
    __swig_getmethods__["ipv6"] = _PythonWrapper.V2_IPv6_TCP_ipv6_get
    if _newclass:
        ipv6 = _swig_property(_PythonWrapper.V2_IPv6_TCP_ipv6_get, _PythonWrapper.V2_IPv6_TCP_ipv6_set)
    __swig_setmethods__["tcp"] = _PythonWrapper.V2_IPv6_TCP_tcp_set
    __swig_getmethods__["tcp"] = _PythonWrapper.V2_IPv6_TCP_tcp_get
    if _newclass:
        tcp = _swig_property(_PythonWrapper.V2_IPv6_TCP_tcp_get, _PythonWrapper.V2_IPv6_TCP_tcp_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IPv6_TCP_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IPv6_TCP_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IPv6_TCP_payload_get, _PythonWrapper.V2_IPv6_TCP_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IPv6_TCP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IPv6_TCP_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IPv6_TCP_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IPv6_TCP_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IPv6_TCP_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IPv6_TCP_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IPv6_TCP
    __del__ = lambda self: None
V2_IPv6_TCP_swigregister = _PythonWrapper.V2_IPv6_TCP_swigregister
V2_IPv6_TCP_swigregister(V2_IPv6_TCP)

class V2_IPv6_UDP(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IPv6_UDP, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IPv6_UDP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IPv6_UDP_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IPv6_UDP_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IPv6_UDP_mac_get, _PythonWrapper.V2_IPv6_UDP_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IPv6_UDP_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IPv6_UDP_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IPv6_UDP_ethType_get, _PythonWrapper.V2_IPv6_UDP_ethType_set)
    __swig_setmethods__["ipv6"] = _PythonWrapper.V2_IPv6_UDP_ipv6_set
    __swig_getmethods__["ipv6"] = _PythonWrapper.V2_IPv6_UDP_ipv6_get
    if _newclass:
        ipv6 = _swig_property(_PythonWrapper.V2_IPv6_UDP_ipv6_get, _PythonWrapper.V2_IPv6_UDP_ipv6_set)
    __swig_setmethods__["udp"] = _PythonWrapper.V2_IPv6_UDP_udp_set
    __swig_getmethods__["udp"] = _PythonWrapper.V2_IPv6_UDP_udp_get
    if _newclass:
        udp = _swig_property(_PythonWrapper.V2_IPv6_UDP_udp_get, _PythonWrapper.V2_IPv6_UDP_udp_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IPv6_UDP_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IPv6_UDP_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IPv6_UDP_payload_get, _PythonWrapper.V2_IPv6_UDP_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IPv6_UDP(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IPv6_UDP_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IPv6_UDP_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IPv6_UDP_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IPv6_UDP_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IPv6_UDP_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IPv6_UDP
    __del__ = lambda self: None
V2_IPv6_UDP_swigregister = _PythonWrapper.V2_IPv6_UDP_swigregister
V2_IPv6_UDP_swigregister(V2_IPv6_UDP)

class V2_IGMPv2(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IGMPv2, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IGMPv2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IGMPv2_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IGMPv2_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IGMPv2_mac_get, _PythonWrapper.V2_IGMPv2_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IGMPv2_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IGMPv2_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IGMPv2_ethType_get, _PythonWrapper.V2_IGMPv2_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2_IGMPv2_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2_IGMPv2_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2_IGMPv2_ipv4_get, _PythonWrapper.V2_IGMPv2_ipv4_set)
    __swig_setmethods__["igmpv2"] = _PythonWrapper.V2_IGMPv2_igmpv2_set
    __swig_getmethods__["igmpv2"] = _PythonWrapper.V2_IGMPv2_igmpv2_get
    if _newclass:
        igmpv2 = _swig_property(_PythonWrapper.V2_IGMPv2_igmpv2_get, _PythonWrapper.V2_IGMPv2_igmpv2_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IGMPv2_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IGMPv2_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IGMPv2_payload_get, _PythonWrapper.V2_IGMPv2_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IGMPv2(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IGMPv2_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IGMPv2_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IGMPv2_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IGMPv2_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IGMPv2_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IGMPv2
    __del__ = lambda self: None
V2_IGMPv2_swigregister = _PythonWrapper.V2_IGMPv2_swigregister
V2_IGMPv2_swigregister(V2_IGMPv2)

class V2_IGMPv3_OneSrcAddress(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IGMPv3_OneSrcAddress, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IGMPv3_OneSrcAddress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IGMPv3_OneSrcAddress_mac_get, _PythonWrapper.V2_IGMPv3_OneSrcAddress_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IGMPv3_OneSrcAddress_ethType_get, _PythonWrapper.V2_IGMPv3_OneSrcAddress_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2_IGMPv3_OneSrcAddress_ipv4_get, _PythonWrapper.V2_IGMPv3_OneSrcAddress_ipv4_set)
    __swig_setmethods__["igmpv3"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_igmpv3_set
    __swig_getmethods__["igmpv3"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_igmpv3_get
    if _newclass:
        igmpv3 = _swig_property(_PythonWrapper.V2_IGMPv3_OneSrcAddress_igmpv3_get, _PythonWrapper.V2_IGMPv3_OneSrcAddress_igmpv3_set)
    __swig_setmethods__["ipSourceAdd1"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_ipSourceAdd1_set
    __swig_getmethods__["ipSourceAdd1"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_ipSourceAdd1_get
    if _newclass:
        ipSourceAdd1 = _swig_property(_PythonWrapper.V2_IGMPv3_OneSrcAddress_ipSourceAdd1_get, _PythonWrapper.V2_IGMPv3_OneSrcAddress_ipSourceAdd1_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IGMPv3_OneSrcAddress_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IGMPv3_OneSrcAddress_payload_get, _PythonWrapper.V2_IGMPv3_OneSrcAddress_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IGMPv3_OneSrcAddress(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IGMPv3_OneSrcAddress_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IGMPv3_OneSrcAddress_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IGMPv3_OneSrcAddress_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IGMPv3_OneSrcAddress_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IGMPv3_OneSrcAddress_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IGMPv3_OneSrcAddress
    __del__ = lambda self: None
V2_IGMPv3_OneSrcAddress_swigregister = _PythonWrapper.V2_IGMPv3_OneSrcAddress_swigregister
V2_IGMPv3_OneSrcAddress_swigregister(V2_IGMPv3_OneSrcAddress)

class V2_IGMPv3_TwoSrcAddresses(Packet):
    __swig_setmethods__ = {}
    for _s in [Packet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V2_IGMPv3_TwoSrcAddresses, name, value)
    __swig_getmethods__ = {}
    for _s in [Packet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, V2_IGMPv3_TwoSrcAddresses, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_mac_set
    __swig_getmethods__["mac"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_mac_get
    if _newclass:
        mac = _swig_property(_PythonWrapper.V2_IGMPv3_TwoSrcAddresses_mac_get, _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_mac_set)
    __swig_setmethods__["ethType"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ethType_set
    __swig_getmethods__["ethType"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ethType_get
    if _newclass:
        ethType = _swig_property(_PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ethType_get, _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ethType_set)
    __swig_setmethods__["ipv4"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipv4_set
    __swig_getmethods__["ipv4"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipv4_get, _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipv4_set)
    __swig_setmethods__["igmpv3"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_igmpv3_set
    __swig_getmethods__["igmpv3"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_igmpv3_get
    if _newclass:
        igmpv3 = _swig_property(_PythonWrapper.V2_IGMPv3_TwoSrcAddresses_igmpv3_get, _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_igmpv3_set)
    __swig_setmethods__["ipSourceAdd1"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipSourceAdd1_set
    __swig_getmethods__["ipSourceAdd1"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipSourceAdd1_get
    if _newclass:
        ipSourceAdd1 = _swig_property(_PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipSourceAdd1_get, _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipSourceAdd1_set)
    __swig_setmethods__["ipSourceAdd2"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipSourceAdd2_set
    __swig_getmethods__["ipSourceAdd2"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipSourceAdd2_get
    if _newclass:
        ipSourceAdd2 = _swig_property(_PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipSourceAdd2_get, _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_ipSourceAdd2_set)
    __swig_setmethods__["payload"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_payload_set
    __swig_getmethods__["payload"] = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_payload_get
    if _newclass:
        payload = _swig_property(_PythonWrapper.V2_IGMPv3_TwoSrcAddresses_payload_get, _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_payload_set)

    def __init__(self, *args):
        this = _PythonWrapper.new_V2_IGMPv3_TwoSrcAddresses(*args)
        try:
            self.this.append(this)
        except builtins.Exception:
            self.this = this

    def BuildPacket(self):
        return _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_BuildPacket(self)

    def BuildPacketNoCRC(self):
        return _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_BuildPacketNoCRC(self)

    def GetPacketWithoutPayloadAndCrc(self):
        return _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_GetPacketWithoutPayloadAndCrc(self)

    def GetComplexPacketElementsNames(self, names):
        return _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_GetComplexPacketElementsNames(self, names)

    def GetComplexPacketMembersNames(self, names):
        return _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_GetComplexPacketMembersNames(self, names)
    __swig_destroy__ = _PythonWrapper.delete_V2_IGMPv3_TwoSrcAddresses
    __del__ = lambda self: None
V2_IGMPv3_TwoSrcAddresses_swigregister = _PythonWrapper.V2_IGMPv3_TwoSrcAddresses_swigregister
V2_IGMPv3_TwoSrcAddresses_swigregister(V2_IGMPv3_TwoSrcAddresses)

# This file is compatible with both classic and new-style classes.


