# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/protocol/frr/bgp.yaml
#
# DONOT EDIT - generated by diligent bots

import asyncio

from testbed.lib.frr.bgp import Bgp

from .utils import TestDevice


def test_that_bgp_show(capfd):

    dv1 = TestDevice(platform="dentos")
    dv2 = TestDevice(platform="dentos")
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Bgp.show(
            input_data=[
                {
                    # device 1
                    "test_dev": [{}],
                }
            ],
            device_obj={"test_dev": dv1},
        )
    )
    print(out)
    assert "command" in out[0]["test_dev"].keys()
    assert "result" in out[0]["test_dev"].keys()
    # check the rc
    assert out[0]["test_dev"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Bgp.show(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            # command 1
                            "asn": "akiqksyp",
                            "router-id": "lmyeoavl",
                            "neighbor": "yvftyxck",
                            "address-family": "sjyehvzo",
                            "options": "jxilvvij",
                        },
                        {
                            # command 2
                            "asn": "rcsytgon",
                            "router-id": "tnnwpafb",
                            "neighbor": "himkxhpt",
                            "address-family": "wnmbahxb",
                            "options": "qlzavqll",
                        },
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Bgp.show(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            "asn": "akiqksyp",
                            "router-id": "lmyeoavl",
                            "neighbor": "yvftyxck",
                            "address-family": "sjyehvzo",
                            "options": "jxilvvij",
                        }
                    ],
                    # device 2
                    "test_dev2": [
                        {
                            "asn": "rcsytgon",
                            "router-id": "tnnwpafb",
                            "neighbor": "himkxhpt",
                            "address-family": "wnmbahxb",
                            "options": "qlzavqll",
                        }
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    assert "command" in out[1]["test_dev2"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    assert "result" in out[1]["test_dev2"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0
    assert out[1]["test_dev2"]["rc"] == 0


def test_that_bgp_configure(capfd):

    dv1 = TestDevice(platform="dentos")
    dv2 = TestDevice(platform="dentos")
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Bgp.configure(
            input_data=[
                {
                    # device 1
                    "test_dev": [{}],
                }
            ],
            device_obj={"test_dev": dv1},
        )
    )
    print(out)
    assert "command" in out[0]["test_dev"].keys()
    assert "result" in out[0]["test_dev"].keys()
    # check the rc
    assert out[0]["test_dev"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Bgp.configure(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            # command 1
                            "asn": "luuiwfiy",
                            "router-id": "jdcxwjos",
                            "neighbor": "zlpnqvaa",
                            "address-family": "yjcqevgw",
                            "options": "vmsufech",
                        },
                        {
                            # command 2
                            "asn": "rtnwrsqq",
                            "router-id": "jeeagudu",
                            "neighbor": "orbkrsvo",
                            "address-family": "qiapruya",
                            "options": "jsizqdfm",
                        },
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        Bgp.configure(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            "asn": "luuiwfiy",
                            "router-id": "jdcxwjos",
                            "neighbor": "zlpnqvaa",
                            "address-family": "yjcqevgw",
                            "options": "vmsufech",
                        }
                    ],
                    # device 2
                    "test_dev2": [
                        {
                            "asn": "rtnwrsqq",
                            "router-id": "jeeagudu",
                            "neighbor": "orbkrsvo",
                            "address-family": "qiapruya",
                            "options": "jsizqdfm",
                        }
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    assert "command" in out[1]["test_dev2"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    assert "result" in out[1]["test_dev2"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0
    assert out[1]["test_dev2"]["rc"] == 0
