# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/network/bridge/bridge.yaml
#
# DONOT EDIT - generated by diligent bots

import asyncio

from testbed.lib.bridge.bridge_fdb import BridgeFdb

from .utils import TestDevice


def test_that_bridge_fdb_add(capfd):

    dv1 = TestDevice(platform="dentos")
    dv2 = TestDevice(platform="dentos")
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.add(
            input_data=[
                {
                    # device 1
                    "test_dev": [{}],
                }
            ],
            device_obj={"test_dev": dv1},
        )
    )
    print(out)
    assert "command" in out[0]["test_dev"].keys()
    assert "result" in out[0]["test_dev"].keys()
    # check the rc
    assert out[0]["test_dev"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.add(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            # command 1
                            "dev": "jjtxpxqn",
                            "lladdr": "c5:a2:8a:85:29:4c",
                            "self": True,
                            "master": False,
                            "router": True,
                            "use": False,
                            "extern_learn": True,
                            "sticky": False,
                            "dst": "101.20.141.97",
                            "vni": 3894,
                            "port": 6360,
                            "via": "owyfdjtx",
                            "options": "lszzoceu",
                        },
                        {
                            # command 2
                            "dev": "glumvpyx",
                            "lladdr": "3d:57:2f:61:77:0c",
                            "self": False,
                            "master": False,
                            "router": False,
                            "use": True,
                            "extern_learn": True,
                            "sticky": True,
                            "dst": "153.128.30.76",
                            "vni": 490,
                            "port": 3394,
                            "via": "rkivvauz",
                            "options": "yqxzvpky",
                        },
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.add(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            "dev": "jjtxpxqn",
                            "lladdr": "c5:a2:8a:85:29:4c",
                            "self": True,
                            "master": False,
                            "router": True,
                            "use": False,
                            "extern_learn": True,
                            "sticky": False,
                            "dst": "101.20.141.97",
                            "vni": 3894,
                            "port": 6360,
                            "via": "owyfdjtx",
                            "options": "lszzoceu",
                        }
                    ],
                    # device 2
                    "test_dev2": [
                        {
                            "dev": "glumvpyx",
                            "lladdr": "3d:57:2f:61:77:0c",
                            "self": False,
                            "master": False,
                            "router": False,
                            "use": True,
                            "extern_learn": True,
                            "sticky": True,
                            "dst": "153.128.30.76",
                            "vni": 490,
                            "port": 3394,
                            "via": "rkivvauz",
                            "options": "yqxzvpky",
                        }
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    assert "command" in out[1]["test_dev2"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    assert "result" in out[1]["test_dev2"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0
    assert out[1]["test_dev2"]["rc"] == 0


def test_that_bridge_fdb_append(capfd):

    dv1 = TestDevice(platform="dentos")
    dv2 = TestDevice(platform="dentos")
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.append(
            input_data=[
                {
                    # device 1
                    "test_dev": [{}],
                }
            ],
            device_obj={"test_dev": dv1},
        )
    )
    print(out)
    assert "command" in out[0]["test_dev"].keys()
    assert "result" in out[0]["test_dev"].keys()
    # check the rc
    assert out[0]["test_dev"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.append(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            # command 1
                            "dev": "ofeimnky",
                            "lladdr": "ba:44:8d:35:98:4d",
                            "self": True,
                            "master": False,
                            "router": True,
                            "use": False,
                            "extern_learn": False,
                            "sticky": False,
                            "dst": "115.18.145.164",
                            "vni": 6045,
                            "port": 3401,
                            "via": "nttoucue",
                            "options": "whnypnvd",
                        },
                        {
                            # command 2
                            "dev": "tufnxbva",
                            "lladdr": "f8:35:bc:08:05:32",
                            "self": False,
                            "master": True,
                            "router": True,
                            "use": True,
                            "extern_learn": True,
                            "sticky": False,
                            "dst": "245.175.98.224",
                            "vni": 2246,
                            "port": 5595,
                            "via": "hpjjbltf",
                            "options": "lpivrwzp",
                        },
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.append(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            "dev": "ofeimnky",
                            "lladdr": "ba:44:8d:35:98:4d",
                            "self": True,
                            "master": False,
                            "router": True,
                            "use": False,
                            "extern_learn": False,
                            "sticky": False,
                            "dst": "115.18.145.164",
                            "vni": 6045,
                            "port": 3401,
                            "via": "nttoucue",
                            "options": "whnypnvd",
                        }
                    ],
                    # device 2
                    "test_dev2": [
                        {
                            "dev": "tufnxbva",
                            "lladdr": "f8:35:bc:08:05:32",
                            "self": False,
                            "master": True,
                            "router": True,
                            "use": True,
                            "extern_learn": True,
                            "sticky": False,
                            "dst": "245.175.98.224",
                            "vni": 2246,
                            "port": 5595,
                            "via": "hpjjbltf",
                            "options": "lpivrwzp",
                        }
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    assert "command" in out[1]["test_dev2"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    assert "result" in out[1]["test_dev2"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0
    assert out[1]["test_dev2"]["rc"] == 0


def test_that_bridge_fdb_delete(capfd):

    dv1 = TestDevice(platform="dentos")
    dv2 = TestDevice(platform="dentos")
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.delete(
            input_data=[
                {
                    # device 1
                    "test_dev": [{}],
                }
            ],
            device_obj={"test_dev": dv1},
        )
    )
    print(out)
    assert "command" in out[0]["test_dev"].keys()
    assert "result" in out[0]["test_dev"].keys()
    # check the rc
    assert out[0]["test_dev"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.delete(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            # command 1
                            "dev": "mmqvvsie",
                            "lladdr": "a1:4d:53:40:7d:55",
                            "self": True,
                            "master": True,
                            "router": True,
                            "use": False,
                            "extern_learn": False,
                            "sticky": False,
                            "dst": "34.7.63.7",
                            "vni": 438,
                            "port": 8626,
                            "via": "feutzcak",
                            "options": "hdbjqtiw",
                        },
                        {
                            # command 2
                            "dev": "vymgoaqj",
                            "lladdr": "66:70:80:a9:cd:2e",
                            "self": True,
                            "master": True,
                            "router": True,
                            "use": True,
                            "extern_learn": True,
                            "sticky": False,
                            "dst": "28.104.28.210",
                            "vni": 6891,
                            "port": 652,
                            "via": "qworqtwh",
                            "options": "asnvmmdd",
                        },
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.delete(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            "dev": "mmqvvsie",
                            "lladdr": "a1:4d:53:40:7d:55",
                            "self": True,
                            "master": True,
                            "router": True,
                            "use": False,
                            "extern_learn": False,
                            "sticky": False,
                            "dst": "34.7.63.7",
                            "vni": 438,
                            "port": 8626,
                            "via": "feutzcak",
                            "options": "hdbjqtiw",
                        }
                    ],
                    # device 2
                    "test_dev2": [
                        {
                            "dev": "vymgoaqj",
                            "lladdr": "66:70:80:a9:cd:2e",
                            "self": True,
                            "master": True,
                            "router": True,
                            "use": True,
                            "extern_learn": True,
                            "sticky": False,
                            "dst": "28.104.28.210",
                            "vni": 6891,
                            "port": 652,
                            "via": "qworqtwh",
                            "options": "asnvmmdd",
                        }
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    assert "command" in out[1]["test_dev2"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    assert "result" in out[1]["test_dev2"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0
    assert out[1]["test_dev2"]["rc"] == 0


def test_that_bridge_fdb_replace(capfd):

    dv1 = TestDevice(platform="dentos")
    dv2 = TestDevice(platform="dentos")
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.replace(
            input_data=[
                {
                    # device 1
                    "test_dev": [{}],
                }
            ],
            device_obj={"test_dev": dv1},
        )
    )
    print(out)
    assert "command" in out[0]["test_dev"].keys()
    assert "result" in out[0]["test_dev"].keys()
    # check the rc
    assert out[0]["test_dev"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.replace(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            # command 1
                            "dev": "afiferlt",
                            "lladdr": "2e:38:ea:e3:bd:e4",
                            "self": False,
                            "master": True,
                            "router": False,
                            "use": True,
                            "extern_learn": True,
                            "sticky": True,
                            "dst": "200.10.192.110",
                            "vni": 7671,
                            "port": 3414,
                            "via": "qmxejthx",
                            "options": "eynjazuw",
                        },
                        {
                            # command 2
                            "dev": "bjxtqgas",
                            "lladdr": "b6:b4:56:ea:83:76",
                            "self": False,
                            "master": False,
                            "router": False,
                            "use": False,
                            "extern_learn": True,
                            "sticky": True,
                            "dst": "155.114.108.221",
                            "vni": 846,
                            "port": 2448,
                            "via": "fvdttmpz",
                            "options": "ztevmtrt",
                        },
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.replace(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            "dev": "afiferlt",
                            "lladdr": "2e:38:ea:e3:bd:e4",
                            "self": False,
                            "master": True,
                            "router": False,
                            "use": True,
                            "extern_learn": True,
                            "sticky": True,
                            "dst": "200.10.192.110",
                            "vni": 7671,
                            "port": 3414,
                            "via": "qmxejthx",
                            "options": "eynjazuw",
                        }
                    ],
                    # device 2
                    "test_dev2": [
                        {
                            "dev": "bjxtqgas",
                            "lladdr": "b6:b4:56:ea:83:76",
                            "self": False,
                            "master": False,
                            "router": False,
                            "use": False,
                            "extern_learn": True,
                            "sticky": True,
                            "dst": "155.114.108.221",
                            "vni": 846,
                            "port": 2448,
                            "via": "fvdttmpz",
                            "options": "ztevmtrt",
                        }
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    assert "command" in out[1]["test_dev2"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    assert "result" in out[1]["test_dev2"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0
    assert out[1]["test_dev2"]["rc"] == 0


def test_that_bridge_fdb_show(capfd):

    dv1 = TestDevice(platform="dentos")
    dv2 = TestDevice(platform="dentos")
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.show(
            input_data=[
                {
                    # device 1
                    "test_dev": [{}],
                }
            ],
            device_obj={"test_dev": dv1},
        )
    )
    print(out)
    assert "command" in out[0]["test_dev"].keys()
    assert "result" in out[0]["test_dev"].keys()
    # check the rc
    assert out[0]["test_dev"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.show(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            # command 1
                            "dev": "hkfjeobv",
                            "br": "ggdmyipd",
                            "brport": "cgnpqwwm",
                            "vlan": 9210,
                            "state": "crviziqm",
                            "options": "xjkiqryq",
                        },
                        {
                            # command 2
                            "dev": "hphaujyk",
                            "br": "jajlhuqs",
                            "brport": "pyklsinc",
                            "vlan": 7755,
                            "state": "fksbpqss",
                            "options": "qbnkpsrs",
                        },
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        BridgeFdb.show(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            "dev": "hkfjeobv",
                            "br": "ggdmyipd",
                            "brport": "cgnpqwwm",
                            "vlan": 9210,
                            "state": "crviziqm",
                            "options": "xjkiqryq",
                        }
                    ],
                    # device 2
                    "test_dev2": [
                        {
                            "dev": "hphaujyk",
                            "br": "jajlhuqs",
                            "brport": "pyklsinc",
                            "vlan": 7755,
                            "state": "fksbpqss",
                            "options": "qbnkpsrs",
                        }
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    assert "command" in out[1]["test_dev2"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    assert "result" in out[1]["test_dev2"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0
    assert out[1]["test_dev2"]["rc"] == 0
