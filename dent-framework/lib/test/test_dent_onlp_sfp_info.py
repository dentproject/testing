# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/dent/platform/onlpdump/onlpdump.yaml
#
# DONOT EDIT - generated by diligent bots

import asyncio

from testbed.lib.onlp.onlp_sfp_info import OnlpSfpInfo

from .utils import TestDevice


def test_that_onlp_sfp_info_show(capfd):

    dv1 = TestDevice(platform="dentos")
    dv2 = TestDevice(platform="dentos")
    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        OnlpSfpInfo.show(
            input_data=[
                {
                    # device 1
                    "test_dev": [{}],
                }
            ],
            device_obj={"test_dev": dv1},
        )
    )
    print(out)
    assert "command" in out[0]["test_dev"].keys()
    assert "result" in out[0]["test_dev"].keys()
    # check the rc
    assert out[0]["test_dev"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        OnlpSfpInfo.show(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            # command 1
                            "port": 5724,
                            "type": "zgwiqkpl",
                            "media": "olbkpbll",
                            "status": "addoecuh",
                            "len": "rercptat",
                            "vendor": "npafxuoh",
                            "model": "pezepbjm",
                            "serial_number": "edgcmeho",
                        },
                        {
                            # command 2
                            "port": 898,
                            "type": "zyqcgsum",
                            "media": "ylcarrhx",
                            "status": "jlxvnnfr",
                            "len": "ihhdgebc",
                            "vendor": "vvqqjcei",
                            "model": "nalarxwi",
                            "serial_number": "gzroaqyt",
                        },
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0

    loop = asyncio.get_event_loop()
    out = loop.run_until_complete(
        OnlpSfpInfo.show(
            input_data=[
                {
                    # device 1
                    "test_dev1": [
                        {
                            "port": 5724,
                            "type": "zgwiqkpl",
                            "media": "olbkpbll",
                            "status": "addoecuh",
                            "len": "rercptat",
                            "vendor": "npafxuoh",
                            "model": "pezepbjm",
                            "serial_number": "edgcmeho",
                        }
                    ],
                    # device 2
                    "test_dev2": [
                        {
                            "port": 898,
                            "type": "zyqcgsum",
                            "media": "ylcarrhx",
                            "status": "jlxvnnfr",
                            "len": "ihhdgebc",
                            "vendor": "vvqqjcei",
                            "model": "nalarxwi",
                            "serial_number": "gzroaqyt",
                        }
                    ],
                }
            ],
            device_obj={"test_dev1": dv1, "test_dev2": dv2},
        )
    )
    print(out)
    # check if the command was formed
    assert "command" in out[0]["test_dev1"].keys()
    assert "command" in out[1]["test_dev2"].keys()
    # check if the result was formed
    assert "result" in out[0]["test_dev1"].keys()
    assert "result" in out[1]["test_dev2"].keys()
    # check the rc
    assert out[0]["test_dev1"]["rc"] == 0
    assert out[1]["test_dev2"]["rc"] == 0
