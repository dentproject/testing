# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# generated using file ./gen/model/linux/network/iptables/iptables.yaml
#
# DONOT EDIT - generated by diligent bots

from testbed.lib.test_lib_object import TestLibObject


class LinuxIpTables(TestLibObject):
    """
    iptables [-t table] {-A|-C|-D} chain rule-specification
    ip6tables [-t table] {-A|-C|-D} chain rule-specification
    iptables [-t table] -I chain [rulenum] rule-specification
    iptables [-t table] -R chain rulenum rule-specification
    iptables [-t table] -D chain rulenum
    iptables [-t table] -S [chain [rulenum]]
    iptables [-t table] {-F|-L|-Z} [chain [rulenum]] [options...]
    iptables [-t table] -N chain
    iptables [-t table] -X [chain]
    iptables [-t table] -P chain target
    iptables [-t table] -E old-chain-name new-chain-name
    rule-specification = [matches...] [target]
    match = -m matchname [per-match-options]
    target = -j targetname [per-target-options]

    """

    def format_update_rules(self, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_update_rules(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_show_rules(self, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_show_rules(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_update_chain(self, command, *argv, **kwarg):
        raise NotImplementedError

    def parse_update_chain(self, command, output, *argv, **kwarg):
        raise NotImplementedError

    def format_command(self, command, *argv, **kwarg):
        if command in ["append", "check", "delete", "insert", "replace"]:
            return self.format_update_rules(command, *argv, **kwarg)

        if command in ["list", "list_rules", "flush", "zero"]:
            return self.format_show_rules(command, *argv, **kwarg)

        if command in ["new_chain", "policy", "rename_chain"]:
            return self.format_update_chain(command, *argv, **kwarg)

        raise NameError("Cannot find command " + command)

    def parse_output(self, command, output, *argv, **kwarg):
        if command in ["append", "check", "delete", "insert", "replace"]:
            return self.parse_update_rules(command, output, *argv, **kwarg)

        if command in ["list", "list_rules", "flush", "zero"]:
            return self.parse_show_rules(command, output, *argv, **kwarg)

        if command in ["new_chain", "policy", "rename_chain"]:
            return self.parse_update_chain(command, output, *argv, **kwarg)

        raise NameError("Cannot find command " + command)
