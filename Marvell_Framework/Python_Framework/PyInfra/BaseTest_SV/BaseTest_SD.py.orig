import json5
from CLI_GlobalFunctions.SwitchDev.CLICommands.Executer import GlobalGetterSetter
from PyInfra.BaseTest_SV import BaseTest_SV
from PyInfra.DutManagers.SvDut.SwitchDevDutManager import SwitchDevDutManager
from PyInfraCommon.GlobalFunctions.Utils.Function import GetFunctionName
from PyInfraCommon.Globals.DutChannel.DutMainChannel import GlobalDutChannel

from PyInfra.BaseTest_SV.SV_Structures.DutInfo import DutInfoSD

""""
Base Test SwitchDev
"""""


class BaseTest_SD(BaseTest_SV):
    def __init__(self, SuiteName, resource=None, useTG=True):
        super(BaseTest_SD, self).__init__(SuiteName, useTG)
        self.TestData.DutInfo = DutInfoSD()
        self.TestCaseData = None
        self.resource = resource
        self.TGManager.settings.port_cleanup_settings.reset_factory_default = True
        self.stress_mode = False

    def SpecificTestInit(self):
        super(BaseTest_SD, self).SpecificTestInit()
        self._GetDutChannels(path_to_setup=self.SetupXlsPath)
        self.DutMainChannel = self.TestData.Resources.Channels['dutmainchannel']
        self.DutManager = SwitchDevDutManager(self.DutMainChannel, testclass=self)
        self.DutManager.login()
        self._UpdateDutManagerInfo(self.DutManager, self._SvSetup)

        if 'otherchannel' in self.TestData.Resources.Channels:
            self.OtherDutChannel = self.TestData.Resources.Channels['otherchannel']
            self.OtherDutManager = SwitchDevDutManager(self.OtherDutChannel, testclass=self)
            self.OtherDutManager.login()
            self._UpdateDutManagerInfo(self.OtherDutManager, self._SvSetup)
            GlobalGetterSetter().otherDutChannel = self.OtherDutChannel

        if self.resource:
            import os
            dir_path = os.path.dirname(os.path.realpath(__file__))
            root_folder = os.path.abspath(os.path.join(os.path.join(dir_path, os.pardir), os.pardir))
            json_dir = os.path.join(root_folder, "Tests", "Implementations", *self.resource.split("/")[:-1])
            json_path = os.path.join(json_dir, "{}.json".format(self.resource.split("/")[-1]))
            jsonVersion = json_path if os.path.isfile(json_path) else json_path + '5'
            if os.path.isfile(jsonVersion):
                with open(jsonVersion) as json_file:
                    self.TestCaseData = json5.load(json_file)

        GlobalGetterSetter().channel = self.DutMainChannel
        self._AddCleanupRecoveryCrashHandler(self.DutManager.reboot)
<<<<<<< HEAD
        if self.OtherDutChannel:
            self._AddCleanupRecoveryCrashHandler(self.OtherDutManager.reboot)
=======

    def _InitArgParser(self,init_arg_object=True):
        """
        parse optional command line arguments passed to script
        :return:
        :rtype:
        """
        super(BaseTest_SD,self)._InitArgParser(init_arg_object=False)
        self._args_parser.add_argument("-stress", "--stress",action="store_true",
        help="if true will run test under CPU stress", required=False)
        # parse command line args
        self._args_object = self._args_parser.parse_args()
        #handle input args

    def _HandleCommandLineArgs(self,print_args=True):
        """
        handles passed command line args if passed
        :return:
        :rtype:
        """
        funcname = GetFunctionName(self._HandleCommandLineArgs)
        super(BaseTest_SD,self)._HandleCommandLineArgs(False)
        if hasattr(self._args_object,"stress") and self._args_object.stress:
            self.self.stress_mode = self._args_object.stress
            launched_with_args = True
        if self._args_object and self._launched_with_args and print_args:
            msg = funcname + "this test has been launched with the following input arguments:\n{}".format(self._args_object)
            print(msg)
>>>>>>> added support CLI args , and added stress_mode args
