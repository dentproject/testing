###################################################################################
#	Marvell GPL License
#	
#	If you received this File from Marvell, you may opt to use, redistribute and/or
#	modify this File in accordance with the terms and conditions of the General
#	Public License Version 2, June 1991 (the "GPL License"), a copy of which is
#	available along with the File in the license.txt file or by writing to the Free
#	Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 or
#	on the worldwide web at http://www.gnu.org/licenses/gpl.txt.
#	
#	THE FILE IS DISTRIBUTED AS-IS, WITHOUT WARRANTY OF ANY KIND, AND THE IMPLIED
#	WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY
#	DISCLAIMED.  The GPL License provides additional details about this warranty
#	disclaimer.
###################################################################################

#
# PySNMP MIB module Sentry3-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/Sentry3-MIB
# Produced by pysmi-0.1.3 at Wed Nov 01 18:02:48 2017
# On host ? platform ? version ? by user ?
# Using Python version 2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 20:19:30) [MSC v.1500 32 bit (Intel)]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, enterprises, ModuleIdentity, Gauge32, iso, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sentry3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1718, 3))
if mibBuilder.loadTexts: sentry3.setRevisions(('2013-09-16 10:00', '2013-02-14 09:30', '2012-11-07 14:00', '2012-04-18 14:00', '2012-01-04 11:00', '2011-07-11 16:40', '2011-06-15 13:00', '2011-05-05 11:00', '2010-07-07 12:15', '2009-03-10 16:00', '2008-05-07 15:20', '2007-07-09 14:45', '2007-01-09 14:10', '2006-07-20 12:00', '2006-06-12 09:30', '2005-07-27 11:05', '2005-02-18 11:45', '2005-01-07 12:20', '2004-12-09 13:20', '2004-11-11 12:00', '2003-11-20 13:00', '2003-10-23 19:00', '2003-10-02 11:00', '2003-08-27 16:00', '2003-03-28 17:00', '2003-03-27 17:00',))
if mibBuilder.loadTexts: sentry3.setLastUpdated('201309161000Z')
serverTech = MibIdentifier((1, 3, 6, 1, 4, 1, 1718))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 1))
systemVersion = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVersion.setStatus('current')
systemNICSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNICSerialNumber.setStatus('current')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('current')
systemTowerCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTowerCount.setStatus('current')
systemEnvMonCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonCount.setStatus('current')
systemTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 150000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTotalPower.setStatus('current')
systemArea = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('tenth area units').setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemArea.setStatus('current')
systemWattsPerAreaUnit = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1500000))).setUnits('Watts per area unit').setMaxAccess("readonly")
if mibBuilder.loadTexts: systemWattsPerAreaUnit.setStatus('current')
systemAreaUnit = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("squareMeter", 0), ("squareFoot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAreaUnit.setStatus('current')
systemPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 100))).setUnits('hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPowerFactor.setStatus('current')
systemFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 11), Bits().clone(namedValues=NamedValues(("smartLoadShedding", 0), ("snmpPOPS", 1), ("outletControlInhibit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFeatures.setStatus('current')
systemFeatureKey = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFeatureKey.setStatus('current')
systemOutletSeqInterval = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOutletSeqInterval.setStatus('current')
systemOutletRebootDelay = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOutletRebootDelay.setStatus('current')
systemConfigModifiedCount = MibScalar((1, 3, 6, 1, 4, 1, 1718, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigModifiedCount.setStatus('current')
systemTables = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 2))
towerTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1), )
if mibBuilder.loadTexts: towerTable.setStatus('current')
towerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1), ).setIndexNames((0, "Sentry3-MIB", "towerIndex"))
if mibBuilder.loadTexts: towerEntry.setStatus('current')
towerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: towerIndex.setStatus('current')
towerID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerID.setStatus('current')
towerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: towerName.setStatus('current')
towerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("normal", 0), ("noComm", 1), ("fanFail", 2), ("overTemp", 3), ("nvmFail", 4), ("outOfBalance", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerStatus.setStatus('current')
towerInfeedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerInfeedCount.setStatus('current')
towerProductSN = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerProductSN.setStatus('current')
towerModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerModelNumber.setStatus('current')
towerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 8), Bits().clone(namedValues=NamedValues(("failSafe", 0), ("fuseSense", 1), ("directCurrent", 2), ("threePhase", 3), ("fanSense", 4), ("tempSense", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: towerCapabilities.setStatus('current')
towerVACapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerVACapacity.setStatus('current')
towerVACapacityUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1500))).setUnits('tenth percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerVACapacityUsed.setStatus('current')
towerActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerActivePower.setStatus('current')
towerApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 50000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerApparentPower.setStatus('current')
towerPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerPowerFactor.setStatus('current')
towerEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('Kilowatt-Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerEnergy.setStatus('current')
towerLineFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 60))).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: towerLineFrequency.setStatus('current')
infeedTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2), )
if mibBuilder.loadTexts: infeedTable.setStatus('current')
infeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1), ).setIndexNames((0, "Sentry3-MIB", "towerIndex"), (0, "Sentry3-MIB", "infeedIndex"))
if mibBuilder.loadTexts: infeedEntry.setStatus('current')
infeedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: infeedIndex.setStatus('current')
infeedID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedID.setStatus('current')
infeedName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: infeedName.setStatus('current')
infeedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 4), Bits().clone(namedValues=NamedValues(("onSense", 0), ("loadSense", 1), ("powerControl", 2), ("failSafe", 3), ("defaultOff", 4), ("voltageSense", 5), ("powerSense", 6), ("branchOnSense", 7), ("branchLoadSense", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedCapabilities.setStatus('current')
infeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("offWait", 2), ("onWait", 3), ("offError", 4), ("onError", 5), ("noComm", 6), ("reading", 7), ("offFuse", 8), ("onFuse", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedStatus.setStatus('current')
infeedLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("normal", 0), ("notOn", 1), ("reading", 2), ("loadLow", 3), ("loadHigh", 4), ("overLoad", 5), ("readError", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedLoadStatus.setStatus('current')
infeedLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 30000))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedLoadValue.setStatus('current')
infeedLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: infeedLoadHighThresh.setStatus('current')
infeedOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedOutletCount.setStatus('current')
infeedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 300))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedCapacity.setStatus('current')
infeedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4800))).setUnits('tenth Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedVoltage.setStatus('current')
infeedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPower.setStatus('current')
infeedApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedApparentPower.setStatus('current')
infeedPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPowerFactor.setStatus('current')
infeedCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setUnits('tenths').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedCrestFactor.setStatus('current')
infeedEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('tenth Kilowatt-Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedEnergy.setStatus('current')
infeedReactance = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("capacitive", 1), ("inductive", 2), ("resistive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedReactance.setStatus('current')
infeedPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2640))).setUnits('tenth Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPhaseVoltage.setStatus('current')
infeedPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25500))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPhaseCurrent.setStatus('current')
infeedCapacityUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1500))).setUnits('tenth percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedCapacityUsed.setStatus('current')
infeedLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedLineID.setStatus('current')
infeedLineToLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedLineToLineID.setStatus('current')
infeedPhaseID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedPhaseID.setStatus('current')
infeedVACapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedVACapacity.setStatus('current')
infeedVACapacityUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1500))).setUnits('tenth percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: infeedVACapacityUsed.setStatus('current')
outletTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3), )
if mibBuilder.loadTexts: outletTable.setStatus('current')
outletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1), ).setIndexNames((0, "Sentry3-MIB", "towerIndex"), (0, "Sentry3-MIB", "infeedIndex"), (0, "Sentry3-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletEntry.setStatus('current')
outletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: outletIndex.setStatus('current')
outletID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletID.setStatus('current')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletName.setStatus('current')
outletCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 4), Bits().clone(namedValues=NamedValues(("onSense", 0), ("loadSense", 1), ("powerControl", 2), ("shutdown", 3), ("defaultOn", 4), ("ownInfeed", 5), ("fusedBranch", 6), ("voltageSense", 7), ("powerSense", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCapabilities.setStatus('current')
outletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("offWait", 2), ("onWait", 3), ("offError", 4), ("onError", 5), ("noComm", 6), ("reading", 7), ("offFuse", 8), ("onFuse", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatus.setStatus('current')
outletLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("normal", 0), ("notOn", 1), ("reading", 2), ("loadLow", 3), ("loadHigh", 4), ("overLoad", 5), ("readError", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletLoadStatus.setStatus('current')
outletLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 25500))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletLoadValue.setStatus('current')
outletLoadLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletLoadLowThresh.setStatus('current')
outletLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletLoadHighThresh.setStatus('current')
outletControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)).clone(namedValues=NamedValues(("idleOff", 0), ("idleOn", 1), ("wakeOff", 2), ("wakeOn", 3), ("off", 4), ("on", 5), ("lockedOff", 6), ("lockedOn", 7), ("reboot", 8), ("shutdown", 9), ("pendOn", 10), ("pendOff", 11), ("minimumOff", 12), ("minimumOn", 13), ("eventOff", 14), ("eventOn", 15), ("eventReboot", 16), ("eventShutdown", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletControlState.setStatus('current')
outletControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("none", 0), ("on", 1), ("off", 2), ("reboot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlAction.setStatus('current')
outletCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCapacity.setStatus('current')
outletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2640))).setUnits('tenth Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVoltage.setStatus('current')
outletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPower.setStatus('current')
outletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000))).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletApparentPower.setStatus('current')
outletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('hundredths').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerFactor.setStatus('current')
outletCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setUnits('tenths').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCrestFactor.setStatus('current')
outletEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('Watt-Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: outletEnergy.setStatus('current')
outletWakeupState = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("last", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletWakeupState.setStatus('current')
outletPostOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPostOnDelay.setStatus('current')
envMonTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4), )
if mibBuilder.loadTexts: envMonTable.setStatus('current')
envMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1), ).setIndexNames((0, "Sentry3-MIB", "envMonIndex"))
if mibBuilder.loadTexts: envMonEntry.setStatus('current')
envMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: envMonIndex.setStatus('current')
envMonID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonID.setStatus('current')
envMonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonName.setStatus('current')
envMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("noComm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonStatus.setStatus('current')
envMonWaterSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonWaterSensorName.setStatus('current')
envMonWaterSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1), ("noComm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonWaterSensorStatus.setStatus('current')
envMonADCName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonADCName.setStatus('current')
envMonADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("normal", 0), ("reading", 1), ("countLow", 2), ("countHigh", 3), ("readError", 4), ("noComm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonADCStatus.setStatus('current')
envMonADCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonADCCount.setStatus('current')
envMonADCLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonADCLowThresh.setStatus('current')
envMonADCHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envMonADCHighThresh.setStatus('current')
envMonTempHumidSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonTempHumidSensorCount.setStatus('current')
envMonContactClosureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMonContactClosureCount.setStatus('current')
tempHumidSensorTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5), )
if mibBuilder.loadTexts: tempHumidSensorTable.setStatus('current')
tempHumidSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1), ).setIndexNames((0, "Sentry3-MIB", "envMonIndex"), (0, "Sentry3-MIB", "tempHumidSensorIndex"))
if mibBuilder.loadTexts: tempHumidSensorEntry.setStatus('current')
tempHumidSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: tempHumidSensorIndex.setStatus('current')
tempHumidSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorID.setStatus('current')
tempHumidSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorName.setStatus('current')
tempHumidSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("found", 0), ("notFound", 1), ("lost", 2), ("noComm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorStatus.setStatus('current')
tempHumidSensorTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("normal", 0), ("notFound", 1), ("reading", 2), ("tempLow", 3), ("tempHigh", 4), ("readError", 5), ("lost", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorTempStatus.setStatus('current')
tempHumidSensorTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2540))).setUnits('tenth degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorTempValue.setStatus('current')
tempHumidSensorTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorTempLowThresh.setStatus('current')
tempHumidSensorTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorTempHighThresh.setStatus('current')
tempHumidSensorHumidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("normal", 0), ("notFound", 1), ("reading", 2), ("humidLow", 3), ("humidHigh", 4), ("readError", 5), ("lost", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorHumidStatus.setStatus('current')
tempHumidSensorHumidValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setUnits('percentage relative humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHumidSensorHumidValue.setStatus('current')
tempHumidSensorHumidLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorHumidLowThresh.setStatus('current')
tempHumidSensorHumidHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage relative humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorHumidHighThresh.setStatus('current')
tempHumidSensorTempScale = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("celsius", 0), ("fahrenheit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorTempScale.setStatus('current')
tempHumidSensorTempRecDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setUnits('degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHumidSensorTempRecDelta.setStatus('current')
contactClosureTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6), )
if mibBuilder.loadTexts: contactClosureTable.setStatus('current')
contactClosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1), ).setIndexNames((0, "Sentry3-MIB", "envMonIndex"), (0, "Sentry3-MIB", "contactClosureIndex"))
if mibBuilder.loadTexts: contactClosureEntry.setStatus('current')
contactClosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: contactClosureIndex.setStatus('current')
contactClosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactClosureID.setStatus('current')
contactClosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosureName.setStatus('current')
contactClosureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1), ("noComm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactClosureStatus.setStatus('current')
branchTable = MibTable((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7), )
if mibBuilder.loadTexts: branchTable.setStatus('current')
branchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1), ).setIndexNames((0, "Sentry3-MIB", "towerIndex"), (0, "Sentry3-MIB", "infeedIndex"), (0, "Sentry3-MIB", "branchIndex"))
if mibBuilder.loadTexts: branchEntry.setStatus('current')
branchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: branchIndex.setStatus('current')
branchID = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: branchID.setStatus('current')
branchName = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: branchName.setStatus('current')
branchCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 4), Bits().clone(namedValues=NamedValues(("onSense", 0), ("loadSense", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: branchCapabilities.setStatus('current')
branchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("offWait", 2), ("onWait", 3), ("offError", 4), ("onError", 5), ("noComm", 6), ("reading", 7), ("offFuse", 8), ("onFuse", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: branchStatus.setStatus('current')
branchLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("normal", 0), ("notOn", 1), ("reading", 2), ("loadLow", 3), ("loadHigh", 4), ("overLoad", 5), ("readError", 6), ("noComm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: branchLoadStatus.setStatus('current')
branchLoadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4000))).setUnits('hundredth Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: branchLoadValue.setStatus('current')
branchLoadHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: branchLoadHighThresh.setStatus('current')
branchCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1718, 3, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 40))).setUnits('Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: branchCapacity.setStatus('current')
sentry3Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 100))
events = MibIdentifier((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0))
towerStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 1)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "towerID"), ("Sentry3-MIB", "towerName"), ("Sentry3-MIB", "towerStatus"))
if mibBuilder.loadTexts: towerStatusEvent.setStatus('current')
infeedStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 2)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "infeedID"), ("Sentry3-MIB", "infeedName"), ("Sentry3-MIB", "infeedStatus"))
if mibBuilder.loadTexts: infeedStatusEvent.setStatus('current')
infeedLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 3)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "infeedID"), ("Sentry3-MIB", "infeedName"), ("Sentry3-MIB", "infeedLoadStatus"), ("Sentry3-MIB", "infeedLoadValue"), ("Sentry3-MIB", "infeedLoadHighThresh"))
if mibBuilder.loadTexts: infeedLoadEvent.setStatus('current')
outletStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 4)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "outletID"), ("Sentry3-MIB", "outletName"), ("Sentry3-MIB", "outletStatus"))
if mibBuilder.loadTexts: outletStatusEvent.setStatus('current')
outletLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 5)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "outletID"), ("Sentry3-MIB", "outletName"), ("Sentry3-MIB", "outletLoadStatus"), ("Sentry3-MIB", "outletLoadValue"), ("Sentry3-MIB", "outletLoadLowThresh"), ("Sentry3-MIB", "outletLoadHighThresh"))
if mibBuilder.loadTexts: outletLoadEvent.setStatus('current')
outletChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 6)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "outletID"), ("Sentry3-MIB", "outletName"), ("Sentry3-MIB", "outletStatus"), ("Sentry3-MIB", "outletControlState"))
if mibBuilder.loadTexts: outletChangeEvent.setStatus('current')
envMonStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 7)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "envMonID"), ("Sentry3-MIB", "envMonName"), ("Sentry3-MIB", "envMonStatus"))
if mibBuilder.loadTexts: envMonStatusEvent.setStatus('current')
envMonWaterSensorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 8)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "envMonID"), ("Sentry3-MIB", "envMonWaterSensorName"), ("Sentry3-MIB", "envMonWaterSensorStatus"))
if mibBuilder.loadTexts: envMonWaterSensorEvent.setStatus('current')
envMonADCEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 9)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "envMonID"), ("Sentry3-MIB", "envMonADCName"), ("Sentry3-MIB", "envMonADCStatus"), ("Sentry3-MIB", "envMonADCCount"), ("Sentry3-MIB", "envMonADCLowThresh"), ("Sentry3-MIB", "envMonADCHighThresh"))
if mibBuilder.loadTexts: envMonADCEvent.setStatus('current')
tempHumidSensorStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 10)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "tempHumidSensorID"), ("Sentry3-MIB", "tempHumidSensorName"), ("Sentry3-MIB", "tempHumidSensorStatus"))
if mibBuilder.loadTexts: tempHumidSensorStatusEvent.setStatus('current')
tempHumidSensorTempEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 11)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "tempHumidSensorID"), ("Sentry3-MIB", "tempHumidSensorName"), ("Sentry3-MIB", "tempHumidSensorTempStatus"), ("Sentry3-MIB", "tempHumidSensorTempValue"), ("Sentry3-MIB", "tempHumidSensorTempLowThresh"), ("Sentry3-MIB", "tempHumidSensorTempHighThresh"), ("Sentry3-MIB", "tempHumidSensorTempScale"))
if mibBuilder.loadTexts: tempHumidSensorTempEvent.setStatus('current')
tempHumidSensorHumidEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 12)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "tempHumidSensorID"), ("Sentry3-MIB", "tempHumidSensorName"), ("Sentry3-MIB", "tempHumidSensorHumidStatus"), ("Sentry3-MIB", "tempHumidSensorHumidValue"), ("Sentry3-MIB", "tempHumidSensorHumidLowThresh"), ("Sentry3-MIB", "tempHumidSensorHumidHighThresh"))
if mibBuilder.loadTexts: tempHumidSensorHumidEvent.setStatus('current')
contactClosureEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 13)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "contactClosureID"), ("Sentry3-MIB", "contactClosureName"), ("Sentry3-MIB", "contactClosureStatus"))
if mibBuilder.loadTexts: contactClosureEvent.setStatus('current')
branchStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 14)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "branchID"), ("Sentry3-MIB", "branchName"), ("Sentry3-MIB", "branchStatus"))
if mibBuilder.loadTexts: branchStatusEvent.setStatus('current')
branchLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 1718, 3, 100, 0, 15)).setObjects(("Sentry3-MIB", "systemLocation"), ("Sentry3-MIB", "branchID"), ("Sentry3-MIB", "branchName"), ("Sentry3-MIB", "branchLoadStatus"), ("Sentry3-MIB", "branchLoadValue"), ("Sentry3-MIB", "branchLoadHighThresh"))
if mibBuilder.loadTexts: branchLoadEvent.setStatus('current')
mibBuilder.exportSymbols("Sentry3-MIB", envMonStatusEvent=envMonStatusEvent, systemOutletSeqInterval=systemOutletSeqInterval, branchIndex=branchIndex, towerEntry=towerEntry, systemFeatures=systemFeatures, tempHumidSensorID=tempHumidSensorID, envMonStatus=envMonStatus, outletPostOnDelay=outletPostOnDelay, envMonTempHumidSensorCount=envMonTempHumidSensorCount, systemAreaUnit=systemAreaUnit, towerApparentPower=towerApparentPower, infeedLineID=infeedLineID, systemNICSerialNumber=systemNICSerialNumber, branchID=branchID, contactClosureEvent=contactClosureEvent, tempHumidSensorHumidHighThresh=tempHumidSensorHumidHighThresh, serverTech=serverTech, outletCrestFactor=outletCrestFactor, tempHumidSensorTempEvent=tempHumidSensorTempEvent, infeedName=infeedName, outletEnergy=outletEnergy, envMonEntry=envMonEntry, outletPower=outletPower, tempHumidSensorTempScale=tempHumidSensorTempScale, infeedEntry=infeedEntry, branchCapabilities=branchCapabilities, infeedPhaseVoltage=infeedPhaseVoltage, towerStatusEvent=towerStatusEvent, envMonIndex=envMonIndex, outletIndex=outletIndex, tempHumidSensorIndex=tempHumidSensorIndex, tempHumidSensorEntry=tempHumidSensorEntry, sentry3=sentry3, outletStatusEvent=outletStatusEvent, towerVACapacityUsed=towerVACapacityUsed, towerVACapacity=towerVACapacity, systemGroup=systemGroup, envMonName=envMonName, tempHumidSensorStatus=tempHumidSensorStatus, tempHumidSensorTempValue=tempHumidSensorTempValue, tempHumidSensorHumidLowThresh=tempHumidSensorHumidLowThresh, towerID=towerID, infeedIndex=infeedIndex, infeedVoltage=infeedVoltage, outletName=outletName, towerProductSN=towerProductSN, systemConfigModifiedCount=systemConfigModifiedCount, outletLoadEvent=outletLoadEvent, envMonADCCount=envMonADCCount, outletPowerFactor=outletPowerFactor, infeedLineToLineID=infeedLineToLineID, systemEnvMonCount=systemEnvMonCount, towerPowerFactor=towerPowerFactor, tempHumidSensorTempHighThresh=tempHumidSensorTempHighThresh, infeedCapacity=infeedCapacity, contactClosureName=contactClosureName, towerCapabilities=towerCapabilities, tempHumidSensorTable=tempHumidSensorTable, infeedLoadValue=infeedLoadValue, envMonWaterSensorEvent=envMonWaterSensorEvent, systemPowerFactor=systemPowerFactor, systemTowerCount=systemTowerCount, tempHumidSensorHumidValue=tempHumidSensorHumidValue, contactClosureIndex=contactClosureIndex, infeedLoadHighThresh=infeedLoadHighThresh, towerStatus=towerStatus, envMonContactClosureCount=envMonContactClosureCount, systemOutletRebootDelay=systemOutletRebootDelay, branchLoadValue=branchLoadValue, branchEntry=branchEntry, envMonWaterSensorName=envMonWaterSensorName, outletLoadLowThresh=outletLoadLowThresh, tempHumidSensorName=tempHumidSensorName, towerIndex=towerIndex, infeedOutletCount=infeedOutletCount, sentry3Traps=sentry3Traps, infeedStatus=infeedStatus, envMonADCName=envMonADCName, branchLoadHighThresh=branchLoadHighThresh, infeedVACapacity=infeedVACapacity, outletTable=outletTable, infeedPower=infeedPower, infeedPhaseID=infeedPhaseID, branchName=branchName, envMonADCLowThresh=envMonADCLowThresh, systemFeatureKey=systemFeatureKey, envMonID=envMonID, infeedPowerFactor=infeedPowerFactor, infeedStatusEvent=infeedStatusEvent, branchLoadStatus=branchLoadStatus, towerModelNumber=towerModelNumber, towerInfeedCount=towerInfeedCount, PYSNMP_MODULE_ID=sentry3, outletLoadStatus=outletLoadStatus, branchStatusEvent=branchStatusEvent, outletChangeEvent=outletChangeEvent, tempHumidSensorHumidStatus=tempHumidSensorHumidStatus, branchLoadEvent=branchLoadEvent, outletLoadValue=outletLoadValue, outletLoadHighThresh=outletLoadHighThresh, branchTable=branchTable, infeedLoadEvent=infeedLoadEvent, events=events, infeedApparentPower=infeedApparentPower, contactClosureID=contactClosureID, contactClosureStatus=contactClosureStatus, outletStatus=outletStatus, infeedLoadStatus=infeedLoadStatus, outletID=outletID, contactClosureTable=contactClosureTable, tempHumidSensorStatusEvent=tempHumidSensorStatusEvent, towerEnergy=towerEnergy, contactClosureEntry=contactClosureEntry, tempHumidSensorTempLowThresh=tempHumidSensorTempLowThresh, envMonADCHighThresh=envMonADCHighThresh, outletCapacity=outletCapacity, tempHumidSensorTempStatus=tempHumidSensorTempStatus, infeedVACapacityUsed=infeedVACapacityUsed, outletVoltage=outletVoltage, towerName=towerName, systemLocation=systemLocation, infeedCapabilities=infeedCapabilities, systemWattsPerAreaUnit=systemWattsPerAreaUnit, systemTables=systemTables, systemTotalPower=systemTotalPower, infeedCapacityUsed=infeedCapacityUsed, towerActivePower=towerActivePower, envMonWaterSensorStatus=envMonWaterSensorStatus, towerTable=towerTable, outletApparentPower=outletApparentPower, infeedEnergy=infeedEnergy, infeedReactance=infeedReactance, infeedCrestFactor=infeedCrestFactor, outletControlState=outletControlState, outletEntry=outletEntry, envMonTable=envMonTable, outletCapabilities=outletCapabilities, branchStatus=branchStatus, tempHumidSensorTempRecDelta=tempHumidSensorTempRecDelta, systemVersion=systemVersion, infeedID=infeedID, towerLineFrequency=towerLineFrequency, outletWakeupState=outletWakeupState, envMonADCStatus=envMonADCStatus, infeedPhaseCurrent=infeedPhaseCurrent, infeedTable=infeedTable, systemArea=systemArea, branchCapacity=branchCapacity, outletControlAction=outletControlAction, envMonADCEvent=envMonADCEvent, tempHumidSensorHumidEvent=tempHumidSensorHumidEvent)
